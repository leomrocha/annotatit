(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for int() with base 10: '6YcJljPGz4M'"
p3
sS'layer'
p4
S'/home/leo/projects/heroku_projects/annotatit/applications/AnnotatIt/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nimport os, sys\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    return dict()\n\n\n\n#########################################################################\n#\n#########################################################################\n\n@auth.requires_login()\ndef videos():\n    """\n    Shows me a list of all the videos I have the right to see\n    """\n    #if(not auth.user):\n    #    redirect(URL(\'index\'))\n    _videos = db(db.youtube_videos.person_id == auth.user_id).select()\n    \n    return dict(\n                videos = _videos,\n                )\n\n@auth.requires_login()\ndef my_videos():\n    """\n    Shows the list of My uploaded videos,\n    And options to update, modify and erase them\n    """\n    #if(not auth.user):\n    #    redirect(URL(\'index\'))\n    _videos = db(db.youtube_videos.person_id == auth.user_id).select()\n    \n    return dict(\n                videos = _videos,\n                )\n\n\n\n@auth.requires_login()\ndef upload_video():\n    """\n    Form to upload a new video (in fact, for the moment is only add a video from youtube)\n    """\n    uform  = SQLFORM(db.youtube_videos, showid = False, fields=[\'title\', \'subtitle\', \'youtube_video_id\', \'script\' ], #TODO take out person_id from the selectable fields and put it automatically to the current user\n                    formname=\'upload_video_form\', submit_button = \'Upload\')\n                    #formstyle=\'div\', formname=\'upload_video_form\', submit_button = \'Upload\') #formstyle not working!!\n    if uform.process(formname=\'upload_video_form\').accepted:\n        #response.flash = \'form accepted\'\n        #TODO redirect to the video page with the right video ID\n        #next_page = URL(\'view_video\',args=uform.youtube_video_id)\n        #redirect(next_page)\n        pass\n    elif uform.errors:\n        response.flash = \'form has errors, please check\'\n    else:\n        #response.flash = \'please fill out the form\'\n        pass\n    return dict(\n                upload_form = uform,\n                )\n\n\n#############################\n#AJAX post annotation on video\n#############################\n@auth.requires_login()\ndef post_annotation():\n    """\n    ajax call for the view_video view for commenting on a video\n    """\n    form = SQLFORM(db.annotations,showid = False,\n                    fields=[\'video_id\',\'video_time\', \'comment\'],)\n    form.vars.annotator_id = auth.user_id\n    if form.accepts(request, formname=None):\n        response.flash = T(\'Your comment has been successfully posted\')\n        return DIV(T("Comment posted"))\n    elif form.errors:\n        return TABLE(*[TR(k, v) for k, v in form.errors.items()])\n#############################\n#############################\n\n@auth.requires_login()\ndef view_video():\n    """\n    Shows the list of uploaded videos\n    """\n    #if(not auth.user):\n    #    redirect(URL(\'index\'))\n    _video_id = request.args(0, cast=str)#youtube videoID\n    \n    _video = db.youtube_videos(db.youtube_videos.youtube_video_id == _video_id)\n    _annotations = db(db.annotations.video_id == _video_id).select(orderby=db.annotations.video_time)\n    os.system("echo \'annotations =  "+str(_annotations)+"\'")\n    #check for permissions of individual and group to actually see the video, else show not allowed \n    """\n    aform = SQLFORM(db.annotations, showid = False,\n                    fields=[\'video_time\', \'comment\'],\n                    formname=\'comment_form\', submit_button = \'Comment\')\n                    #formstyle=\'div\', formname=\'comment_form\', submit_button = \'Upload\')\n    aform.vars.video_id = _video_id\n    if aform.process(formname=\'comment_form\').accepted:\n        pass\n        #response.flash = \'form accepted\'\n        #TODO AJAX add the comment to DB\n        #TODO AJAX add the comment to the current page\n    elif aform.errors:\n        response.flash = \'form has errors, please check\'\n    else:\n        #response.flash = \'please fill out the form\'\n        pass\n    """\n    return dict(\n                video = _video,\n                annotations = _annotations,\n                #annotation_form = aform\n                )\n\n\n\n\n\n\n#########################################################################\n#########################################################################\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(view_video)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/leo/projects/heroku_projects/annotatit/applications/AnnotatIt/controllers/default.py", line 196, in <module>\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/globals.py", line 194, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/tools.py", line 2976, in f\n    return action(*a, **b)\n  File "/home/leo/projects/heroku_projects/annotatit/applications/AnnotatIt/controllers/default.py", line 111, in view_video\n    _annotations = db(db.annotations.video_id == _video_id).select(orderby=db.annotations.video_time)\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 9860, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 2232, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 1677, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 1587, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 1362, in expand\n    return op(first, second, **optional_args)\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 1272, in EQ\n    self.expand(second, first.type))\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 1372, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 1814, in represent\n    return str(int(obj))\nValueError: invalid literal for int() with base 10: \'6YcJljPGz4M\'\n'
p11
s.