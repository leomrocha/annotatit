(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'DAL' object has no attribute 'youtube_videos'"
p3
sS'layer'
p4
S'/home/leo/projects/heroku_projects/annotatit/applications/AnnotatIt/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nfrom urlparse import urlparse, parse_qs\n\nimport os, sys\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    return dict()\n\n\n#########################################################################\n#Login Not needed\n#########################################################################\n@auth.requires_login()\ndef videos_by():\n    """\n    Shows the list of My uploaded videos,\n    And options to update, modify and erase them\n    """\n    #check that the user has permission to see what he sees\n    #if(not auth.user):\n    #    redirect(URL(\'index\'))\n    \n    user_id = request.args(0, cast=int)#youtube user id\n    _videos = db(db.videos.person_id == user_id)(db.video.video_network == "YOUTUBE").select()\n    #TODO should check also for permissions of the user cheking the video\n    \n    return dict(\n                videos = _videos,\n                )\n\n\n\n\n\n#########################################################################\n#Login Required\n#########################################################################\n\n@auth.requires_login()\ndef videos():\n    """\n    Shows me a list of all the videos I have the right to see\n    """\n    #if(not auth.user):\n    #    redirect(URL(\'index\'))\n    _videos = db(db.video.person_id == auth.user_id).select()\n    \n    return dict(\n                videos = _videos,\n                )\n\n@auth.requires_login()\ndef my_videos():\n    """\n    Shows the list of My uploaded videos,\n    And options to update, modify and erase them\n    """\n    #if(not auth.user):\n    #    redirect(URL(\'index\'))\n    _ytvideos = db(db.video.person_id == auth.user_id)(db.video.video_network == "YOUTUBE").select()\n    _vvideos = db(db.video.person_id == auth.user_id)(db.video.video_network == "VIMEO").select()\n    return dict(\n                youtube_videos = _ytvideos,\n                vimeo_videos = _vvideos,\n                )\n\n\n\n@auth.requires_login()\ndef upload_video():\n    """\n    Form to upload a new video (in fact, for the moment is only add a video from youtube)\n    """\n    uform=FORM(\'Title: \',\n              INPUT(_name=\'title\', requires=IS_NOT_EMPTY()),\n              \'Video Link: \',\n              INPUT(_name=\'link\', requires=IS_NOT_EMPTY()),\n              INPUT(_type=\'submit\'),\n              formname=\'simple_upload_video_form\')\n    if uform.process(formname=\'simple_upload_video_form\').accepted:\n        #os.system("echo \'upload form fields: "+str(uform.vars)+" \'")\n        url_data = urlparse(uform.vars.link)\n        #os.system("echo \'url_data: "+str(url_data)+" \'")\n        #now check if youtube or vimeo\n        if (url_data[1].lower().find("youtube") >=0 ):\n            query = parse_qs(url_data.query)\n            #os.system("echo \'query: "+str(query)+" \'")\n            video_id = query["v"][0]\n            db.video.insert(title = uform.vars.title,\n                                     video_id= video_id,\n                                     video_network="YOUTUBE",\n                                     full_url = uform.vars.link,\n                                    )\n        elif (url_data[1].lower().find("vimeo") >=0 ):\n            ##treat like youtube and save data on youtube db Table\n            vid = url_data.path.split("/")\n            video_id =  vid[-1] if len(vid[-1]) > 0 else vid[-2]\n            db.video.insert(title = uform.vars.title,\n                                     video_id= video_id,\n                                     video_network="VIMEO",\n                                     full_url = uform.vars.link,\n                                    )\n        else:\n            #fail!!\n            pass\n        #response.flash = \'form accepted\'\n        pass\n    elif uform.errors:\n        response.flash = \'form has errors, please check\'\n    else:\n        #response.flash = \'please fill out the form\'\n        pass\n    return dict(\n                upload_form = uform,\n                )\n\n\n#############################\n#AJAX calls\n#############################\n\ndef get_tags():\n    """\n    ajax call for the view_video view for commenting on a video \n    with the fast annotation system\n    """\n    if (request.vars.video_id):\n        rows = db(db.tag.video_id == request.vars.video_id).select();\n        return response.json(rows)\n    else:\n        return None\n\n\ndef get_comments():\n    """\n    ajax call for the view_video view for commenting on a video \n    with the fast annotation system\n    """\n    if (request.vars.video_id):\n        rows = db(db.annotations.video_id == request.vars.video_id).select();\n        return response.json(rows)\n    else:\n        return None\n\n\n@auth.requires_login() \ndef post_annotation():\n    """\n    ajax call for the view_video view for commenting on a video\n    """\n    form = SQLFORM(db.annotations,showid = False,\n                    fields=[\'video_id\',\'video_time\', \'comment\'],)\n    form.vars.annotator_id = auth.user_id\n    if form.accepts(request, formname=None):\n        response.flash = T(\'Your comment has been successfully posted\')\n        #return DIV(T("Comment posted"))\n        #return DIV(BEAUTIFY(form.vars))\n        return None\n    elif form.errors:\n        return TABLE(*[TR(k, v) for k, v in form.errors.items()])\n\n\n@auth.requires_login() \ndef post_advice():\n    """\n    ajax call for the view_video view for commenting on a video\n    """\n    form = SQLFORM(db.advice,showid = False,\n                    fields=[ \'advice_text\'],)\n    #os.system("echo advice vars: \'"+str(request.vars)+"\'")\n    form.vars.annotator_id = auth.user_id\n    form.vars.video_id = request.vars.annotation_video_id\n    if form.accepts(request, formname=None):\n        response.flash = T(\'Your advice has been successfully posted\')\n        #return DIV(T("Comment posted"))\n        #return DIV(BEAUTIFY(form.vars))\n        return None\n    elif form.errors:\n        return TABLE(*[TR(k, v) for k, v in form.errors.items()])\n\n@auth.requires_login()\ndef post_tag():\n    """\n    ajax call for the view_video view for commenting on a video \n    with the fast annotation system\n    """\n    form = SQLFORM(db.tag,showid = False,\n                    fields=[\'tag_type_name\', \'video_id\',\'evaluation\',\'video_time\'],)\n    form.vars.annotator_id = auth.user_id\n    #os.system("echo ontag vars: \'"+str(form.vars)+"\'")\n    if form.accepts(request, formname=None):\n        response.flash = T(\'Tagged\')\n        #return DIV(T("Comment posted"))\n        #return DIV(BEAUTIFY(form.vars))\n        return None\n    elif form.errors:\n        return TABLE(*[TR(k, v) for k, v in form.errors.items()])\n\n\n@auth.requires_login()\ndef modify_comment():\n    """\n    ajax call for the view_video view for modifying a fast commenting on a video \n    with the fast annotation system\n    """\n    #TODO\n    #check the user is the one who created the comment or tag\n    \n    pass\n    \n@auth.requires_login()\ndef delete_comment():\n    """\n    ajax call for the view_video view for deleting a fast commenting on a video \n    with the fast annotation system\n    """\n    #check the user is the one who created the comment or tag or the owner of the video\n    #TODO\n    pass\n\n@auth.requires_login()\ndef modify_tag():\n    """\n    ajax call for the view_video view for modifying a fast commenting on a video \n    with the fast annotation system\n    """\n    #TODO\n    #check the user is the one who created the comment or tag\n    \n    pass\n    \n@auth.requires_login()\ndef delete_tag():\n    """\n    ajax call for the view_video view for deleting a fast commenting on a video \n    with the fast annotation system\n    """\n    #check the user is the one who created the comment or tag or the owner of the video\n    #TODO\n    pass\n    \n    \n#############################\n#############################\n\n#@auth.requires_login() #TODO make user authentication control here!!! .. for the moment a link is needed\ndef view_video():\n    """\n    Shows the list of uploaded videos\n    """\n    #if(not auth.user):\n    #    redirect(URL(\'index\'))\n    _video_id = request.args(0, cast=str)#youtube videoID\n    \n    _video = db(db.video.video_id == _video_id)(db.video.video_network == "YOUTUBE").select()\n    #TODO check that the video actually exists, if not give the message that it doesn\'t\n    os.system("echo \'video =  "+str(_video)+"\'")\n    os.system("echo \'video.id =  "+str(_video.id)+"\'")\n    #_annotations = db(db.annotations.video_id == _video.id).select(orderby=db.annotations.video_time)\n    _advices = db(db.advice.video_id == _video.id).select()\n    _suggested_tags = [{\'name\': \'Voice\', \'fields\': [\'QUESTION\',\'OK\', \'WARNING\', \'BAD\'] } ,\n                       { \'name\':\'Gestual\', \'fields\': [\'QUESTION\',\'OK\', \'WARNING\', \'BAD\']} , \n                       { \'name\':\'Look\', \'fields\': [\'QUESTION\',\'OK\', \'WARNING\', \'BAD\']} ,\n                       { \'name\':\'Space Use\', \'fields\': [\'QUESTION\',\'OK\', \'WARNING\', \'BAD\']} , \n                       { \'name\':\'Hesitation\', \'fields\': [\'QUESTION\', \'WARNING\', \'BAD\']}\n                      ] #TODO this should come from DB and be more detailed about the fields (OK, Warning, Bad, don\'t know yet). should be passed as JSON\n    #os.system("echo \'annotations =  "+str(_annotations)+"\'")\n    #check for permissions of individual and group to actually see the video, else show not allowed \n    """ #changed to act on ajax instead of form\n    aform = SQLFORM(db.annotations, showid = False,\n                    fields=[\'video_time\', \'comment\'],\n                    formname=\'comment_form\', submit_button = \'Comment\')\n                    #formstyle=\'div\', formname=\'comment_form\', submit_button = \'Upload\')\n    aform.vars.video_id = _video_id\n    if aform.process(formname=\'comment_form\').accepted:\n        pass\n        #response.flash = \'form accepted\'\n        #TODO AJAX add the comment to DB\n        #TODO AJAX add the comment to the current page\n    elif aform.errors:\n        response.flash = \'form has errors, please check\'\n    else:\n        #response.flash = \'please fill out the form\'\n        pass\n    """\n    return dict(\n                video = _video,\n                #annotations = _annotations,\n                advices = _advices,\n                #annotation_form = aform\n                suggested_tags = _suggested_tags,\n                )\n\n\n#@auth.requires_login() #TODO make user authentication control here!!! .. for the moment a link is needed\ndef view_vimeo_video():\n    """\n    Shows the list of uploaded videos\n    """\n    #if(not auth.user):\n    #    redirect(URL(\'index\'))\n    _video_id = request.args(0, cast=str)#youtube videoID\n    \n    _video = db.video(db.video.video_id == _video_id)\n    #os.system("echo \'video.id =  "+str(_video.id)+"\'")\n    #_annotations = db(db.annotations.video_id == _video.id).select(orderby=db.annotations.video_time)\n    _advices = db(db.advice.video_id == _video.id).select()\n    _suggested_tags = [{\'name\': \'Voice\', \'fields\': [\'QUESTION\',\'OK\', \'WARNING\', \'BAD\'] } ,\n                       { \'name\':\'Gestual\', \'fields\': [\'QUESTION\',\'OK\', \'WARNING\', \'BAD\']} , \n                       { \'name\':\'Look\', \'fields\': [\'QUESTION\',\'OK\', \'WARNING\', \'BAD\']} ,\n                       { \'name\':\'Space Use\', \'fields\': [\'QUESTION\',\'OK\', \'WARNING\', \'BAD\']} , \n                       { \'name\':\'Hesitation\', \'fields\': [\'QUESTION\', \'WARNING\', \'BAD\']}\n                      ] \n    return dict(\n                video = _video,\n                #annotations = _annotations,\n                advices = _advices,\n                #annotation_form = aform\n                suggested_tags = _suggested_tags,\n                )\n\n\n\n\n#########################################################################\n#########################################################################\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(view_vimeo_video)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/leo/projects/heroku_projects/annotatit/applications/AnnotatIt/controllers/default.py", line 395, in <module>\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/globals.py", line 194, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/leo/projects/heroku_projects/annotatit/applications/AnnotatIt/controllers/default.py", line 323, in view_vimeo_video\n    _advices = db(db.advice.video_id == _video.id).select()\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 9860, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 2232, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 1690, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 1671, in _select_aux\n    return processor(rows,fields,self._colnames,cacheable=cacheable)\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 2042, in parse\n    value = self.parse_value(value,ft,blob_decode)\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 1890, in parse_value\n    return self.parsemap[key](value,field_type)\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 1896, in parse_reference\n    value._table, value._record = self.db[referee], None\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 7830, in __getitem__\n    return self.__getattr__(str(key))\n  File "/home/leo/projects/heroku_projects/annotatit/gluon/dal.py", line 7837, in __getattr__\n    return ogetattr(self, key)\nAttributeError: \'DAL\' object has no attribute \'youtube_videos\'\n'
p11
s.