# -*- coding: utf-8 -*-

#########################################################################
## This scaffolding model makes your app work on Google App Engine too
## File is released under public domain and you can use without limitations
#########################################################################

## if SSL/HTTPS is properly configured and you want all HTTP requests to
## be redirected to HTTPS, uncomment the line below:
# request.requires_https()

from datetime import datetime
import uuid
import time
#import urllib2
from gluon.contrib.heroku import get_db                                         
db = get_db() 


APP_NAME = "AnnotatIt"
APP_DOMAIN_NAME = "AnnotatIt.com"
APP_DOMAIN_NAME_2 = "Annotat.It" #TODO register if available
############################################
##Contact email ... this should NEVER be public
##########################################
WEBMASTERS_EMAIL_NAME = "leo"
WEBMASTERS_EMAIL_DOMAIN = "annotatit.com"
WEBMASTERS_EMAIL_DOMAIN_2 = "annotat.it"
WEBMASTERS_EMAIL = "leo@annotatit.com"
WEBMASTERS_EMAIL_2 = "leo@annotat.it"

## by default give a view/generic.extension to all actions from localhost
## none otherwise. a pattern can be 'controller/function.extension'
response.generic_patterns = ['*'] if request.is_local else []
## (optional) optimize handling of static files
# response.optimize_css = 'concat,minify,inline'
# response.optimize_js = 'concat,minify,inline'

from gluon.tools import Auth, Crud, Service, PluginManager, prettydate
auth = Auth(db)
crud, service, plugins = Crud(db), Service(), PluginManager()

## create all tables needed by auth if not custom tables
auth.define_tables(username=False, signature=False)

## configure email
mail = auth.settings.mailer
mail.settings.server = 'logging' or 'smtp.gmail.com:587'
mail.settings.sender = 'you@gmail.com'
mail.settings.login = 'username:password'

## configure auth policy
auth.settings.registration_requires_verification = False
auth.settings.registration_requires_approval = False
auth.settings.reset_password_requires_verification = True

## after defining tables, uncomment below to enable auditing
# auth.enable_record_versioning(db)
################################################################################
#new data types .. notice, for the moment some names will be temporary while
#the old data types are ported and erased from this system
################################################################################

################
# Media linking
################
#media refers to any type of media either video or audio
db.define_table('media', 
    Field('owner_id', 'reference auth_user', default=auth.user_id, requires=IS_NOT_EMPTY()),
    Field('title', length=256, default="No title"),
    Field('subtitle', length=256, default=""),
    Field('media_annotate_key', length=64, default=lambda: uuid.uuid4(), notnull=True,writable=False, unique=True), 
    Field('media_view_results_key', length=64, default=lambda: uuid.uuid4(), notnull=True,writable=False, unique=True),
    Field('media_embed_key', length=64, default=lambda: uuid.uuid4(), notnull=True,writable=False, unique=True),
    Field('media_id', requires=IS_NOT_EMPTY()),
    Field('media_network', requires=IS_IN_SET(("youtube", "vimeo", "annotatit"))), #maybe facebook will be nice to add, but later!!
    Field('media_url', requires=IS_URL()),
    Field('privacy', default='private', requires=IS_IN_SET(("unlisted", "public", "private"))),
    Field('annotation_permissions', default='only_me', requires=IS_IN_SET(("only_me", "authorized_groups", "authorized_people", "all"))), #TODO add a field that is "only people with the link"
    Field('view_permissions', default='only_me', requires=IS_IN_SET(("only_me", "authorized_groups", "authorized_people", "all"))),#TODO add a field that is "only people with the link"
    Field('creation_datetime', 'datetime',  default=datetime.now(), requires=IS_DATETIME()),
    Field('update_datetime', 'datetime',  default=datetime.now(), requires=IS_DATETIME()),
    )
    
##################
####Annotations
##################

#######
#Generic non synchronized nested comments, normal comments system
#######
#a comment that will be time tagged
db.define_table('comment', 
    Field('owner_id', 'reference auth_user', default=auth.user_id, requires=IS_NOT_EMPTY()),
    Field('media_id', 'reference media', requires=IS_NOT_EMPTY()),
    Field('parent_id', 'reference comment'), #nested comments
    Field('text', 'text', length=1024, requires=IS_NOT_EMPTY()),
    Field('creation_datetime', 'datetime',  default=datetime.now(), requires=IS_DATETIME()),
    Field('update_datetime', 'datetime',  default=datetime.now(), requires=IS_DATETIME()),
    )

########
# Marked Synchronized Comments 
#
# Allows to quickly mark a point in time to later come back and make a more thorough comment
# Marks are shown as icons for easy interpretation
########
db.define_table('flagged_comment', 
    Field('owner_id', 'reference auth_user', default=auth.user_id, requires=IS_NOT_EMPTY()),
    Field('media_id', 'reference media', requires=IS_NOT_EMPTY()),
    Field('parent_id', 'reference comment'), #nested comments
    Field('media_time', 'time', requires=IS_TIME()), #automatically filled
    #Field('mark', requires=IS_IN_SET(("OK", "WARNING", "QUESTION"))),
    #Field('keyboard_shortcut', 'string', length=1)
    Field('flag_name','string', length=30),
    Field('flag_color', 'string', length=7 ), # '#RRGGBB'
    Field('text', 'text', length=512, requires=IS_NOT_EMPTY()),
    Field('creation_datetime', 'datetime',  default=datetime.now(), requires=IS_DATETIME()),
    Field('update_datetime', 'datetime',  default=datetime.now(), requires=IS_DATETIME()),
    )

## Independent marks, as for giving a possibility to users
# is what before was called TAG, but now I changed the name
db.define_table('flag', 
    Field('owner_id', 'reference auth_user', default=auth.user_id, requires=IS_NOT_EMPTY()),
    Field('media_id', 'reference media', requires=IS_NOT_EMPTY()),
    Field('name', 'string'), #, requires=IS_IN_SET(("QUESTION", "OK", "WARNING","BAD")) ),
    Field('media_time', 'time', requires=IS_TIME()), #this field should be automatically generated and filled
    Field('creation_datetime', 'datetime',  default=datetime.now(), requires=IS_DATETIME()),
    Field('update_datetime', 'datetime',  default=datetime.now(), requires=IS_DATETIME()),
    )

    
##########
#Tags:
#
# Tags are small words or sentences that refer to a comment, for suggesting
# possible evaluation outcomes
##########

db.define_table('text_tag', 
    Field('owner_id', 'reference auth_user', default=auth.user_id, requires=IS_NOT_EMPTY()),
    Field('parent_id', 'reference comment'), #nested comments
    Field('text', 'text', length=50, requires=IS_NOT_EMPTY()),
    Field('creation_datetime', 'datetime',  default=datetime.now(), requires=IS_DATETIME()),
    Field('update_datetime', 'datetime',  default=datetime.now(), requires=IS_DATETIME()),
    )

#owner of media can suggest what tags to put
db.define_table('suggested_tag', 
    Field('owner_id', 'reference auth_user', default=auth.user_id, requires=IS_NOT_EMPTY()),
    Field('media_id', 'reference media'), #nested comments
    Field('name', 'text', length=50, requires=IS_NOT_EMPTY()),
    #Field('icon',  ), #optional
    Field('creation_datetime', 'datetime',  default=datetime.now(), requires=IS_DATETIME()),
    Field('update_datetime', 'datetime',  default=datetime.now(), requires=IS_DATETIME()),
    )


######################
# Sections 
# mark media sections
######################

db.define_table('section', 
    Field('owner_id', 'reference auth_user', default=auth.user_id, requires=IS_NOT_EMPTY()),
    Field('media_id', 'reference media', requires=IS_NOT_EMPTY()),
    Field('parent_id', 'reference section', default=None),
    Field('name', 'string' ),
    Field('color', 'string', length=7 ), # '#RRGGBB'
    Field('begin_time', 'time', requires=IS_TIME()), #auto filled
    Field('end_time', 'time', requires=IS_TIME()), #auto filled
    Field('creation_datetime', 'datetime',  default=datetime.now(), requires=IS_DATETIME()),
    Field('update_datetime', 'datetime',  default=datetime.now(), requires=IS_DATETIME()),
    )

######################################################
#### Contacts
######################################################

#########################################################################
#Invites, modified from a post by massimo di piero in a post here:
# http://www.mail-archive.com/web2py@googlegroups.com/msg78529.html

db.define_table('invite',
    Field('inviter_id', 'reference auth_user', default=auth.user_id, requires=IS_NOT_EMPTY()),
    Field('email', requires=IS_EMAIL() ),
    Field('uuid',default=str(uuid.uuid4())),
    Field('accepted', 'boolean', default=False)
    )
#in case I want something more complicated
#auth.settings.extra_fields['auth_user']=Field('uuid',requires=IS_IN_DB(db,db.invite.uuid)))
#auth.settings.register_onaccept: lambda form: db(db.invite.uuid==form.vars.uuid).delete()
#auth.define_tables()

db.define_table('contact',
    Field('source_id', 'reference auth_user', default=auth.user_id, requires=IS_NOT_EMPTY()),
    Field('target_id', 'reference auth_user', requires=IS_NOT_EMPTY()),
    )

######################################################
#### Access
######################################################
db.define_table('view_media_access',
    Field('group_id', 'reference auth_group'),
    Field('media_id', 'reference media'),
    )

db.define_table('view_media_access_email',
    Field('email', requires=IS_EMAIL()),
    Field('media_id', 'reference media'),
    )


#annotation acces automatically gives view access
db.define_table('annotate_media_access',
    Field('group_id', 'reference auth_group'),
    Field('media_id', 'reference media'),
    )

db.define_table('annotate_media_access_email',
    Field('email', requires=IS_EMAIL()),
    Field('media_id', 'reference media'),
    )


'''     
##this comment stays here for fast reference
Group Membership: (use auth_membership from web2py)
    id #unique
    user_id
    group_id
    
Group (use auth_group from web2py)
    id #unique
    role
    description
'''

################################################################################
################################################################################
################################################################################
################################################################################
#OLD LEGACY data types
################################################################################
################################################################################

db.define_table('video', 
    Field('person_id', 'reference auth_user', default=auth.user_id, requires=IS_NOT_EMPTY()),
    Field('title', length=256,  requires=IS_NOT_EMPTY()),
    Field('subtitle', length=256, default=""),
    Field('video_id', requires=IS_NOT_EMPTY()),
    Field('video_network', requires=IS_IN_SET(("YOUTUBE", "VIMEO"))), #maybe facebook will be nice to add, but later!!
    Field('full_url', requires=IS_URL()),
    Field('privacy', default='unlisted', requires=IS_IN_SET(("unlisted", "public", "private"))), #later add the groups handling, unlisted is public but not shown in any list, public is listed, private is shared to whom you want
    Field('comment_permissions', default='only_me', requires=IS_IN_SET(("only_me", "authorized_groups", "authorized_people", "all"))),
    Field('script', 'text'),
    Field('datetime', 'datetime',  default=datetime.now(), requires=IS_DATETIME()),
    )
#a comment that will be time tagged
db.define_table('annotations', #TODO change the name to "note" instead of annotations
    Field('video_id', 'reference video', requires=IS_NOT_EMPTY()),#my contact #person I am contacting
    Field('annotator_id', 'reference auth_user', default=auth.user_id, requires=IS_NOT_EMPTY()),
    #Field('annotation_type' , 'string', default= None), #example: hesitation
    #Field('annotation_subtype' , 'string', default=None), #exemple: "ehhh" it is a hesitation, but is more specifically defined
    #Field('evaluation', 'integer', requires=IS_IN_SET((1,2,3,4,5)) ),
    Field('comment',length=512, requires=IS_NOT_EMPTY()),
    Field('video_time', 'time', requires=IS_TIME()), #this field should be automatically generated and filled
    )

#a comment that will be time tagged
db.define_table('advice', 
    Field('video_id', 'reference video', requires=IS_NOT_EMPTY()),#my contact #person I am contacting
    Field('annotator_id', 'reference auth_user', default=auth.user_id, requires=IS_NOT_EMPTY()),
    #Field('annotation_type' , 'string', default= None), #example: hesitation
    #Field('annotation_subtype' , 'string', default=None), #exemple: "ehhh" it is a hesitation, but is more specifically defined
    #Field('evaluation', 'integer', requires=IS_IN_SET((1,2,3,4,5)) ),
    Field('advice_text', 'text', length=512, requires=IS_NOT_EMPTY()),
    )

db.define_table('tag_category', 
    #Field('mother_tag_category', 'reference tag_category'), #might belong to a meta category, for the moment will not implement such complexity
    Field('tag_category_name' , 'string', requires=IS_NOT_EMPTY()), #example: hesitation
    Field('tag_category_description', 'string'),
    )

#a tag type belongs to a tag category, this way tag types can be grouped in categories (toastmasters, music, etc etc etc)
db.define_table('tag_type', 
    #Field('tag_type_id', 'reference tag_category', requires=IS_NOT_EMPTY()),#will belong to a category(e.g. toastmasters)
    Field('tag_type_name' , 'string', requires=IS_NOT_EMPTY()), #example: hesitation
    Field('ok_field', 'boolean', requires=IS_NOT_EMPTY() ),
    Field('warning_field', 'boolean', requires=IS_NOT_EMPTY() ),
    Field('bad_field', 'boolean', requires=IS_NOT_EMPTY() ),
    )

#a tag belongs to a tag type, this way tag types can be generated by DB instead of doing that by hand
db.define_table('tag', 
    #Field('tag_type_id', 'reference tag_type', requires=IS_NOT_EMPTY()),#will belong to a tag (e.g. hesitation)
    Field('tag_type_name' , 'string', requires=IS_NOT_EMPTY()), #temporarly this for demo only, the previous line is the good one
    Field('video_id', 'reference video', requires=IS_NOT_EMPTY()),#my contact #person I am contacting
    Field('annotator_id', 'reference auth_user', default=auth.user_id, requires=IS_NOT_EMPTY()),
    Field('evaluation', 'string', requires=IS_IN_SET(("QUESTION", "OK", "WARNING","BAD")) ),
    Field('video_time', 'time', requires=IS_TIME()), #this field should be automatically generated and filled
    )

#types of tags that a video can have
db.define_table('possible_tag_categories', 
    Field('video_id', 'reference video', requires=IS_NOT_EMPTY()),
    Field('tag_category_id', 'reference tag_category', requires=IS_NOT_EMPTY()),
    )

#types of tags that a video can have
db.define_table('possible_tags', 
    Field('video_id', 'reference video', requires=IS_NOT_EMPTY()),#my contact #person I am contacting
    Field('tag_type_id', 'reference tag_type', requires=IS_NOT_EMPTY()),
    )

