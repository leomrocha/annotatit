(dp1
S'output'
p2
S''
sS'layer'
p3
S'Framework'
p4
sS'code'
p5
S''
sS'snapshot'
p6
(dp7
S'exception'
p8
(dp9
S'__hash__'
p10
S"<method-wrapper '__hash__' of exceptions.RuntimeError object>"
p11
sS'__setattr__'
p12
S"<method-wrapper '__setattr__' of exceptions.RuntimeError object>"
p13
sS'__reduce_ex__'
p14
S'<built-in method __reduce_ex__ of exceptions.RuntimeError object>'
p15
sS'__getslice__'
p16
S"<method-wrapper '__getslice__' of exceptions.RuntimeError object>"
p17
sS'__getitem__'
p18
S"<method-wrapper '__getitem__' of exceptions.RuntimeError object>"
p19
sS'__setstate__'
p20
S'<built-in method __setstate__ of exceptions.RuntimeError object>'
p21
sS'args'
p22
S"('maximum recursion depth exceeded in cmp',)"
p23
sS'__reduce__'
p24
S'<built-in method __reduce__ of exceptions.RuntimeError object>'
p25
sS'__str__'
p26
S"<method-wrapper '__str__' of exceptions.RuntimeError object>"
p27
sS'__format__'
p28
S'<built-in method __format__ of exceptions.RuntimeError object>'
p29
sS'__getattribute__'
p30
S"<method-wrapper '__getattribute__' of exceptions.RuntimeError object>"
p31
sS'__class__'
p32
S"<type 'exceptions.RuntimeError'>"
p33
sS'__unicode__'
p34
S'<built-in method __unicode__ of exceptions.RuntimeError object>'
p35
sS'__delattr__'
p36
S"<method-wrapper '__delattr__' of exceptions.RuntimeError object>"
p37
sS'__subclasshook__'
p38
S'<built-in method __subclasshook__ of type object>'
p39
sS'__repr__'
p40
S"<method-wrapper '__repr__' of exceptions.RuntimeError object>"
p41
sS'__dict__'
p42
S'{}'
p43
sS'__sizeof__'
p44
S'<built-in method __sizeof__ of exceptions.RuntimeError object>'
p45
sS'__doc__'
p46
S"'Unspecified run-time error.'"
p47
sS'__init__'
p48
S"<method-wrapper '__init__' of exceptions.RuntimeError object>"
p49
sS'__new__'
p50
S'<built-in method __new__ of type object>'
p51
ssS'evalue'
p52
S'maximum recursion depth exceeded in cmp'
p53
sS'request'
p54
cgluon.html
XML_unpickle
p55
(S'sBI\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top">ajax</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">application</td><td valign="top">:</td><td><div>AnnotatIt</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">args</td><td valign="top">:</td><td><div><table><tr><td><div>144291f6-f3bc-4e6e-813b-259ee1b919db</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">body</td><td valign="top">:</td><td><div>&lt;cStringIO.StringO object at 0x333d180&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cid</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">client</td><td valign="top">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">controller</td><td valign="top">:</td><td><div>default</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cookies</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">session_id_admin</td><td valign="top">:</td><td><div>127.0.0.1-a967b7ed-7da0-44b4-8527-70ff9dd5cd38<table><tr><td style="font-weight:bold;vertical-align:top">comment</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">domain</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">expires</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">httponly</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">max-age</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">secure</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">version</td><td valign="top">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_id_annotatit</td><td valign="top">:</td><td><div>127.0.0.1-c4ab2f28-1350-4609-a630-6f2377d4e2b6<table><tr><td style="font-weight:bold;vertical-align:top">comment</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">domain</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">expires</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">httponly</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">max-age</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">secure</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">version</td><td valign="top">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">env</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">app_folders</td><td valign="top">:</td><td><div>set([&#x27;/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">applications_parent</td><td valign="top">:</td><td><div>/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">db_sessions</td><td valign="top">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">debugging</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">gluon_parent</td><td valign="top">:</td><td><div>/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">gunicorn_socket</td><td valign="top">:</td><td><div>&lt;socket._socketobject object at 0x33ecf30&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_accept</td><td valign="top">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_accept_encoding</td><td valign="top">:</td><td><div>gzip,deflate,sdch</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_accept_language</td><td valign="top">:</td><td><div>en-US,en;q=0.8,fr;q=0.6,es;q=0.4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_cache_control</td><td valign="top">:</td><td><div>no-cache</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_connection</td><td valign="top">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_cookie</td><td valign="top">:</td><td><div>session_id_admin=127.0.0.1-a967b7ed-7da0-44b4-8527-70ff9dd5cd38; session_id_annotatit=127.0.0.1-c4ab2f28-1350-4609-a630-6f2377d4e2b6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_host</td><td valign="top">:</td><td><div>localhost:5000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_pragma</td><td valign="top">:</td><td><div>no-cache</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_referer</td><td valign="top">:</td><td><div>http://localhost:5000/my_media</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_user_agent</td><td valign="top">:</td><td><div>Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.63 Safari/537.36</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_jython</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_pypy</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">local_hosts</td><td valign="top">:</td><td><div><table><tr><td><div>cotita</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>localhost</div></td></tr><tr><td><div>127.0.1.1</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path_info</td><td valign="top">:</td><td><div>/annotate_media/144291f6-f3bc-4e6e-813b-259ee1b919db</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">query_string</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">raw_uri</td><td valign="top">:</td><td><div>/annotate_media/144291f6-f3bc-4e6e-813b-259ee1b919db</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">remote_addr</td><td valign="top">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">remote_port</td><td valign="top">:</td><td><div>36057</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">request_method</td><td valign="top">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">request_uri</td><td valign="top">:</td><td><div>/AnnotatIt/default/annotate_media/144291f6-f3bc-4e6e-813b-259ee1b919db</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">script_name</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_name</td><td valign="top">:</td><td><div>localhost</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_port</td><td valign="top">:</td><td><div>5000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_protocol</td><td valign="top">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_software</td><td valign="top">:</td><td><div>gunicorn/0.17.2</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_crontype</td><td valign="top">:</td><td><div>soft</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_original_uri</td><td valign="top">:</td><td><div>/annotate_media/144291f6-f3bc-4e6e-813b-259ee1b919db</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_path</td><td valign="top">:</td><td><div>/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_version</td><td valign="top">:</td><td><div>2.5.1-stable+timestamp.2013.06.06.15.39.19</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_errors</td><td valign="top">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x7fe865cc8270&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_file_wrapper</td><td valign="top">:</td><td><div>&lt;class gunicorn.http.wsgi.FileWrapper at 0x2f97808&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_input</td><td valign="top">:</td><td><div>&lt;gunicorn.http.body.Body object at 0x3797ad0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_multiprocess</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_multithread</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_run_once</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_url_scheme</td><td valign="top">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_version</td><td valign="top">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">extension</td><td valign="top">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">folder</td><td valign="top">:</td><td><div>/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">function</td><td valign="top">:</td><td><div>annotate_media</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">get_vars</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">global_settings</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">app_folders</td><td valign="top">:</td><td><div>set([&#x27;/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">applications_parent</td><td valign="top">:</td><td><div>/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">db_sessions</td><td valign="top">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">debugging</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">gluon_parent</td><td valign="top">:</td><td><div>/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_jython</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_pypy</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">local_hosts</td><td valign="top">:</td><td><div><table><tr><td><div>cotita</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>localhost</div></td></tr><tr><td><div>127.0.1.1</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_crontype</td><td valign="top">:</td><td><div>soft</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_version</td><td valign="top">:</td><td><div>2.5.1-stable+timestamp.2013.06.06.15.39.19</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_https</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_local</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_restful</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">now</td><td valign="top">:</td><td><div>datetime.datetime(2013, 7, 10, 14, 33, 41, 200883)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">post_vars</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">url</td><td valign="top">:</td><td><div>/annotate_media/144291f6-f3bc-4e6e-813b-259ee1b919db</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">utcnow</td><td valign="top">:</td><td><div>datetime.datetime(2013, 7, 10, 12, 33, 41, 200898)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">uuid</td><td valign="top">:</td><td><div>AnnotatIt/127.0.0.1.2013-07-10.14-33-41.c92b7d43-dc48-45cf-80a1-38b38a0b65c4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">vars</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">environ</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">HTTP_ACCEPT</td><td valign="top">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_ACCEPT_ENCODING</td><td valign="top">:</td><td><div>gzip,deflate,sdch</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_ACCEPT_LANGUAGE</td><td valign="top">:</td><td><div>en-US,en;q=0.8,fr;q=0.6,es;q=0.4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_CACHE_CONTROL</td><td valign="top">:</td><td><div>no-cache</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_CONNECTION</td><td valign="top">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_COOKIE</td><td valign="top">:</td><td><div>session_id_admin=127.0.0.1-a967b7ed-7da0-44b4-8527-70ff9dd5cd38; session_id_annotatit=127.0.0.1-c4ab2f28-1350-4609-a630-6f2377d4e2b6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_HOST</td><td valign="top">:</td><td><div>localhost:5000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_PRAGMA</td><td valign="top">:</td><td><div>no-cache</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_REFERER</td><td valign="top">:</td><td><div>http://localhost:5000/my_media</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_USER_AGENT</td><td valign="top">:</td><td><div>Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.63 Safari/537.36</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">PATH_INFO</td><td valign="top">:</td><td><div>/annotate_media/144291f6-f3bc-4e6e-813b-259ee1b919db</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">QUERY_STRING</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">RAW_URI</td><td valign="top">:</td><td><div>/annotate_media/144291f6-f3bc-4e6e-813b-259ee1b919db</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REMOTE_ADDR</td><td valign="top">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REMOTE_PORT</td><td valign="top">:</td><td><div>36057</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REQUEST_METHOD</td><td valign="top">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REQUEST_URI</td><td valign="top">:</td><td><div>/AnnotatIt/default/annotate_media/144291f6-f3bc-4e6e-813b-259ee1b919db</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SCRIPT_NAME</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_NAME</td><td valign="top">:</td><td><div>localhost</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_PORT</td><td valign="top">:</td><td><div>5000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_PROTOCOL</td><td valign="top">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_SOFTWARE</td><td valign="top">:</td><td><div>gunicorn/0.17.2</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">WEB2PY_ORIGINAL_URI</td><td valign="top">:</td><td><div>/annotate_media/144291f6-f3bc-4e6e-813b-259ee1b919db</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">gunicorn.socket</td><td valign="top">:</td><td><div>&lt;socket._socketobject object at 0x33ecf30&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.errors</td><td valign="top">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x7fe865cc8270&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.file_wrapper</td><td valign="top">:</td><td><div>&lt;class gunicorn.http.wsgi.FileWrapper at 0x2f97808&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.input</td><td valign="top">:</td><td><div>&lt;cStringIO.StringO object at 0x333d180&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.multiprocess</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.multithread</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.run_once</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.url_scheme</td><td valign="top">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.version</td><td valign="top">:</td><td><div>1</div></td></tr></table></div></td></tr></table></div></td></tr></table></div>'
tRp56
sS'frames'
p57
(lp58
(dp59
S'file'
p60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/main.py'
p61
sS'dump'
p62
(dp63
S'global serve_controller'
p64
S'<function serve_controller>'
p65
sS'session'
p66
S"<Storage {'_formkey[login]': 'ecd09897-5d20-4fac...a@gmail.com'}>, 'user_groups': {1L: 'user_1'}}>}>"
p67
sS'request'
p68
S"<Storage {'function': 'annotate_media', 'body': ...ications/AnnotatIt/', 'post_vars': <Storage {}>}>"
p69
sS'response'
p70
S"<Storage {'body': <cStringIO.StringO object at 0...369ab90>, 'view': 'default/annotate_media.html'}>"
p71
ssS'lnum'
p72
I573
sS'lines'
p73
(dp74
I576
S''
sI577
S'                if static_file:'
p75
sI568
S'                if global_settings.debugging and app != "admin":'
p76
sI569
S'                    import gluon.debug'
p77
sI570
S'                    # activate the debugger'
p78
sI571
S'                    gluon.debug.dbg.do_debug(mainpyfile=request.folder)'
p79
sI572
S''
sI573
S'                serve_controller(request, response, session)'
p80
sI574
S''
sI575
S'            except HTTP, http_response:'
p81
ssS'call'
p82
S"(environ={'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'HTTP_ACCEPT_ENCODING': 'gzip,deflate,sdch', 'HTTP_ACCEPT_LANGUAGE': 'en-US,en;q=0.8,fr;q=0.6,es;q=0.4', 'HTTP_CACHE_CONTROL': 'no-cache', 'HTTP_CONNECTION': 'keep-alive', 'HTTP_COOKIE': 'session_id_admin=127.0.0.1-a967b7ed-7da0-44b4-85...it=127.0.0.1-c4ab2f28-1350-4609-a630-6f2377d4e2b6', 'HTTP_HOST': 'localhost:5000', 'HTTP_PRAGMA': 'no-cache', 'HTTP_REFERER': 'http://localhost:5000/my_media', 'HTTP_USER_AGENT': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537....ML, like Gecko) Chrome/28.0.1500.63 Safari/537.36', ...}, responder=<bound method Response.start_response of <gunicorn.http.wsgi.Response object>>)"
p83
sS'func'
p84
S'wsgibase'
p85
sa(dp86
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/main.py'
p87
sg62
(dp88
S'response._view_environment'
p89
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'APP_DOMAIN_NAME': 'AnnotatIt.com', 'APP_DOMAIN_NAME_2': 'Annotat.It', 'APP_NAME': 'AnnotatIt', 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, ...}"
p90
sS'response'
p91
S"<Storage {'body': <cStringIO.StringO object at 0...369ab90>, 'view': 'default/annotate_media.html'}>"
p92
sS'global run_view_in'
p93
S'<function run_view_in>'
p94
ssg72
I234
sg73
(dp95
I229
S'    response._view_environment = copy.copy(environment)'
p96
sI230
S'    page = run_controller_in(request.controller, request.function, environment)'
p97
sI231
S'    if isinstance(page, dict):'
p98
sI232
S'        response._vars = page'
p99
sI233
S'        response._view_environment.update(page)'
p100
sI234
S'        run_view_in(response._view_environment)'
p101
sI235
S'        page = response.body.getvalue()'
p102
sI236
S'    # logic to garbage collect after exec, not always, once every 100 requests'
p103
sI237
S'    global requests'
p104
sI238
S"    requests = ('requests' in globals()) and (requests + 1) % 100 or 0"
p105
ssg82
S"(request=<Storage {'function': 'annotate_media', 'body': ...ications/AnnotatIt/', 'post_vars': <Storage {}>}>, response=<Storage {'body': <cStringIO.StringO object at 0...369ab90>, 'view': 'default/annotate_media.html'}>, session=<Storage {'_formkey[login]': 'ecd09897-5d20-4fac...a@gmail.com'}>, 'user_groups': {1L: 'user_1'}}>}>)"
p106
sg84
S'serve_controller'
p107
sa(dp108
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/compileapp.py'
p109
sg62
(dp110
S'environment'
p111
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'APP_DOMAIN_NAME': 'AnnotatIt.com', 'APP_DOMAIN_NAME_2': 'Annotat.It', 'APP_NAME': 'AnnotatIt', 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, ...}"
p112
sS'context'
p113
S'undefined'
p114
ssg72
I672
sg73
(dp115
I672
S'                                   context=environment)'
p116
sI673
S'        restricted(ccode, environment, layer)'
p117
sI674
S''
sI675
S''
sI676
S'def remove_compiled_application(folder):'
p118
sI667
S"                                            pjoin(folder, 'views'),"
p119
sI668
S'                                            context=environment), layer))'
p120
sI669
S'        else:'
p121
sI670
S'            ccode = parse_template(view,'
p122
sI671
S"                                   pjoin(folder, 'views'),"
p123
ssg82
S"(environment={'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'APP_DOMAIN_NAME': 'AnnotatIt.com', 'APP_DOMAIN_NAME_2': 'Annotat.It', 'APP_NAME': 'AnnotatIt', 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, ...})"
p124
sg84
S'run_view_in'
p125
sa(dp126
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p127
sg62
(dp128
S'builtinstr'
p129
S"<type 'str'>"
p130
sS'global TemplateParser'
p131
S"<class 'gluon.template.TemplateParser'>"
p132
sS'delimiters'
p133
S"('{{', '}}')"
p134
sS'context'
p135
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'APP_DOMAIN_NAME': 'AnnotatIt.com', 'APP_DOMAIN_NAME_2': 'Annotat.It', 'APP_NAME': 'AnnotatIt', 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, ...}"
p136
sS'text'
p137
S'\'{{extend \\\'annotate_layout.html\\\'}}\\n\\n{{block viewe...Ready", graph_init);\\n    } ; \\n</script>\\n{{end}}\\n\\n\''
p138
sS'path'
p139
S"'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views'"
p140
sS'lexers'
p141
g43
ssg72
I785
sg73
(dp142
I780
S"            raise RestrictedError(filename, '', 'Unable to find the file')"
p143
sI781
S'    else:'
p144
sI782
S'        text = filename.read()'
p145
sI783
S''
sI784
S'    # Use the file contents to get a parsed template and return it.'
p146
sI785
S'    return str(TemplateParser(text, context=context, path=path, lexers=lexers, delimiters=delimiters))'
p147
sI786
S''
sI787
S''
sI788
S'def get_parsed(text):'
p148
sI789
S'    """'
p149
ssg82
S"(filename='default/annotate_media.html', path='/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views', context={'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'APP_DOMAIN_NAME': 'AnnotatIt.com', 'APP_DOMAIN_NAME_2': 'Annotat.It', 'APP_NAME': 'AnnotatIt', 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, ...}, lexers={}, delimiters=('{{', '}}'))"
p150
sg84
S'parse_template'
p151
sa(dp152
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p153
sg62
(dp154
S'text'
p155
S'\'{{extend \\\'annotate_layout.html\\\'}}\\n\\n{{block viewe...Ready", graph_init);\\n    } ; \\n</script>\\n{{end}}\\n\\n\''
p156
sS'self'
p157
S'<gluon.template.TemplateParser object>'
p158
sS'self.parse'
p159
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p160
ssg72
I316
sg73
(dp161
I320
S'        Return the parsed template with correct indentation.'
p162
sI311
S'        # This variable will hold a reference to every block'
p163
sI312
S'        # that we come across in this template'
p164
sI313
S'        self.blocks = {}'
p165
sI314
S''
sI315
S'        # Begin parsing.'
p166
sI316
S'        self.parse(text)'
p167
sI317
S''
sI318
S'    def to_string(self):'
p168
sI319
S'        """'
p169
ssg82
S'(self=<gluon.template.TemplateParser object>, text=\'{{extend \\\'annotate_layout.html\\\'}}\\n\\n{{block viewe...Ready", graph_init);\\n    } ; \\n</script>\\n{{end}}\\n\\n\', name=\'ParserContainer\', context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p170
sg84
g48
sa(dp171
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p172
sg62
(dp173
S'self'
p174
S'<gluon.template.TemplateParser object>'
p175
sS'extend'
p176
S'"\'annotate_layout.html\'"'
p177
sS'self.extend'
p178
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p179
ssg72
I756
sg73
(dp180
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p181
sI752
S'            self.child_super_nodes.remove(node)'
p182
sI753
S''
sI754
S'        # If we need to extend a template.'
p183
sI755
S'        if extend:'
p184
sI756
S'            self.extend(extend)'
p185
sI757
S''
sI758
S'# We need this for integration with gluon'
p186
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text=\'{{extend \\\'annotate_layout.html\\\'}}\\n\\n{{block viewe...Ready", graph_init);\\n    } ; \\n</script>\\n{{end}}\\n\\n\')'
p187
sg84
S'parse'
p188
sa(dp189
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p190
sg62
(dp191
S'super_nodes'
p192
S'[]'
p193
sS'_super_nodes'
p194
g114
ssg72
I486
sg73
(dp195
I481
S'                           name=filename,'
p196
sI482
S'                           context=self.context,'
p197
sI483
S'                           path=self.path,'
p198
sI484
S'                           writer=self.writer,'
p199
sI485
S'                           delimiters=self.delimiters,'
p200
sI486
S'                           _super_nodes=super_nodes)'
p201
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p202
sI489
S'        # template.'
p203
sI490
S'        buf = BlockNode('
p204
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p205
sg84
S'extend'
p206
sa(dp207
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p208
sg62
(dp209
S'text'
p210
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p211
sS'self'
p212
S'<gluon.template.TemplateParser object>'
p213
sS'self.parse'
p214
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p215
ssg72
I316
sg73
(dp216
I320
S'        Return the parsed template with correct indentation.'
p217
sI311
S'        # This variable will hold a reference to every block'
p218
sI312
S'        # that we come across in this template'
p219
sI313
S'        self.blocks = {}'
p220
sI314
S''
sI315
S'        # Begin parsing.'
p221
sI316
S'        self.parse(text)'
p222
sI317
S''
sI318
S'    def to_string(self):'
p223
sI319
S'        """'
p224
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p225
sg84
g48
sa(dp226
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p227
sg62
(dp228
S'self'
p229
S'<gluon.template.TemplateParser object>'
p230
sS'extend'
p231
S'"\'annotate_layout.html\'"'
p232
sS'self.extend'
p233
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p234
ssg72
I756
sg73
(dp235
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p236
sI752
S'            self.child_super_nodes.remove(node)'
p237
sI753
S''
sI754
S'        # If we need to extend a template.'
p238
sI755
S'        if extend:'
p239
sI756
S'            self.extend(extend)'
p240
sI757
S''
sI758
S'# We need this for integration with gluon'
p241
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p242
sg84
g188
sa(dp243
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p244
sg62
(dp245
S'super_nodes'
p246
S'[]'
p247
sS'_super_nodes'
p248
g114
ssg72
I486
sg73
(dp249
I481
S'                           name=filename,'
p250
sI482
S'                           context=self.context,'
p251
sI483
S'                           path=self.path,'
p252
sI484
S'                           writer=self.writer,'
p253
sI485
S'                           delimiters=self.delimiters,'
p254
sI486
S'                           _super_nodes=super_nodes)'
p255
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p256
sI489
S'        # template.'
p257
sI490
S'        buf = BlockNode('
p258
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p259
sg84
g206
sa(dp260
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p261
sg62
(dp262
S'text'
p263
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p264
sS'self'
p265
S'<gluon.template.TemplateParser object>'
p266
sS'self.parse'
p267
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p268
ssg72
I316
sg73
(dp269
I320
S'        Return the parsed template with correct indentation.'
p270
sI311
S'        # This variable will hold a reference to every block'
p271
sI312
S'        # that we come across in this template'
p272
sI313
S'        self.blocks = {}'
p273
sI314
S''
sI315
S'        # Begin parsing.'
p274
sI316
S'        self.parse(text)'
p275
sI317
S''
sI318
S'    def to_string(self):'
p276
sI319
S'        """'
p277
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p278
sg84
g48
sa(dp279
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p280
sg62
(dp281
S'self'
p282
S'<gluon.template.TemplateParser object>'
p283
sS'extend'
p284
S'"\'annotate_layout.html\'"'
p285
sS'self.extend'
p286
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p287
ssg72
I756
sg73
(dp288
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p289
sI752
S'            self.child_super_nodes.remove(node)'
p290
sI753
S''
sI754
S'        # If we need to extend a template.'
p291
sI755
S'        if extend:'
p292
sI756
S'            self.extend(extend)'
p293
sI757
S''
sI758
S'# We need this for integration with gluon'
p294
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p295
sg84
g188
sa(dp296
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p297
sg62
(dp298
S'super_nodes'
p299
S'[]'
p300
sS'_super_nodes'
p301
g114
ssg72
I486
sg73
(dp302
I481
S'                           name=filename,'
p303
sI482
S'                           context=self.context,'
p304
sI483
S'                           path=self.path,'
p305
sI484
S'                           writer=self.writer,'
p306
sI485
S'                           delimiters=self.delimiters,'
p307
sI486
S'                           _super_nodes=super_nodes)'
p308
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p309
sI489
S'        # template.'
p310
sI490
S'        buf = BlockNode('
p311
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p312
sg84
g206
sa(dp313
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p314
sg62
(dp315
S'text'
p316
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p317
sS'self'
p318
S'<gluon.template.TemplateParser object>'
p319
sS'self.parse'
p320
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p321
ssg72
I316
sg73
(dp322
I320
S'        Return the parsed template with correct indentation.'
p323
sI311
S'        # This variable will hold a reference to every block'
p324
sI312
S'        # that we come across in this template'
p325
sI313
S'        self.blocks = {}'
p326
sI314
S''
sI315
S'        # Begin parsing.'
p327
sI316
S'        self.parse(text)'
p328
sI317
S''
sI318
S'    def to_string(self):'
p329
sI319
S'        """'
p330
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p331
sg84
g48
sa(dp332
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p333
sg62
(dp334
S'self'
p335
S'<gluon.template.TemplateParser object>'
p336
sS'extend'
p337
S'"\'annotate_layout.html\'"'
p338
sS'self.extend'
p339
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p340
ssg72
I756
sg73
(dp341
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p342
sI752
S'            self.child_super_nodes.remove(node)'
p343
sI753
S''
sI754
S'        # If we need to extend a template.'
p344
sI755
S'        if extend:'
p345
sI756
S'            self.extend(extend)'
p346
sI757
S''
sI758
S'# We need this for integration with gluon'
p347
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p348
sg84
g188
sa(dp349
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p350
sg62
(dp351
S'super_nodes'
p352
S'[]'
p353
sS'_super_nodes'
p354
g114
ssg72
I486
sg73
(dp355
I481
S'                           name=filename,'
p356
sI482
S'                           context=self.context,'
p357
sI483
S'                           path=self.path,'
p358
sI484
S'                           writer=self.writer,'
p359
sI485
S'                           delimiters=self.delimiters,'
p360
sI486
S'                           _super_nodes=super_nodes)'
p361
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p362
sI489
S'        # template.'
p363
sI490
S'        buf = BlockNode('
p364
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p365
sg84
g206
sa(dp366
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p367
sg62
(dp368
S'text'
p369
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p370
sS'self'
p371
S'<gluon.template.TemplateParser object>'
p372
sS'self.parse'
p373
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p374
ssg72
I316
sg73
(dp375
I320
S'        Return the parsed template with correct indentation.'
p376
sI311
S'        # This variable will hold a reference to every block'
p377
sI312
S'        # that we come across in this template'
p378
sI313
S'        self.blocks = {}'
p379
sI314
S''
sI315
S'        # Begin parsing.'
p380
sI316
S'        self.parse(text)'
p381
sI317
S''
sI318
S'    def to_string(self):'
p382
sI319
S'        """'
p383
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p384
sg84
g48
sa(dp385
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p386
sg62
(dp387
S'self'
p388
S'<gluon.template.TemplateParser object>'
p389
sS'extend'
p390
S'"\'annotate_layout.html\'"'
p391
sS'self.extend'
p392
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p393
ssg72
I756
sg73
(dp394
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p395
sI752
S'            self.child_super_nodes.remove(node)'
p396
sI753
S''
sI754
S'        # If we need to extend a template.'
p397
sI755
S'        if extend:'
p398
sI756
S'            self.extend(extend)'
p399
sI757
S''
sI758
S'# We need this for integration with gluon'
p400
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p401
sg84
g188
sa(dp402
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p403
sg62
(dp404
S'super_nodes'
p405
S'[]'
p406
sS'_super_nodes'
p407
g114
ssg72
I486
sg73
(dp408
I481
S'                           name=filename,'
p409
sI482
S'                           context=self.context,'
p410
sI483
S'                           path=self.path,'
p411
sI484
S'                           writer=self.writer,'
p412
sI485
S'                           delimiters=self.delimiters,'
p413
sI486
S'                           _super_nodes=super_nodes)'
p414
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p415
sI489
S'        # template.'
p416
sI490
S'        buf = BlockNode('
p417
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p418
sg84
g206
sa(dp419
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p420
sg62
(dp421
S'text'
p422
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p423
sS'self'
p424
S'<gluon.template.TemplateParser object>'
p425
sS'self.parse'
p426
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p427
ssg72
I316
sg73
(dp428
I320
S'        Return the parsed template with correct indentation.'
p429
sI311
S'        # This variable will hold a reference to every block'
p430
sI312
S'        # that we come across in this template'
p431
sI313
S'        self.blocks = {}'
p432
sI314
S''
sI315
S'        # Begin parsing.'
p433
sI316
S'        self.parse(text)'
p434
sI317
S''
sI318
S'    def to_string(self):'
p435
sI319
S'        """'
p436
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p437
sg84
g48
sa(dp438
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p439
sg62
(dp440
S'self'
p441
S'<gluon.template.TemplateParser object>'
p442
sS'extend'
p443
S'"\'annotate_layout.html\'"'
p444
sS'self.extend'
p445
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p446
ssg72
I756
sg73
(dp447
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p448
sI752
S'            self.child_super_nodes.remove(node)'
p449
sI753
S''
sI754
S'        # If we need to extend a template.'
p450
sI755
S'        if extend:'
p451
sI756
S'            self.extend(extend)'
p452
sI757
S''
sI758
S'# We need this for integration with gluon'
p453
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p454
sg84
g188
sa(dp455
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p456
sg62
(dp457
S'super_nodes'
p458
S'[]'
p459
sS'_super_nodes'
p460
g114
ssg72
I486
sg73
(dp461
I481
S'                           name=filename,'
p462
sI482
S'                           context=self.context,'
p463
sI483
S'                           path=self.path,'
p464
sI484
S'                           writer=self.writer,'
p465
sI485
S'                           delimiters=self.delimiters,'
p466
sI486
S'                           _super_nodes=super_nodes)'
p467
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p468
sI489
S'        # template.'
p469
sI490
S'        buf = BlockNode('
p470
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p471
sg84
g206
sa(dp472
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p473
sg62
(dp474
S'text'
p475
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p476
sS'self'
p477
S'<gluon.template.TemplateParser object>'
p478
sS'self.parse'
p479
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p480
ssg72
I316
sg73
(dp481
I320
S'        Return the parsed template with correct indentation.'
p482
sI311
S'        # This variable will hold a reference to every block'
p483
sI312
S'        # that we come across in this template'
p484
sI313
S'        self.blocks = {}'
p485
sI314
S''
sI315
S'        # Begin parsing.'
p486
sI316
S'        self.parse(text)'
p487
sI317
S''
sI318
S'    def to_string(self):'
p488
sI319
S'        """'
p489
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p490
sg84
g48
sa(dp491
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p492
sg62
(dp493
S'self'
p494
S'<gluon.template.TemplateParser object>'
p495
sS'extend'
p496
S'"\'annotate_layout.html\'"'
p497
sS'self.extend'
p498
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p499
ssg72
I756
sg73
(dp500
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p501
sI752
S'            self.child_super_nodes.remove(node)'
p502
sI753
S''
sI754
S'        # If we need to extend a template.'
p503
sI755
S'        if extend:'
p504
sI756
S'            self.extend(extend)'
p505
sI757
S''
sI758
S'# We need this for integration with gluon'
p506
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p507
sg84
g188
sa(dp508
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p509
sg62
(dp510
S'super_nodes'
p511
S'[]'
p512
sS'_super_nodes'
p513
g114
ssg72
I486
sg73
(dp514
I481
S'                           name=filename,'
p515
sI482
S'                           context=self.context,'
p516
sI483
S'                           path=self.path,'
p517
sI484
S'                           writer=self.writer,'
p518
sI485
S'                           delimiters=self.delimiters,'
p519
sI486
S'                           _super_nodes=super_nodes)'
p520
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p521
sI489
S'        # template.'
p522
sI490
S'        buf = BlockNode('
p523
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p524
sg84
g206
sa(dp525
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p526
sg62
(dp527
S'text'
p528
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p529
sS'self'
p530
S'<gluon.template.TemplateParser object>'
p531
sS'self.parse'
p532
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p533
ssg72
I316
sg73
(dp534
I320
S'        Return the parsed template with correct indentation.'
p535
sI311
S'        # This variable will hold a reference to every block'
p536
sI312
S'        # that we come across in this template'
p537
sI313
S'        self.blocks = {}'
p538
sI314
S''
sI315
S'        # Begin parsing.'
p539
sI316
S'        self.parse(text)'
p540
sI317
S''
sI318
S'    def to_string(self):'
p541
sI319
S'        """'
p542
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p543
sg84
g48
sa(dp544
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p545
sg62
(dp546
S'self'
p547
S'<gluon.template.TemplateParser object>'
p548
sS'extend'
p549
S'"\'annotate_layout.html\'"'
p550
sS'self.extend'
p551
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p552
ssg72
I756
sg73
(dp553
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p554
sI752
S'            self.child_super_nodes.remove(node)'
p555
sI753
S''
sI754
S'        # If we need to extend a template.'
p556
sI755
S'        if extend:'
p557
sI756
S'            self.extend(extend)'
p558
sI757
S''
sI758
S'# We need this for integration with gluon'
p559
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p560
sg84
g188
sa(dp561
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p562
sg62
(dp563
S'super_nodes'
p564
S'[]'
p565
sS'_super_nodes'
p566
g114
ssg72
I486
sg73
(dp567
I481
S'                           name=filename,'
p568
sI482
S'                           context=self.context,'
p569
sI483
S'                           path=self.path,'
p570
sI484
S'                           writer=self.writer,'
p571
sI485
S'                           delimiters=self.delimiters,'
p572
sI486
S'                           _super_nodes=super_nodes)'
p573
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p574
sI489
S'        # template.'
p575
sI490
S'        buf = BlockNode('
p576
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p577
sg84
g206
sa(dp578
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p579
sg62
(dp580
S'text'
p581
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p582
sS'self'
p583
S'<gluon.template.TemplateParser object>'
p584
sS'self.parse'
p585
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p586
ssg72
I316
sg73
(dp587
I320
S'        Return the parsed template with correct indentation.'
p588
sI311
S'        # This variable will hold a reference to every block'
p589
sI312
S'        # that we come across in this template'
p590
sI313
S'        self.blocks = {}'
p591
sI314
S''
sI315
S'        # Begin parsing.'
p592
sI316
S'        self.parse(text)'
p593
sI317
S''
sI318
S'    def to_string(self):'
p594
sI319
S'        """'
p595
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p596
sg84
g48
sa(dp597
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p598
sg62
(dp599
S'self'
p600
S'<gluon.template.TemplateParser object>'
p601
sS'extend'
p602
S'"\'annotate_layout.html\'"'
p603
sS'self.extend'
p604
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p605
ssg72
I756
sg73
(dp606
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p607
sI752
S'            self.child_super_nodes.remove(node)'
p608
sI753
S''
sI754
S'        # If we need to extend a template.'
p609
sI755
S'        if extend:'
p610
sI756
S'            self.extend(extend)'
p611
sI757
S''
sI758
S'# We need this for integration with gluon'
p612
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p613
sg84
g188
sa(dp614
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p615
sg62
(dp616
S'super_nodes'
p617
S'[]'
p618
sS'_super_nodes'
p619
g114
ssg72
I486
sg73
(dp620
I481
S'                           name=filename,'
p621
sI482
S'                           context=self.context,'
p622
sI483
S'                           path=self.path,'
p623
sI484
S'                           writer=self.writer,'
p624
sI485
S'                           delimiters=self.delimiters,'
p625
sI486
S'                           _super_nodes=super_nodes)'
p626
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p627
sI489
S'        # template.'
p628
sI490
S'        buf = BlockNode('
p629
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p630
sg84
g206
sa(dp631
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p632
sg62
(dp633
S'text'
p634
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p635
sS'self'
p636
S'<gluon.template.TemplateParser object>'
p637
sS'self.parse'
p638
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p639
ssg72
I316
sg73
(dp640
I320
S'        Return the parsed template with correct indentation.'
p641
sI311
S'        # This variable will hold a reference to every block'
p642
sI312
S'        # that we come across in this template'
p643
sI313
S'        self.blocks = {}'
p644
sI314
S''
sI315
S'        # Begin parsing.'
p645
sI316
S'        self.parse(text)'
p646
sI317
S''
sI318
S'    def to_string(self):'
p647
sI319
S'        """'
p648
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p649
sg84
g48
sa(dp650
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p651
sg62
(dp652
S'self'
p653
S'<gluon.template.TemplateParser object>'
p654
sS'extend'
p655
S'"\'annotate_layout.html\'"'
p656
sS'self.extend'
p657
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p658
ssg72
I756
sg73
(dp659
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p660
sI752
S'            self.child_super_nodes.remove(node)'
p661
sI753
S''
sI754
S'        # If we need to extend a template.'
p662
sI755
S'        if extend:'
p663
sI756
S'            self.extend(extend)'
p664
sI757
S''
sI758
S'# We need this for integration with gluon'
p665
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p666
sg84
g188
sa(dp667
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p668
sg62
(dp669
S'super_nodes'
p670
S'[]'
p671
sS'_super_nodes'
p672
g114
ssg72
I486
sg73
(dp673
I481
S'                           name=filename,'
p674
sI482
S'                           context=self.context,'
p675
sI483
S'                           path=self.path,'
p676
sI484
S'                           writer=self.writer,'
p677
sI485
S'                           delimiters=self.delimiters,'
p678
sI486
S'                           _super_nodes=super_nodes)'
p679
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p680
sI489
S'        # template.'
p681
sI490
S'        buf = BlockNode('
p682
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p683
sg84
g206
sa(dp684
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p685
sg62
(dp686
S'text'
p687
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p688
sS'self'
p689
S'<gluon.template.TemplateParser object>'
p690
sS'self.parse'
p691
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p692
ssg72
I316
sg73
(dp693
I320
S'        Return the parsed template with correct indentation.'
p694
sI311
S'        # This variable will hold a reference to every block'
p695
sI312
S'        # that we come across in this template'
p696
sI313
S'        self.blocks = {}'
p697
sI314
S''
sI315
S'        # Begin parsing.'
p698
sI316
S'        self.parse(text)'
p699
sI317
S''
sI318
S'    def to_string(self):'
p700
sI319
S'        """'
p701
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p702
sg84
g48
sa(dp703
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p704
sg62
(dp705
S'self'
p706
S'<gluon.template.TemplateParser object>'
p707
sS'extend'
p708
S'"\'annotate_layout.html\'"'
p709
sS'self.extend'
p710
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p711
ssg72
I756
sg73
(dp712
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p713
sI752
S'            self.child_super_nodes.remove(node)'
p714
sI753
S''
sI754
S'        # If we need to extend a template.'
p715
sI755
S'        if extend:'
p716
sI756
S'            self.extend(extend)'
p717
sI757
S''
sI758
S'# We need this for integration with gluon'
p718
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p719
sg84
g188
sa(dp720
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p721
sg62
(dp722
S'super_nodes'
p723
S'[]'
p724
sS'_super_nodes'
p725
g114
ssg72
I486
sg73
(dp726
I481
S'                           name=filename,'
p727
sI482
S'                           context=self.context,'
p728
sI483
S'                           path=self.path,'
p729
sI484
S'                           writer=self.writer,'
p730
sI485
S'                           delimiters=self.delimiters,'
p731
sI486
S'                           _super_nodes=super_nodes)'
p732
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p733
sI489
S'        # template.'
p734
sI490
S'        buf = BlockNode('
p735
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p736
sg84
g206
sa(dp737
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p738
sg62
(dp739
S'text'
p740
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p741
sS'self'
p742
S'<gluon.template.TemplateParser object>'
p743
sS'self.parse'
p744
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p745
ssg72
I316
sg73
(dp746
I320
S'        Return the parsed template with correct indentation.'
p747
sI311
S'        # This variable will hold a reference to every block'
p748
sI312
S'        # that we come across in this template'
p749
sI313
S'        self.blocks = {}'
p750
sI314
S''
sI315
S'        # Begin parsing.'
p751
sI316
S'        self.parse(text)'
p752
sI317
S''
sI318
S'    def to_string(self):'
p753
sI319
S'        """'
p754
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p755
sg84
g48
sa(dp756
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p757
sg62
(dp758
S'self'
p759
S'<gluon.template.TemplateParser object>'
p760
sS'extend'
p761
S'"\'annotate_layout.html\'"'
p762
sS'self.extend'
p763
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p764
ssg72
I756
sg73
(dp765
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p766
sI752
S'            self.child_super_nodes.remove(node)'
p767
sI753
S''
sI754
S'        # If we need to extend a template.'
p768
sI755
S'        if extend:'
p769
sI756
S'            self.extend(extend)'
p770
sI757
S''
sI758
S'# We need this for integration with gluon'
p771
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p772
sg84
g188
sa(dp773
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p774
sg62
(dp775
S'super_nodes'
p776
S'[]'
p777
sS'_super_nodes'
p778
g114
ssg72
I486
sg73
(dp779
I481
S'                           name=filename,'
p780
sI482
S'                           context=self.context,'
p781
sI483
S'                           path=self.path,'
p782
sI484
S'                           writer=self.writer,'
p783
sI485
S'                           delimiters=self.delimiters,'
p784
sI486
S'                           _super_nodes=super_nodes)'
p785
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p786
sI489
S'        # template.'
p787
sI490
S'        buf = BlockNode('
p788
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p789
sg84
g206
sa(dp790
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p791
sg62
(dp792
S'text'
p793
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p794
sS'self'
p795
S'<gluon.template.TemplateParser object>'
p796
sS'self.parse'
p797
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p798
ssg72
I316
sg73
(dp799
I320
S'        Return the parsed template with correct indentation.'
p800
sI311
S'        # This variable will hold a reference to every block'
p801
sI312
S'        # that we come across in this template'
p802
sI313
S'        self.blocks = {}'
p803
sI314
S''
sI315
S'        # Begin parsing.'
p804
sI316
S'        self.parse(text)'
p805
sI317
S''
sI318
S'    def to_string(self):'
p806
sI319
S'        """'
p807
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p808
sg84
g48
sa(dp809
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p810
sg62
(dp811
S'self'
p812
S'<gluon.template.TemplateParser object>'
p813
sS'extend'
p814
S'"\'annotate_layout.html\'"'
p815
sS'self.extend'
p816
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p817
ssg72
I756
sg73
(dp818
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p819
sI752
S'            self.child_super_nodes.remove(node)'
p820
sI753
S''
sI754
S'        # If we need to extend a template.'
p821
sI755
S'        if extend:'
p822
sI756
S'            self.extend(extend)'
p823
sI757
S''
sI758
S'# We need this for integration with gluon'
p824
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p825
sg84
g188
sa(dp826
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p827
sg62
(dp828
S'super_nodes'
p829
S'[]'
p830
sS'_super_nodes'
p831
g114
ssg72
I486
sg73
(dp832
I481
S'                           name=filename,'
p833
sI482
S'                           context=self.context,'
p834
sI483
S'                           path=self.path,'
p835
sI484
S'                           writer=self.writer,'
p836
sI485
S'                           delimiters=self.delimiters,'
p837
sI486
S'                           _super_nodes=super_nodes)'
p838
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p839
sI489
S'        # template.'
p840
sI490
S'        buf = BlockNode('
p841
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p842
sg84
g206
sa(dp843
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p844
sg62
(dp845
S'text'
p846
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p847
sS'self'
p848
S'<gluon.template.TemplateParser object>'
p849
sS'self.parse'
p850
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p851
ssg72
I316
sg73
(dp852
I320
S'        Return the parsed template with correct indentation.'
p853
sI311
S'        # This variable will hold a reference to every block'
p854
sI312
S'        # that we come across in this template'
p855
sI313
S'        self.blocks = {}'
p856
sI314
S''
sI315
S'        # Begin parsing.'
p857
sI316
S'        self.parse(text)'
p858
sI317
S''
sI318
S'    def to_string(self):'
p859
sI319
S'        """'
p860
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p861
sg84
g48
sa(dp862
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p863
sg62
(dp864
S'self'
p865
S'<gluon.template.TemplateParser object>'
p866
sS'extend'
p867
S'"\'annotate_layout.html\'"'
p868
sS'self.extend'
p869
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p870
ssg72
I756
sg73
(dp871
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p872
sI752
S'            self.child_super_nodes.remove(node)'
p873
sI753
S''
sI754
S'        # If we need to extend a template.'
p874
sI755
S'        if extend:'
p875
sI756
S'            self.extend(extend)'
p876
sI757
S''
sI758
S'# We need this for integration with gluon'
p877
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p878
sg84
g188
sa(dp879
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p880
sg62
(dp881
S'super_nodes'
p882
S'[]'
p883
sS'_super_nodes'
p884
g114
ssg72
I486
sg73
(dp885
I481
S'                           name=filename,'
p886
sI482
S'                           context=self.context,'
p887
sI483
S'                           path=self.path,'
p888
sI484
S'                           writer=self.writer,'
p889
sI485
S'                           delimiters=self.delimiters,'
p890
sI486
S'                           _super_nodes=super_nodes)'
p891
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p892
sI489
S'        # template.'
p893
sI490
S'        buf = BlockNode('
p894
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p895
sg84
g206
sa(dp896
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p897
sg62
(dp898
S'text'
p899
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p900
sS'self'
p901
S'<gluon.template.TemplateParser object>'
p902
sS'self.parse'
p903
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p904
ssg72
I316
sg73
(dp905
I320
S'        Return the parsed template with correct indentation.'
p906
sI311
S'        # This variable will hold a reference to every block'
p907
sI312
S'        # that we come across in this template'
p908
sI313
S'        self.blocks = {}'
p909
sI314
S''
sI315
S'        # Begin parsing.'
p910
sI316
S'        self.parse(text)'
p911
sI317
S''
sI318
S'    def to_string(self):'
p912
sI319
S'        """'
p913
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p914
sg84
g48
sa(dp915
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p916
sg62
(dp917
S'self'
p918
S'<gluon.template.TemplateParser object>'
p919
sS'extend'
p920
S'"\'annotate_layout.html\'"'
p921
sS'self.extend'
p922
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p923
ssg72
I756
sg73
(dp924
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p925
sI752
S'            self.child_super_nodes.remove(node)'
p926
sI753
S''
sI754
S'        # If we need to extend a template.'
p927
sI755
S'        if extend:'
p928
sI756
S'            self.extend(extend)'
p929
sI757
S''
sI758
S'# We need this for integration with gluon'
p930
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p931
sg84
g188
sa(dp932
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p933
sg62
(dp934
S'super_nodes'
p935
S'[]'
p936
sS'_super_nodes'
p937
g114
ssg72
I486
sg73
(dp938
I481
S'                           name=filename,'
p939
sI482
S'                           context=self.context,'
p940
sI483
S'                           path=self.path,'
p941
sI484
S'                           writer=self.writer,'
p942
sI485
S'                           delimiters=self.delimiters,'
p943
sI486
S'                           _super_nodes=super_nodes)'
p944
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p945
sI489
S'        # template.'
p946
sI490
S'        buf = BlockNode('
p947
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p948
sg84
g206
sa(dp949
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p950
sg62
(dp951
S'text'
p952
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p953
sS'self'
p954
S'<gluon.template.TemplateParser object>'
p955
sS'self.parse'
p956
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p957
ssg72
I316
sg73
(dp958
I320
S'        Return the parsed template with correct indentation.'
p959
sI311
S'        # This variable will hold a reference to every block'
p960
sI312
S'        # that we come across in this template'
p961
sI313
S'        self.blocks = {}'
p962
sI314
S''
sI315
S'        # Begin parsing.'
p963
sI316
S'        self.parse(text)'
p964
sI317
S''
sI318
S'    def to_string(self):'
p965
sI319
S'        """'
p966
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p967
sg84
g48
sa(dp968
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p969
sg62
(dp970
S'self'
p971
S'<gluon.template.TemplateParser object>'
p972
sS'extend'
p973
S'"\'annotate_layout.html\'"'
p974
sS'self.extend'
p975
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p976
ssg72
I756
sg73
(dp977
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p978
sI752
S'            self.child_super_nodes.remove(node)'
p979
sI753
S''
sI754
S'        # If we need to extend a template.'
p980
sI755
S'        if extend:'
p981
sI756
S'            self.extend(extend)'
p982
sI757
S''
sI758
S'# We need this for integration with gluon'
p983
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p984
sg84
g188
sa(dp985
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p986
sg62
(dp987
S'super_nodes'
p988
S'[]'
p989
sS'_super_nodes'
p990
g114
ssg72
I486
sg73
(dp991
I481
S'                           name=filename,'
p992
sI482
S'                           context=self.context,'
p993
sI483
S'                           path=self.path,'
p994
sI484
S'                           writer=self.writer,'
p995
sI485
S'                           delimiters=self.delimiters,'
p996
sI486
S'                           _super_nodes=super_nodes)'
p997
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p998
sI489
S'        # template.'
p999
sI490
S'        buf = BlockNode('
p1000
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1001
sg84
g206
sa(dp1002
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1003
sg62
(dp1004
S'text'
p1005
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1006
sS'self'
p1007
S'<gluon.template.TemplateParser object>'
p1008
sS'self.parse'
p1009
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1010
ssg72
I316
sg73
(dp1011
I320
S'        Return the parsed template with correct indentation.'
p1012
sI311
S'        # This variable will hold a reference to every block'
p1013
sI312
S'        # that we come across in this template'
p1014
sI313
S'        self.blocks = {}'
p1015
sI314
S''
sI315
S'        # Begin parsing.'
p1016
sI316
S'        self.parse(text)'
p1017
sI317
S''
sI318
S'    def to_string(self):'
p1018
sI319
S'        """'
p1019
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1020
sg84
g48
sa(dp1021
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1022
sg62
(dp1023
S'self'
p1024
S'<gluon.template.TemplateParser object>'
p1025
sS'extend'
p1026
S'"\'annotate_layout.html\'"'
p1027
sS'self.extend'
p1028
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1029
ssg72
I756
sg73
(dp1030
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1031
sI752
S'            self.child_super_nodes.remove(node)'
p1032
sI753
S''
sI754
S'        # If we need to extend a template.'
p1033
sI755
S'        if extend:'
p1034
sI756
S'            self.extend(extend)'
p1035
sI757
S''
sI758
S'# We need this for integration with gluon'
p1036
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1037
sg84
g188
sa(dp1038
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1039
sg62
(dp1040
S'super_nodes'
p1041
S'[]'
p1042
sS'_super_nodes'
p1043
g114
ssg72
I486
sg73
(dp1044
I481
S'                           name=filename,'
p1045
sI482
S'                           context=self.context,'
p1046
sI483
S'                           path=self.path,'
p1047
sI484
S'                           writer=self.writer,'
p1048
sI485
S'                           delimiters=self.delimiters,'
p1049
sI486
S'                           _super_nodes=super_nodes)'
p1050
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1051
sI489
S'        # template.'
p1052
sI490
S'        buf = BlockNode('
p1053
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1054
sg84
g206
sa(dp1055
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1056
sg62
(dp1057
S'text'
p1058
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1059
sS'self'
p1060
S'<gluon.template.TemplateParser object>'
p1061
sS'self.parse'
p1062
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1063
ssg72
I316
sg73
(dp1064
I320
S'        Return the parsed template with correct indentation.'
p1065
sI311
S'        # This variable will hold a reference to every block'
p1066
sI312
S'        # that we come across in this template'
p1067
sI313
S'        self.blocks = {}'
p1068
sI314
S''
sI315
S'        # Begin parsing.'
p1069
sI316
S'        self.parse(text)'
p1070
sI317
S''
sI318
S'    def to_string(self):'
p1071
sI319
S'        """'
p1072
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1073
sg84
g48
sa(dp1074
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1075
sg62
(dp1076
S'self'
p1077
S'<gluon.template.TemplateParser object>'
p1078
sS'extend'
p1079
S'"\'annotate_layout.html\'"'
p1080
sS'self.extend'
p1081
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1082
ssg72
I756
sg73
(dp1083
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1084
sI752
S'            self.child_super_nodes.remove(node)'
p1085
sI753
S''
sI754
S'        # If we need to extend a template.'
p1086
sI755
S'        if extend:'
p1087
sI756
S'            self.extend(extend)'
p1088
sI757
S''
sI758
S'# We need this for integration with gluon'
p1089
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1090
sg84
g188
sa(dp1091
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1092
sg62
(dp1093
S'super_nodes'
p1094
S'[]'
p1095
sS'_super_nodes'
p1096
g114
ssg72
I486
sg73
(dp1097
I481
S'                           name=filename,'
p1098
sI482
S'                           context=self.context,'
p1099
sI483
S'                           path=self.path,'
p1100
sI484
S'                           writer=self.writer,'
p1101
sI485
S'                           delimiters=self.delimiters,'
p1102
sI486
S'                           _super_nodes=super_nodes)'
p1103
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1104
sI489
S'        # template.'
p1105
sI490
S'        buf = BlockNode('
p1106
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1107
sg84
g206
sa(dp1108
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1109
sg62
(dp1110
S'text'
p1111
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1112
sS'self'
p1113
S'<gluon.template.TemplateParser object>'
p1114
sS'self.parse'
p1115
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1116
ssg72
I316
sg73
(dp1117
I320
S'        Return the parsed template with correct indentation.'
p1118
sI311
S'        # This variable will hold a reference to every block'
p1119
sI312
S'        # that we come across in this template'
p1120
sI313
S'        self.blocks = {}'
p1121
sI314
S''
sI315
S'        # Begin parsing.'
p1122
sI316
S'        self.parse(text)'
p1123
sI317
S''
sI318
S'    def to_string(self):'
p1124
sI319
S'        """'
p1125
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1126
sg84
g48
sa(dp1127
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1128
sg62
(dp1129
S'self'
p1130
S'<gluon.template.TemplateParser object>'
p1131
sS'extend'
p1132
S'"\'annotate_layout.html\'"'
p1133
sS'self.extend'
p1134
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1135
ssg72
I756
sg73
(dp1136
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1137
sI752
S'            self.child_super_nodes.remove(node)'
p1138
sI753
S''
sI754
S'        # If we need to extend a template.'
p1139
sI755
S'        if extend:'
p1140
sI756
S'            self.extend(extend)'
p1141
sI757
S''
sI758
S'# We need this for integration with gluon'
p1142
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1143
sg84
g188
sa(dp1144
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1145
sg62
(dp1146
S'super_nodes'
p1147
S'[]'
p1148
sS'_super_nodes'
p1149
g114
ssg72
I486
sg73
(dp1150
I481
S'                           name=filename,'
p1151
sI482
S'                           context=self.context,'
p1152
sI483
S'                           path=self.path,'
p1153
sI484
S'                           writer=self.writer,'
p1154
sI485
S'                           delimiters=self.delimiters,'
p1155
sI486
S'                           _super_nodes=super_nodes)'
p1156
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1157
sI489
S'        # template.'
p1158
sI490
S'        buf = BlockNode('
p1159
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1160
sg84
g206
sa(dp1161
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1162
sg62
(dp1163
S'text'
p1164
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1165
sS'self'
p1166
S'<gluon.template.TemplateParser object>'
p1167
sS'self.parse'
p1168
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1169
ssg72
I316
sg73
(dp1170
I320
S'        Return the parsed template with correct indentation.'
p1171
sI311
S'        # This variable will hold a reference to every block'
p1172
sI312
S'        # that we come across in this template'
p1173
sI313
S'        self.blocks = {}'
p1174
sI314
S''
sI315
S'        # Begin parsing.'
p1175
sI316
S'        self.parse(text)'
p1176
sI317
S''
sI318
S'    def to_string(self):'
p1177
sI319
S'        """'
p1178
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1179
sg84
g48
sa(dp1180
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1181
sg62
(dp1182
S'self'
p1183
S'<gluon.template.TemplateParser object>'
p1184
sS'extend'
p1185
S'"\'annotate_layout.html\'"'
p1186
sS'self.extend'
p1187
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1188
ssg72
I756
sg73
(dp1189
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1190
sI752
S'            self.child_super_nodes.remove(node)'
p1191
sI753
S''
sI754
S'        # If we need to extend a template.'
p1192
sI755
S'        if extend:'
p1193
sI756
S'            self.extend(extend)'
p1194
sI757
S''
sI758
S'# We need this for integration with gluon'
p1195
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1196
sg84
g188
sa(dp1197
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1198
sg62
(dp1199
S'super_nodes'
p1200
S'[]'
p1201
sS'_super_nodes'
p1202
g114
ssg72
I486
sg73
(dp1203
I481
S'                           name=filename,'
p1204
sI482
S'                           context=self.context,'
p1205
sI483
S'                           path=self.path,'
p1206
sI484
S'                           writer=self.writer,'
p1207
sI485
S'                           delimiters=self.delimiters,'
p1208
sI486
S'                           _super_nodes=super_nodes)'
p1209
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1210
sI489
S'        # template.'
p1211
sI490
S'        buf = BlockNode('
p1212
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1213
sg84
g206
sa(dp1214
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1215
sg62
(dp1216
S'text'
p1217
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1218
sS'self'
p1219
S'<gluon.template.TemplateParser object>'
p1220
sS'self.parse'
p1221
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1222
ssg72
I316
sg73
(dp1223
I320
S'        Return the parsed template with correct indentation.'
p1224
sI311
S'        # This variable will hold a reference to every block'
p1225
sI312
S'        # that we come across in this template'
p1226
sI313
S'        self.blocks = {}'
p1227
sI314
S''
sI315
S'        # Begin parsing.'
p1228
sI316
S'        self.parse(text)'
p1229
sI317
S''
sI318
S'    def to_string(self):'
p1230
sI319
S'        """'
p1231
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1232
sg84
g48
sa(dp1233
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1234
sg62
(dp1235
S'self'
p1236
S'<gluon.template.TemplateParser object>'
p1237
sS'extend'
p1238
S'"\'annotate_layout.html\'"'
p1239
sS'self.extend'
p1240
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1241
ssg72
I756
sg73
(dp1242
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1243
sI752
S'            self.child_super_nodes.remove(node)'
p1244
sI753
S''
sI754
S'        # If we need to extend a template.'
p1245
sI755
S'        if extend:'
p1246
sI756
S'            self.extend(extend)'
p1247
sI757
S''
sI758
S'# We need this for integration with gluon'
p1248
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1249
sg84
g188
sa(dp1250
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1251
sg62
(dp1252
S'super_nodes'
p1253
S'[]'
p1254
sS'_super_nodes'
p1255
g114
ssg72
I486
sg73
(dp1256
I481
S'                           name=filename,'
p1257
sI482
S'                           context=self.context,'
p1258
sI483
S'                           path=self.path,'
p1259
sI484
S'                           writer=self.writer,'
p1260
sI485
S'                           delimiters=self.delimiters,'
p1261
sI486
S'                           _super_nodes=super_nodes)'
p1262
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1263
sI489
S'        # template.'
p1264
sI490
S'        buf = BlockNode('
p1265
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1266
sg84
g206
sa(dp1267
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1268
sg62
(dp1269
S'text'
p1270
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1271
sS'self'
p1272
S'<gluon.template.TemplateParser object>'
p1273
sS'self.parse'
p1274
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1275
ssg72
I316
sg73
(dp1276
I320
S'        Return the parsed template with correct indentation.'
p1277
sI311
S'        # This variable will hold a reference to every block'
p1278
sI312
S'        # that we come across in this template'
p1279
sI313
S'        self.blocks = {}'
p1280
sI314
S''
sI315
S'        # Begin parsing.'
p1281
sI316
S'        self.parse(text)'
p1282
sI317
S''
sI318
S'    def to_string(self):'
p1283
sI319
S'        """'
p1284
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1285
sg84
g48
sa(dp1286
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1287
sg62
(dp1288
S'self'
p1289
S'<gluon.template.TemplateParser object>'
p1290
sS'extend'
p1291
S'"\'annotate_layout.html\'"'
p1292
sS'self.extend'
p1293
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1294
ssg72
I756
sg73
(dp1295
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1296
sI752
S'            self.child_super_nodes.remove(node)'
p1297
sI753
S''
sI754
S'        # If we need to extend a template.'
p1298
sI755
S'        if extend:'
p1299
sI756
S'            self.extend(extend)'
p1300
sI757
S''
sI758
S'# We need this for integration with gluon'
p1301
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1302
sg84
g188
sa(dp1303
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1304
sg62
(dp1305
S'super_nodes'
p1306
S'[]'
p1307
sS'_super_nodes'
p1308
g114
ssg72
I486
sg73
(dp1309
I481
S'                           name=filename,'
p1310
sI482
S'                           context=self.context,'
p1311
sI483
S'                           path=self.path,'
p1312
sI484
S'                           writer=self.writer,'
p1313
sI485
S'                           delimiters=self.delimiters,'
p1314
sI486
S'                           _super_nodes=super_nodes)'
p1315
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1316
sI489
S'        # template.'
p1317
sI490
S'        buf = BlockNode('
p1318
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1319
sg84
g206
sa(dp1320
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1321
sg62
(dp1322
S'text'
p1323
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1324
sS'self'
p1325
S'<gluon.template.TemplateParser object>'
p1326
sS'self.parse'
p1327
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1328
ssg72
I316
sg73
(dp1329
I320
S'        Return the parsed template with correct indentation.'
p1330
sI311
S'        # This variable will hold a reference to every block'
p1331
sI312
S'        # that we come across in this template'
p1332
sI313
S'        self.blocks = {}'
p1333
sI314
S''
sI315
S'        # Begin parsing.'
p1334
sI316
S'        self.parse(text)'
p1335
sI317
S''
sI318
S'    def to_string(self):'
p1336
sI319
S'        """'
p1337
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1338
sg84
g48
sa(dp1339
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1340
sg62
(dp1341
S'self'
p1342
S'<gluon.template.TemplateParser object>'
p1343
sS'extend'
p1344
S'"\'annotate_layout.html\'"'
p1345
sS'self.extend'
p1346
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1347
ssg72
I756
sg73
(dp1348
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1349
sI752
S'            self.child_super_nodes.remove(node)'
p1350
sI753
S''
sI754
S'        # If we need to extend a template.'
p1351
sI755
S'        if extend:'
p1352
sI756
S'            self.extend(extend)'
p1353
sI757
S''
sI758
S'# We need this for integration with gluon'
p1354
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1355
sg84
g188
sa(dp1356
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1357
sg62
(dp1358
S'super_nodes'
p1359
S'[]'
p1360
sS'_super_nodes'
p1361
g114
ssg72
I486
sg73
(dp1362
I481
S'                           name=filename,'
p1363
sI482
S'                           context=self.context,'
p1364
sI483
S'                           path=self.path,'
p1365
sI484
S'                           writer=self.writer,'
p1366
sI485
S'                           delimiters=self.delimiters,'
p1367
sI486
S'                           _super_nodes=super_nodes)'
p1368
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1369
sI489
S'        # template.'
p1370
sI490
S'        buf = BlockNode('
p1371
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1372
sg84
g206
sa(dp1373
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1374
sg62
(dp1375
S'text'
p1376
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1377
sS'self'
p1378
S'<gluon.template.TemplateParser object>'
p1379
sS'self.parse'
p1380
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1381
ssg72
I316
sg73
(dp1382
I320
S'        Return the parsed template with correct indentation.'
p1383
sI311
S'        # This variable will hold a reference to every block'
p1384
sI312
S'        # that we come across in this template'
p1385
sI313
S'        self.blocks = {}'
p1386
sI314
S''
sI315
S'        # Begin parsing.'
p1387
sI316
S'        self.parse(text)'
p1388
sI317
S''
sI318
S'    def to_string(self):'
p1389
sI319
S'        """'
p1390
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1391
sg84
g48
sa(dp1392
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1393
sg62
(dp1394
S'self'
p1395
S'<gluon.template.TemplateParser object>'
p1396
sS'extend'
p1397
S'"\'annotate_layout.html\'"'
p1398
sS'self.extend'
p1399
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1400
ssg72
I756
sg73
(dp1401
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1402
sI752
S'            self.child_super_nodes.remove(node)'
p1403
sI753
S''
sI754
S'        # If we need to extend a template.'
p1404
sI755
S'        if extend:'
p1405
sI756
S'            self.extend(extend)'
p1406
sI757
S''
sI758
S'# We need this for integration with gluon'
p1407
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1408
sg84
g188
sa(dp1409
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1410
sg62
(dp1411
S'super_nodes'
p1412
S'[]'
p1413
sS'_super_nodes'
p1414
g114
ssg72
I486
sg73
(dp1415
I481
S'                           name=filename,'
p1416
sI482
S'                           context=self.context,'
p1417
sI483
S'                           path=self.path,'
p1418
sI484
S'                           writer=self.writer,'
p1419
sI485
S'                           delimiters=self.delimiters,'
p1420
sI486
S'                           _super_nodes=super_nodes)'
p1421
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1422
sI489
S'        # template.'
p1423
sI490
S'        buf = BlockNode('
p1424
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1425
sg84
g206
sa(dp1426
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1427
sg62
(dp1428
S'text'
p1429
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1430
sS'self'
p1431
S'<gluon.template.TemplateParser object>'
p1432
sS'self.parse'
p1433
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1434
ssg72
I316
sg73
(dp1435
I320
S'        Return the parsed template with correct indentation.'
p1436
sI311
S'        # This variable will hold a reference to every block'
p1437
sI312
S'        # that we come across in this template'
p1438
sI313
S'        self.blocks = {}'
p1439
sI314
S''
sI315
S'        # Begin parsing.'
p1440
sI316
S'        self.parse(text)'
p1441
sI317
S''
sI318
S'    def to_string(self):'
p1442
sI319
S'        """'
p1443
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1444
sg84
g48
sa(dp1445
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1446
sg62
(dp1447
S'self'
p1448
S'<gluon.template.TemplateParser object>'
p1449
sS'extend'
p1450
S'"\'annotate_layout.html\'"'
p1451
sS'self.extend'
p1452
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1453
ssg72
I756
sg73
(dp1454
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1455
sI752
S'            self.child_super_nodes.remove(node)'
p1456
sI753
S''
sI754
S'        # If we need to extend a template.'
p1457
sI755
S'        if extend:'
p1458
sI756
S'            self.extend(extend)'
p1459
sI757
S''
sI758
S'# We need this for integration with gluon'
p1460
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1461
sg84
g188
sa(dp1462
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1463
sg62
(dp1464
S'super_nodes'
p1465
S'[]'
p1466
sS'_super_nodes'
p1467
g114
ssg72
I486
sg73
(dp1468
I481
S'                           name=filename,'
p1469
sI482
S'                           context=self.context,'
p1470
sI483
S'                           path=self.path,'
p1471
sI484
S'                           writer=self.writer,'
p1472
sI485
S'                           delimiters=self.delimiters,'
p1473
sI486
S'                           _super_nodes=super_nodes)'
p1474
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1475
sI489
S'        # template.'
p1476
sI490
S'        buf = BlockNode('
p1477
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1478
sg84
g206
sa(dp1479
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1480
sg62
(dp1481
S'text'
p1482
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1483
sS'self'
p1484
S'<gluon.template.TemplateParser object>'
p1485
sS'self.parse'
p1486
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1487
ssg72
I316
sg73
(dp1488
I320
S'        Return the parsed template with correct indentation.'
p1489
sI311
S'        # This variable will hold a reference to every block'
p1490
sI312
S'        # that we come across in this template'
p1491
sI313
S'        self.blocks = {}'
p1492
sI314
S''
sI315
S'        # Begin parsing.'
p1493
sI316
S'        self.parse(text)'
p1494
sI317
S''
sI318
S'    def to_string(self):'
p1495
sI319
S'        """'
p1496
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1497
sg84
g48
sa(dp1498
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1499
sg62
(dp1500
S'self'
p1501
S'<gluon.template.TemplateParser object>'
p1502
sS'extend'
p1503
S'"\'annotate_layout.html\'"'
p1504
sS'self.extend'
p1505
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1506
ssg72
I756
sg73
(dp1507
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1508
sI752
S'            self.child_super_nodes.remove(node)'
p1509
sI753
S''
sI754
S'        # If we need to extend a template.'
p1510
sI755
S'        if extend:'
p1511
sI756
S'            self.extend(extend)'
p1512
sI757
S''
sI758
S'# We need this for integration with gluon'
p1513
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1514
sg84
g188
sa(dp1515
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1516
sg62
(dp1517
S'super_nodes'
p1518
S'[]'
p1519
sS'_super_nodes'
p1520
g114
ssg72
I486
sg73
(dp1521
I481
S'                           name=filename,'
p1522
sI482
S'                           context=self.context,'
p1523
sI483
S'                           path=self.path,'
p1524
sI484
S'                           writer=self.writer,'
p1525
sI485
S'                           delimiters=self.delimiters,'
p1526
sI486
S'                           _super_nodes=super_nodes)'
p1527
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1528
sI489
S'        # template.'
p1529
sI490
S'        buf = BlockNode('
p1530
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1531
sg84
g206
sa(dp1532
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1533
sg62
(dp1534
S'text'
p1535
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1536
sS'self'
p1537
S'<gluon.template.TemplateParser object>'
p1538
sS'self.parse'
p1539
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1540
ssg72
I316
sg73
(dp1541
I320
S'        Return the parsed template with correct indentation.'
p1542
sI311
S'        # This variable will hold a reference to every block'
p1543
sI312
S'        # that we come across in this template'
p1544
sI313
S'        self.blocks = {}'
p1545
sI314
S''
sI315
S'        # Begin parsing.'
p1546
sI316
S'        self.parse(text)'
p1547
sI317
S''
sI318
S'    def to_string(self):'
p1548
sI319
S'        """'
p1549
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1550
sg84
g48
sa(dp1551
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1552
sg62
(dp1553
S'self'
p1554
S'<gluon.template.TemplateParser object>'
p1555
sS'extend'
p1556
S'"\'annotate_layout.html\'"'
p1557
sS'self.extend'
p1558
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1559
ssg72
I756
sg73
(dp1560
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1561
sI752
S'            self.child_super_nodes.remove(node)'
p1562
sI753
S''
sI754
S'        # If we need to extend a template.'
p1563
sI755
S'        if extend:'
p1564
sI756
S'            self.extend(extend)'
p1565
sI757
S''
sI758
S'# We need this for integration with gluon'
p1566
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1567
sg84
g188
sa(dp1568
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1569
sg62
(dp1570
S'super_nodes'
p1571
S'[]'
p1572
sS'_super_nodes'
p1573
g114
ssg72
I486
sg73
(dp1574
I481
S'                           name=filename,'
p1575
sI482
S'                           context=self.context,'
p1576
sI483
S'                           path=self.path,'
p1577
sI484
S'                           writer=self.writer,'
p1578
sI485
S'                           delimiters=self.delimiters,'
p1579
sI486
S'                           _super_nodes=super_nodes)'
p1580
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1581
sI489
S'        # template.'
p1582
sI490
S'        buf = BlockNode('
p1583
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1584
sg84
g206
sa(dp1585
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1586
sg62
(dp1587
S'text'
p1588
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1589
sS'self'
p1590
S'<gluon.template.TemplateParser object>'
p1591
sS'self.parse'
p1592
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1593
ssg72
I316
sg73
(dp1594
I320
S'        Return the parsed template with correct indentation.'
p1595
sI311
S'        # This variable will hold a reference to every block'
p1596
sI312
S'        # that we come across in this template'
p1597
sI313
S'        self.blocks = {}'
p1598
sI314
S''
sI315
S'        # Begin parsing.'
p1599
sI316
S'        self.parse(text)'
p1600
sI317
S''
sI318
S'    def to_string(self):'
p1601
sI319
S'        """'
p1602
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1603
sg84
g48
sa(dp1604
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1605
sg62
(dp1606
S'self'
p1607
S'<gluon.template.TemplateParser object>'
p1608
sS'extend'
p1609
S'"\'annotate_layout.html\'"'
p1610
sS'self.extend'
p1611
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1612
ssg72
I756
sg73
(dp1613
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1614
sI752
S'            self.child_super_nodes.remove(node)'
p1615
sI753
S''
sI754
S'        # If we need to extend a template.'
p1616
sI755
S'        if extend:'
p1617
sI756
S'            self.extend(extend)'
p1618
sI757
S''
sI758
S'# We need this for integration with gluon'
p1619
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1620
sg84
g188
sa(dp1621
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1622
sg62
(dp1623
S'super_nodes'
p1624
S'[]'
p1625
sS'_super_nodes'
p1626
g114
ssg72
I486
sg73
(dp1627
I481
S'                           name=filename,'
p1628
sI482
S'                           context=self.context,'
p1629
sI483
S'                           path=self.path,'
p1630
sI484
S'                           writer=self.writer,'
p1631
sI485
S'                           delimiters=self.delimiters,'
p1632
sI486
S'                           _super_nodes=super_nodes)'
p1633
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1634
sI489
S'        # template.'
p1635
sI490
S'        buf = BlockNode('
p1636
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1637
sg84
g206
sa(dp1638
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1639
sg62
(dp1640
S'text'
p1641
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1642
sS'self'
p1643
S'<gluon.template.TemplateParser object>'
p1644
sS'self.parse'
p1645
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1646
ssg72
I316
sg73
(dp1647
I320
S'        Return the parsed template with correct indentation.'
p1648
sI311
S'        # This variable will hold a reference to every block'
p1649
sI312
S'        # that we come across in this template'
p1650
sI313
S'        self.blocks = {}'
p1651
sI314
S''
sI315
S'        # Begin parsing.'
p1652
sI316
S'        self.parse(text)'
p1653
sI317
S''
sI318
S'    def to_string(self):'
p1654
sI319
S'        """'
p1655
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1656
sg84
g48
sa(dp1657
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1658
sg62
(dp1659
S'self'
p1660
S'<gluon.template.TemplateParser object>'
p1661
sS'extend'
p1662
S'"\'annotate_layout.html\'"'
p1663
sS'self.extend'
p1664
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1665
ssg72
I756
sg73
(dp1666
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1667
sI752
S'            self.child_super_nodes.remove(node)'
p1668
sI753
S''
sI754
S'        # If we need to extend a template.'
p1669
sI755
S'        if extend:'
p1670
sI756
S'            self.extend(extend)'
p1671
sI757
S''
sI758
S'# We need this for integration with gluon'
p1672
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1673
sg84
g188
sa(dp1674
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1675
sg62
(dp1676
S'super_nodes'
p1677
S'[]'
p1678
sS'_super_nodes'
p1679
g114
ssg72
I486
sg73
(dp1680
I481
S'                           name=filename,'
p1681
sI482
S'                           context=self.context,'
p1682
sI483
S'                           path=self.path,'
p1683
sI484
S'                           writer=self.writer,'
p1684
sI485
S'                           delimiters=self.delimiters,'
p1685
sI486
S'                           _super_nodes=super_nodes)'
p1686
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1687
sI489
S'        # template.'
p1688
sI490
S'        buf = BlockNode('
p1689
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1690
sg84
g206
sa(dp1691
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1692
sg62
(dp1693
S'text'
p1694
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1695
sS'self'
p1696
S'<gluon.template.TemplateParser object>'
p1697
sS'self.parse'
p1698
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1699
ssg72
I316
sg73
(dp1700
I320
S'        Return the parsed template with correct indentation.'
p1701
sI311
S'        # This variable will hold a reference to every block'
p1702
sI312
S'        # that we come across in this template'
p1703
sI313
S'        self.blocks = {}'
p1704
sI314
S''
sI315
S'        # Begin parsing.'
p1705
sI316
S'        self.parse(text)'
p1706
sI317
S''
sI318
S'    def to_string(self):'
p1707
sI319
S'        """'
p1708
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1709
sg84
g48
sa(dp1710
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1711
sg62
(dp1712
S'self'
p1713
S'<gluon.template.TemplateParser object>'
p1714
sS'extend'
p1715
S'"\'annotate_layout.html\'"'
p1716
sS'self.extend'
p1717
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1718
ssg72
I756
sg73
(dp1719
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1720
sI752
S'            self.child_super_nodes.remove(node)'
p1721
sI753
S''
sI754
S'        # If we need to extend a template.'
p1722
sI755
S'        if extend:'
p1723
sI756
S'            self.extend(extend)'
p1724
sI757
S''
sI758
S'# We need this for integration with gluon'
p1725
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1726
sg84
g188
sa(dp1727
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1728
sg62
(dp1729
S'super_nodes'
p1730
S'[]'
p1731
sS'_super_nodes'
p1732
g114
ssg72
I486
sg73
(dp1733
I481
S'                           name=filename,'
p1734
sI482
S'                           context=self.context,'
p1735
sI483
S'                           path=self.path,'
p1736
sI484
S'                           writer=self.writer,'
p1737
sI485
S'                           delimiters=self.delimiters,'
p1738
sI486
S'                           _super_nodes=super_nodes)'
p1739
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1740
sI489
S'        # template.'
p1741
sI490
S'        buf = BlockNode('
p1742
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1743
sg84
g206
sa(dp1744
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1745
sg62
(dp1746
S'text'
p1747
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1748
sS'self'
p1749
S'<gluon.template.TemplateParser object>'
p1750
sS'self.parse'
p1751
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1752
ssg72
I316
sg73
(dp1753
I320
S'        Return the parsed template with correct indentation.'
p1754
sI311
S'        # This variable will hold a reference to every block'
p1755
sI312
S'        # that we come across in this template'
p1756
sI313
S'        self.blocks = {}'
p1757
sI314
S''
sI315
S'        # Begin parsing.'
p1758
sI316
S'        self.parse(text)'
p1759
sI317
S''
sI318
S'    def to_string(self):'
p1760
sI319
S'        """'
p1761
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1762
sg84
g48
sa(dp1763
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1764
sg62
(dp1765
S'self'
p1766
S'<gluon.template.TemplateParser object>'
p1767
sS'extend'
p1768
S'"\'annotate_layout.html\'"'
p1769
sS'self.extend'
p1770
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1771
ssg72
I756
sg73
(dp1772
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1773
sI752
S'            self.child_super_nodes.remove(node)'
p1774
sI753
S''
sI754
S'        # If we need to extend a template.'
p1775
sI755
S'        if extend:'
p1776
sI756
S'            self.extend(extend)'
p1777
sI757
S''
sI758
S'# We need this for integration with gluon'
p1778
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1779
sg84
g188
sa(dp1780
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1781
sg62
(dp1782
S'super_nodes'
p1783
S'[]'
p1784
sS'_super_nodes'
p1785
g114
ssg72
I486
sg73
(dp1786
I481
S'                           name=filename,'
p1787
sI482
S'                           context=self.context,'
p1788
sI483
S'                           path=self.path,'
p1789
sI484
S'                           writer=self.writer,'
p1790
sI485
S'                           delimiters=self.delimiters,'
p1791
sI486
S'                           _super_nodes=super_nodes)'
p1792
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1793
sI489
S'        # template.'
p1794
sI490
S'        buf = BlockNode('
p1795
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1796
sg84
g206
sa(dp1797
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1798
sg62
(dp1799
S'text'
p1800
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1801
sS'self'
p1802
S'<gluon.template.TemplateParser object>'
p1803
sS'self.parse'
p1804
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1805
ssg72
I316
sg73
(dp1806
I320
S'        Return the parsed template with correct indentation.'
p1807
sI311
S'        # This variable will hold a reference to every block'
p1808
sI312
S'        # that we come across in this template'
p1809
sI313
S'        self.blocks = {}'
p1810
sI314
S''
sI315
S'        # Begin parsing.'
p1811
sI316
S'        self.parse(text)'
p1812
sI317
S''
sI318
S'    def to_string(self):'
p1813
sI319
S'        """'
p1814
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1815
sg84
g48
sa(dp1816
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1817
sg62
(dp1818
S'self'
p1819
S'<gluon.template.TemplateParser object>'
p1820
sS'extend'
p1821
S'"\'annotate_layout.html\'"'
p1822
sS'self.extend'
p1823
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1824
ssg72
I756
sg73
(dp1825
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1826
sI752
S'            self.child_super_nodes.remove(node)'
p1827
sI753
S''
sI754
S'        # If we need to extend a template.'
p1828
sI755
S'        if extend:'
p1829
sI756
S'            self.extend(extend)'
p1830
sI757
S''
sI758
S'# We need this for integration with gluon'
p1831
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1832
sg84
g188
sa(dp1833
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1834
sg62
(dp1835
S'super_nodes'
p1836
S'[]'
p1837
sS'_super_nodes'
p1838
g114
ssg72
I486
sg73
(dp1839
I481
S'                           name=filename,'
p1840
sI482
S'                           context=self.context,'
p1841
sI483
S'                           path=self.path,'
p1842
sI484
S'                           writer=self.writer,'
p1843
sI485
S'                           delimiters=self.delimiters,'
p1844
sI486
S'                           _super_nodes=super_nodes)'
p1845
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1846
sI489
S'        # template.'
p1847
sI490
S'        buf = BlockNode('
p1848
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1849
sg84
g206
sa(dp1850
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1851
sg62
(dp1852
S'text'
p1853
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1854
sS'self'
p1855
S'<gluon.template.TemplateParser object>'
p1856
sS'self.parse'
p1857
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1858
ssg72
I316
sg73
(dp1859
I320
S'        Return the parsed template with correct indentation.'
p1860
sI311
S'        # This variable will hold a reference to every block'
p1861
sI312
S'        # that we come across in this template'
p1862
sI313
S'        self.blocks = {}'
p1863
sI314
S''
sI315
S'        # Begin parsing.'
p1864
sI316
S'        self.parse(text)'
p1865
sI317
S''
sI318
S'    def to_string(self):'
p1866
sI319
S'        """'
p1867
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1868
sg84
g48
sa(dp1869
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1870
sg62
(dp1871
S'self'
p1872
S'<gluon.template.TemplateParser object>'
p1873
sS'extend'
p1874
S'"\'annotate_layout.html\'"'
p1875
sS'self.extend'
p1876
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1877
ssg72
I756
sg73
(dp1878
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1879
sI752
S'            self.child_super_nodes.remove(node)'
p1880
sI753
S''
sI754
S'        # If we need to extend a template.'
p1881
sI755
S'        if extend:'
p1882
sI756
S'            self.extend(extend)'
p1883
sI757
S''
sI758
S'# We need this for integration with gluon'
p1884
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1885
sg84
g188
sa(dp1886
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1887
sg62
(dp1888
S'super_nodes'
p1889
S'[]'
p1890
sS'_super_nodes'
p1891
g114
ssg72
I486
sg73
(dp1892
I481
S'                           name=filename,'
p1893
sI482
S'                           context=self.context,'
p1894
sI483
S'                           path=self.path,'
p1895
sI484
S'                           writer=self.writer,'
p1896
sI485
S'                           delimiters=self.delimiters,'
p1897
sI486
S'                           _super_nodes=super_nodes)'
p1898
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1899
sI489
S'        # template.'
p1900
sI490
S'        buf = BlockNode('
p1901
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1902
sg84
g206
sa(dp1903
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1904
sg62
(dp1905
S'text'
p1906
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1907
sS'self'
p1908
S'<gluon.template.TemplateParser object>'
p1909
sS'self.parse'
p1910
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1911
ssg72
I316
sg73
(dp1912
I320
S'        Return the parsed template with correct indentation.'
p1913
sI311
S'        # This variable will hold a reference to every block'
p1914
sI312
S'        # that we come across in this template'
p1915
sI313
S'        self.blocks = {}'
p1916
sI314
S''
sI315
S'        # Begin parsing.'
p1917
sI316
S'        self.parse(text)'
p1918
sI317
S''
sI318
S'    def to_string(self):'
p1919
sI319
S'        """'
p1920
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1921
sg84
g48
sa(dp1922
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1923
sg62
(dp1924
S'self'
p1925
S'<gluon.template.TemplateParser object>'
p1926
sS'extend'
p1927
S'"\'annotate_layout.html\'"'
p1928
sS'self.extend'
p1929
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1930
ssg72
I756
sg73
(dp1931
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1932
sI752
S'            self.child_super_nodes.remove(node)'
p1933
sI753
S''
sI754
S'        # If we need to extend a template.'
p1934
sI755
S'        if extend:'
p1935
sI756
S'            self.extend(extend)'
p1936
sI757
S''
sI758
S'# We need this for integration with gluon'
p1937
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1938
sg84
g188
sa(dp1939
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1940
sg62
(dp1941
S'super_nodes'
p1942
S'[]'
p1943
sS'_super_nodes'
p1944
g114
ssg72
I486
sg73
(dp1945
I481
S'                           name=filename,'
p1946
sI482
S'                           context=self.context,'
p1947
sI483
S'                           path=self.path,'
p1948
sI484
S'                           writer=self.writer,'
p1949
sI485
S'                           delimiters=self.delimiters,'
p1950
sI486
S'                           _super_nodes=super_nodes)'
p1951
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p1952
sI489
S'        # template.'
p1953
sI490
S'        buf = BlockNode('
p1954
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p1955
sg84
g206
sa(dp1956
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1957
sg62
(dp1958
S'text'
p1959
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p1960
sS'self'
p1961
S'<gluon.template.TemplateParser object>'
p1962
sS'self.parse'
p1963
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p1964
ssg72
I316
sg73
(dp1965
I320
S'        Return the parsed template with correct indentation.'
p1966
sI311
S'        # This variable will hold a reference to every block'
p1967
sI312
S'        # that we come across in this template'
p1968
sI313
S'        self.blocks = {}'
p1969
sI314
S''
sI315
S'        # Begin parsing.'
p1970
sI316
S'        self.parse(text)'
p1971
sI317
S''
sI318
S'    def to_string(self):'
p1972
sI319
S'        """'
p1973
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p1974
sg84
g48
sa(dp1975
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1976
sg62
(dp1977
S'self'
p1978
S'<gluon.template.TemplateParser object>'
p1979
sS'extend'
p1980
S'"\'annotate_layout.html\'"'
p1981
sS'self.extend'
p1982
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p1983
ssg72
I756
sg73
(dp1984
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p1985
sI752
S'            self.child_super_nodes.remove(node)'
p1986
sI753
S''
sI754
S'        # If we need to extend a template.'
p1987
sI755
S'        if extend:'
p1988
sI756
S'            self.extend(extend)'
p1989
sI757
S''
sI758
S'# We need this for integration with gluon'
p1990
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p1991
sg84
g188
sa(dp1992
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p1993
sg62
(dp1994
S'super_nodes'
p1995
S'[]'
p1996
sS'_super_nodes'
p1997
g114
ssg72
I486
sg73
(dp1998
I481
S'                           name=filename,'
p1999
sI482
S'                           context=self.context,'
p2000
sI483
S'                           path=self.path,'
p2001
sI484
S'                           writer=self.writer,'
p2002
sI485
S'                           delimiters=self.delimiters,'
p2003
sI486
S'                           _super_nodes=super_nodes)'
p2004
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2005
sI489
S'        # template.'
p2006
sI490
S'        buf = BlockNode('
p2007
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2008
sg84
g206
sa(dp2009
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2010
sg62
(dp2011
S'text'
p2012
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2013
sS'self'
p2014
S'<gluon.template.TemplateParser object>'
p2015
sS'self.parse'
p2016
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2017
ssg72
I316
sg73
(dp2018
I320
S'        Return the parsed template with correct indentation.'
p2019
sI311
S'        # This variable will hold a reference to every block'
p2020
sI312
S'        # that we come across in this template'
p2021
sI313
S'        self.blocks = {}'
p2022
sI314
S''
sI315
S'        # Begin parsing.'
p2023
sI316
S'        self.parse(text)'
p2024
sI317
S''
sI318
S'    def to_string(self):'
p2025
sI319
S'        """'
p2026
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2027
sg84
g48
sa(dp2028
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2029
sg62
(dp2030
S'self'
p2031
S'<gluon.template.TemplateParser object>'
p2032
sS'extend'
p2033
S'"\'annotate_layout.html\'"'
p2034
sS'self.extend'
p2035
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2036
ssg72
I756
sg73
(dp2037
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2038
sI752
S'            self.child_super_nodes.remove(node)'
p2039
sI753
S''
sI754
S'        # If we need to extend a template.'
p2040
sI755
S'        if extend:'
p2041
sI756
S'            self.extend(extend)'
p2042
sI757
S''
sI758
S'# We need this for integration with gluon'
p2043
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2044
sg84
g188
sa(dp2045
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2046
sg62
(dp2047
S'super_nodes'
p2048
S'[]'
p2049
sS'_super_nodes'
p2050
g114
ssg72
I486
sg73
(dp2051
I481
S'                           name=filename,'
p2052
sI482
S'                           context=self.context,'
p2053
sI483
S'                           path=self.path,'
p2054
sI484
S'                           writer=self.writer,'
p2055
sI485
S'                           delimiters=self.delimiters,'
p2056
sI486
S'                           _super_nodes=super_nodes)'
p2057
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2058
sI489
S'        # template.'
p2059
sI490
S'        buf = BlockNode('
p2060
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2061
sg84
g206
sa(dp2062
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2063
sg62
(dp2064
S'text'
p2065
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2066
sS'self'
p2067
S'<gluon.template.TemplateParser object>'
p2068
sS'self.parse'
p2069
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2070
ssg72
I316
sg73
(dp2071
I320
S'        Return the parsed template with correct indentation.'
p2072
sI311
S'        # This variable will hold a reference to every block'
p2073
sI312
S'        # that we come across in this template'
p2074
sI313
S'        self.blocks = {}'
p2075
sI314
S''
sI315
S'        # Begin parsing.'
p2076
sI316
S'        self.parse(text)'
p2077
sI317
S''
sI318
S'    def to_string(self):'
p2078
sI319
S'        """'
p2079
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2080
sg84
g48
sa(dp2081
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2082
sg62
(dp2083
S'self'
p2084
S'<gluon.template.TemplateParser object>'
p2085
sS'extend'
p2086
S'"\'annotate_layout.html\'"'
p2087
sS'self.extend'
p2088
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2089
ssg72
I756
sg73
(dp2090
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2091
sI752
S'            self.child_super_nodes.remove(node)'
p2092
sI753
S''
sI754
S'        # If we need to extend a template.'
p2093
sI755
S'        if extend:'
p2094
sI756
S'            self.extend(extend)'
p2095
sI757
S''
sI758
S'# We need this for integration with gluon'
p2096
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2097
sg84
g188
sa(dp2098
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2099
sg62
(dp2100
S'super_nodes'
p2101
S'[]'
p2102
sS'_super_nodes'
p2103
g114
ssg72
I486
sg73
(dp2104
I481
S'                           name=filename,'
p2105
sI482
S'                           context=self.context,'
p2106
sI483
S'                           path=self.path,'
p2107
sI484
S'                           writer=self.writer,'
p2108
sI485
S'                           delimiters=self.delimiters,'
p2109
sI486
S'                           _super_nodes=super_nodes)'
p2110
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2111
sI489
S'        # template.'
p2112
sI490
S'        buf = BlockNode('
p2113
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2114
sg84
g206
sa(dp2115
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2116
sg62
(dp2117
S'text'
p2118
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2119
sS'self'
p2120
S'<gluon.template.TemplateParser object>'
p2121
sS'self.parse'
p2122
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2123
ssg72
I316
sg73
(dp2124
I320
S'        Return the parsed template with correct indentation.'
p2125
sI311
S'        # This variable will hold a reference to every block'
p2126
sI312
S'        # that we come across in this template'
p2127
sI313
S'        self.blocks = {}'
p2128
sI314
S''
sI315
S'        # Begin parsing.'
p2129
sI316
S'        self.parse(text)'
p2130
sI317
S''
sI318
S'    def to_string(self):'
p2131
sI319
S'        """'
p2132
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2133
sg84
g48
sa(dp2134
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2135
sg62
(dp2136
S'self'
p2137
S'<gluon.template.TemplateParser object>'
p2138
sS'extend'
p2139
S'"\'annotate_layout.html\'"'
p2140
sS'self.extend'
p2141
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2142
ssg72
I756
sg73
(dp2143
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2144
sI752
S'            self.child_super_nodes.remove(node)'
p2145
sI753
S''
sI754
S'        # If we need to extend a template.'
p2146
sI755
S'        if extend:'
p2147
sI756
S'            self.extend(extend)'
p2148
sI757
S''
sI758
S'# We need this for integration with gluon'
p2149
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2150
sg84
g188
sa(dp2151
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2152
sg62
(dp2153
S'super_nodes'
p2154
S'[]'
p2155
sS'_super_nodes'
p2156
g114
ssg72
I486
sg73
(dp2157
I481
S'                           name=filename,'
p2158
sI482
S'                           context=self.context,'
p2159
sI483
S'                           path=self.path,'
p2160
sI484
S'                           writer=self.writer,'
p2161
sI485
S'                           delimiters=self.delimiters,'
p2162
sI486
S'                           _super_nodes=super_nodes)'
p2163
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2164
sI489
S'        # template.'
p2165
sI490
S'        buf = BlockNode('
p2166
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2167
sg84
g206
sa(dp2168
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2169
sg62
(dp2170
S'text'
p2171
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2172
sS'self'
p2173
S'<gluon.template.TemplateParser object>'
p2174
sS'self.parse'
p2175
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2176
ssg72
I316
sg73
(dp2177
I320
S'        Return the parsed template with correct indentation.'
p2178
sI311
S'        # This variable will hold a reference to every block'
p2179
sI312
S'        # that we come across in this template'
p2180
sI313
S'        self.blocks = {}'
p2181
sI314
S''
sI315
S'        # Begin parsing.'
p2182
sI316
S'        self.parse(text)'
p2183
sI317
S''
sI318
S'    def to_string(self):'
p2184
sI319
S'        """'
p2185
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2186
sg84
g48
sa(dp2187
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2188
sg62
(dp2189
S'self'
p2190
S'<gluon.template.TemplateParser object>'
p2191
sS'extend'
p2192
S'"\'annotate_layout.html\'"'
p2193
sS'self.extend'
p2194
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2195
ssg72
I756
sg73
(dp2196
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2197
sI752
S'            self.child_super_nodes.remove(node)'
p2198
sI753
S''
sI754
S'        # If we need to extend a template.'
p2199
sI755
S'        if extend:'
p2200
sI756
S'            self.extend(extend)'
p2201
sI757
S''
sI758
S'# We need this for integration with gluon'
p2202
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2203
sg84
g188
sa(dp2204
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2205
sg62
(dp2206
S'super_nodes'
p2207
S'[]'
p2208
sS'_super_nodes'
p2209
g114
ssg72
I486
sg73
(dp2210
I481
S'                           name=filename,'
p2211
sI482
S'                           context=self.context,'
p2212
sI483
S'                           path=self.path,'
p2213
sI484
S'                           writer=self.writer,'
p2214
sI485
S'                           delimiters=self.delimiters,'
p2215
sI486
S'                           _super_nodes=super_nodes)'
p2216
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2217
sI489
S'        # template.'
p2218
sI490
S'        buf = BlockNode('
p2219
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2220
sg84
g206
sa(dp2221
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2222
sg62
(dp2223
S'text'
p2224
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2225
sS'self'
p2226
S'<gluon.template.TemplateParser object>'
p2227
sS'self.parse'
p2228
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2229
ssg72
I316
sg73
(dp2230
I320
S'        Return the parsed template with correct indentation.'
p2231
sI311
S'        # This variable will hold a reference to every block'
p2232
sI312
S'        # that we come across in this template'
p2233
sI313
S'        self.blocks = {}'
p2234
sI314
S''
sI315
S'        # Begin parsing.'
p2235
sI316
S'        self.parse(text)'
p2236
sI317
S''
sI318
S'    def to_string(self):'
p2237
sI319
S'        """'
p2238
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2239
sg84
g48
sa(dp2240
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2241
sg62
(dp2242
S'self'
p2243
S'<gluon.template.TemplateParser object>'
p2244
sS'extend'
p2245
S'"\'annotate_layout.html\'"'
p2246
sS'self.extend'
p2247
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2248
ssg72
I756
sg73
(dp2249
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2250
sI752
S'            self.child_super_nodes.remove(node)'
p2251
sI753
S''
sI754
S'        # If we need to extend a template.'
p2252
sI755
S'        if extend:'
p2253
sI756
S'            self.extend(extend)'
p2254
sI757
S''
sI758
S'# We need this for integration with gluon'
p2255
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2256
sg84
g188
sa(dp2257
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2258
sg62
(dp2259
S'super_nodes'
p2260
S'[]'
p2261
sS'_super_nodes'
p2262
g114
ssg72
I486
sg73
(dp2263
I481
S'                           name=filename,'
p2264
sI482
S'                           context=self.context,'
p2265
sI483
S'                           path=self.path,'
p2266
sI484
S'                           writer=self.writer,'
p2267
sI485
S'                           delimiters=self.delimiters,'
p2268
sI486
S'                           _super_nodes=super_nodes)'
p2269
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2270
sI489
S'        # template.'
p2271
sI490
S'        buf = BlockNode('
p2272
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2273
sg84
g206
sa(dp2274
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2275
sg62
(dp2276
S'text'
p2277
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2278
sS'self'
p2279
S'<gluon.template.TemplateParser object>'
p2280
sS'self.parse'
p2281
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2282
ssg72
I316
sg73
(dp2283
I320
S'        Return the parsed template with correct indentation.'
p2284
sI311
S'        # This variable will hold a reference to every block'
p2285
sI312
S'        # that we come across in this template'
p2286
sI313
S'        self.blocks = {}'
p2287
sI314
S''
sI315
S'        # Begin parsing.'
p2288
sI316
S'        self.parse(text)'
p2289
sI317
S''
sI318
S'    def to_string(self):'
p2290
sI319
S'        """'
p2291
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2292
sg84
g48
sa(dp2293
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2294
sg62
(dp2295
S'self'
p2296
S'<gluon.template.TemplateParser object>'
p2297
sS'extend'
p2298
S'"\'annotate_layout.html\'"'
p2299
sS'self.extend'
p2300
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2301
ssg72
I756
sg73
(dp2302
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2303
sI752
S'            self.child_super_nodes.remove(node)'
p2304
sI753
S''
sI754
S'        # If we need to extend a template.'
p2305
sI755
S'        if extend:'
p2306
sI756
S'            self.extend(extend)'
p2307
sI757
S''
sI758
S'# We need this for integration with gluon'
p2308
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2309
sg84
g188
sa(dp2310
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2311
sg62
(dp2312
S'super_nodes'
p2313
S'[]'
p2314
sS'_super_nodes'
p2315
g114
ssg72
I486
sg73
(dp2316
I481
S'                           name=filename,'
p2317
sI482
S'                           context=self.context,'
p2318
sI483
S'                           path=self.path,'
p2319
sI484
S'                           writer=self.writer,'
p2320
sI485
S'                           delimiters=self.delimiters,'
p2321
sI486
S'                           _super_nodes=super_nodes)'
p2322
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2323
sI489
S'        # template.'
p2324
sI490
S'        buf = BlockNode('
p2325
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2326
sg84
g206
sa(dp2327
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2328
sg62
(dp2329
S'text'
p2330
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2331
sS'self'
p2332
S'<gluon.template.TemplateParser object>'
p2333
sS'self.parse'
p2334
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2335
ssg72
I316
sg73
(dp2336
I320
S'        Return the parsed template with correct indentation.'
p2337
sI311
S'        # This variable will hold a reference to every block'
p2338
sI312
S'        # that we come across in this template'
p2339
sI313
S'        self.blocks = {}'
p2340
sI314
S''
sI315
S'        # Begin parsing.'
p2341
sI316
S'        self.parse(text)'
p2342
sI317
S''
sI318
S'    def to_string(self):'
p2343
sI319
S'        """'
p2344
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2345
sg84
g48
sa(dp2346
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2347
sg62
(dp2348
S'self'
p2349
S'<gluon.template.TemplateParser object>'
p2350
sS'extend'
p2351
S'"\'annotate_layout.html\'"'
p2352
sS'self.extend'
p2353
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2354
ssg72
I756
sg73
(dp2355
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2356
sI752
S'            self.child_super_nodes.remove(node)'
p2357
sI753
S''
sI754
S'        # If we need to extend a template.'
p2358
sI755
S'        if extend:'
p2359
sI756
S'            self.extend(extend)'
p2360
sI757
S''
sI758
S'# We need this for integration with gluon'
p2361
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2362
sg84
g188
sa(dp2363
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2364
sg62
(dp2365
S'super_nodes'
p2366
S'[]'
p2367
sS'_super_nodes'
p2368
g114
ssg72
I486
sg73
(dp2369
I481
S'                           name=filename,'
p2370
sI482
S'                           context=self.context,'
p2371
sI483
S'                           path=self.path,'
p2372
sI484
S'                           writer=self.writer,'
p2373
sI485
S'                           delimiters=self.delimiters,'
p2374
sI486
S'                           _super_nodes=super_nodes)'
p2375
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2376
sI489
S'        # template.'
p2377
sI490
S'        buf = BlockNode('
p2378
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2379
sg84
g206
sa(dp2380
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2381
sg62
(dp2382
S'text'
p2383
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2384
sS'self'
p2385
S'<gluon.template.TemplateParser object>'
p2386
sS'self.parse'
p2387
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2388
ssg72
I316
sg73
(dp2389
I320
S'        Return the parsed template with correct indentation.'
p2390
sI311
S'        # This variable will hold a reference to every block'
p2391
sI312
S'        # that we come across in this template'
p2392
sI313
S'        self.blocks = {}'
p2393
sI314
S''
sI315
S'        # Begin parsing.'
p2394
sI316
S'        self.parse(text)'
p2395
sI317
S''
sI318
S'    def to_string(self):'
p2396
sI319
S'        """'
p2397
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2398
sg84
g48
sa(dp2399
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2400
sg62
(dp2401
S'self'
p2402
S'<gluon.template.TemplateParser object>'
p2403
sS'extend'
p2404
S'"\'annotate_layout.html\'"'
p2405
sS'self.extend'
p2406
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2407
ssg72
I756
sg73
(dp2408
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2409
sI752
S'            self.child_super_nodes.remove(node)'
p2410
sI753
S''
sI754
S'        # If we need to extend a template.'
p2411
sI755
S'        if extend:'
p2412
sI756
S'            self.extend(extend)'
p2413
sI757
S''
sI758
S'# We need this for integration with gluon'
p2414
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2415
sg84
g188
sa(dp2416
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2417
sg62
(dp2418
S'super_nodes'
p2419
S'[]'
p2420
sS'_super_nodes'
p2421
g114
ssg72
I486
sg73
(dp2422
I481
S'                           name=filename,'
p2423
sI482
S'                           context=self.context,'
p2424
sI483
S'                           path=self.path,'
p2425
sI484
S'                           writer=self.writer,'
p2426
sI485
S'                           delimiters=self.delimiters,'
p2427
sI486
S'                           _super_nodes=super_nodes)'
p2428
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2429
sI489
S'        # template.'
p2430
sI490
S'        buf = BlockNode('
p2431
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2432
sg84
g206
sa(dp2433
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2434
sg62
(dp2435
S'text'
p2436
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2437
sS'self'
p2438
S'<gluon.template.TemplateParser object>'
p2439
sS'self.parse'
p2440
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2441
ssg72
I316
sg73
(dp2442
I320
S'        Return the parsed template with correct indentation.'
p2443
sI311
S'        # This variable will hold a reference to every block'
p2444
sI312
S'        # that we come across in this template'
p2445
sI313
S'        self.blocks = {}'
p2446
sI314
S''
sI315
S'        # Begin parsing.'
p2447
sI316
S'        self.parse(text)'
p2448
sI317
S''
sI318
S'    def to_string(self):'
p2449
sI319
S'        """'
p2450
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2451
sg84
g48
sa(dp2452
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2453
sg62
(dp2454
S'self'
p2455
S'<gluon.template.TemplateParser object>'
p2456
sS'extend'
p2457
S'"\'annotate_layout.html\'"'
p2458
sS'self.extend'
p2459
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2460
ssg72
I756
sg73
(dp2461
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2462
sI752
S'            self.child_super_nodes.remove(node)'
p2463
sI753
S''
sI754
S'        # If we need to extend a template.'
p2464
sI755
S'        if extend:'
p2465
sI756
S'            self.extend(extend)'
p2466
sI757
S''
sI758
S'# We need this for integration with gluon'
p2467
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2468
sg84
g188
sa(dp2469
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2470
sg62
(dp2471
S'super_nodes'
p2472
S'[]'
p2473
sS'_super_nodes'
p2474
g114
ssg72
I486
sg73
(dp2475
I481
S'                           name=filename,'
p2476
sI482
S'                           context=self.context,'
p2477
sI483
S'                           path=self.path,'
p2478
sI484
S'                           writer=self.writer,'
p2479
sI485
S'                           delimiters=self.delimiters,'
p2480
sI486
S'                           _super_nodes=super_nodes)'
p2481
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2482
sI489
S'        # template.'
p2483
sI490
S'        buf = BlockNode('
p2484
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2485
sg84
g206
sa(dp2486
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2487
sg62
(dp2488
S'text'
p2489
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2490
sS'self'
p2491
S'<gluon.template.TemplateParser object>'
p2492
sS'self.parse'
p2493
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2494
ssg72
I316
sg73
(dp2495
I320
S'        Return the parsed template with correct indentation.'
p2496
sI311
S'        # This variable will hold a reference to every block'
p2497
sI312
S'        # that we come across in this template'
p2498
sI313
S'        self.blocks = {}'
p2499
sI314
S''
sI315
S'        # Begin parsing.'
p2500
sI316
S'        self.parse(text)'
p2501
sI317
S''
sI318
S'    def to_string(self):'
p2502
sI319
S'        """'
p2503
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2504
sg84
g48
sa(dp2505
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2506
sg62
(dp2507
S'self'
p2508
S'<gluon.template.TemplateParser object>'
p2509
sS'extend'
p2510
S'"\'annotate_layout.html\'"'
p2511
sS'self.extend'
p2512
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2513
ssg72
I756
sg73
(dp2514
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2515
sI752
S'            self.child_super_nodes.remove(node)'
p2516
sI753
S''
sI754
S'        # If we need to extend a template.'
p2517
sI755
S'        if extend:'
p2518
sI756
S'            self.extend(extend)'
p2519
sI757
S''
sI758
S'# We need this for integration with gluon'
p2520
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2521
sg84
g188
sa(dp2522
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2523
sg62
(dp2524
S'super_nodes'
p2525
S'[]'
p2526
sS'_super_nodes'
p2527
g114
ssg72
I486
sg73
(dp2528
I481
S'                           name=filename,'
p2529
sI482
S'                           context=self.context,'
p2530
sI483
S'                           path=self.path,'
p2531
sI484
S'                           writer=self.writer,'
p2532
sI485
S'                           delimiters=self.delimiters,'
p2533
sI486
S'                           _super_nodes=super_nodes)'
p2534
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2535
sI489
S'        # template.'
p2536
sI490
S'        buf = BlockNode('
p2537
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2538
sg84
g206
sa(dp2539
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2540
sg62
(dp2541
S'text'
p2542
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2543
sS'self'
p2544
S'<gluon.template.TemplateParser object>'
p2545
sS'self.parse'
p2546
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2547
ssg72
I316
sg73
(dp2548
I320
S'        Return the parsed template with correct indentation.'
p2549
sI311
S'        # This variable will hold a reference to every block'
p2550
sI312
S'        # that we come across in this template'
p2551
sI313
S'        self.blocks = {}'
p2552
sI314
S''
sI315
S'        # Begin parsing.'
p2553
sI316
S'        self.parse(text)'
p2554
sI317
S''
sI318
S'    def to_string(self):'
p2555
sI319
S'        """'
p2556
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2557
sg84
g48
sa(dp2558
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2559
sg62
(dp2560
S'self'
p2561
S'<gluon.template.TemplateParser object>'
p2562
sS'extend'
p2563
S'"\'annotate_layout.html\'"'
p2564
sS'self.extend'
p2565
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2566
ssg72
I756
sg73
(dp2567
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2568
sI752
S'            self.child_super_nodes.remove(node)'
p2569
sI753
S''
sI754
S'        # If we need to extend a template.'
p2570
sI755
S'        if extend:'
p2571
sI756
S'            self.extend(extend)'
p2572
sI757
S''
sI758
S'# We need this for integration with gluon'
p2573
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2574
sg84
g188
sa(dp2575
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2576
sg62
(dp2577
S'super_nodes'
p2578
S'[]'
p2579
sS'_super_nodes'
p2580
g114
ssg72
I486
sg73
(dp2581
I481
S'                           name=filename,'
p2582
sI482
S'                           context=self.context,'
p2583
sI483
S'                           path=self.path,'
p2584
sI484
S'                           writer=self.writer,'
p2585
sI485
S'                           delimiters=self.delimiters,'
p2586
sI486
S'                           _super_nodes=super_nodes)'
p2587
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2588
sI489
S'        # template.'
p2589
sI490
S'        buf = BlockNode('
p2590
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2591
sg84
g206
sa(dp2592
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2593
sg62
(dp2594
S'text'
p2595
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2596
sS'self'
p2597
S'<gluon.template.TemplateParser object>'
p2598
sS'self.parse'
p2599
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2600
ssg72
I316
sg73
(dp2601
I320
S'        Return the parsed template with correct indentation.'
p2602
sI311
S'        # This variable will hold a reference to every block'
p2603
sI312
S'        # that we come across in this template'
p2604
sI313
S'        self.blocks = {}'
p2605
sI314
S''
sI315
S'        # Begin parsing.'
p2606
sI316
S'        self.parse(text)'
p2607
sI317
S''
sI318
S'    def to_string(self):'
p2608
sI319
S'        """'
p2609
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2610
sg84
g48
sa(dp2611
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2612
sg62
(dp2613
S'self'
p2614
S'<gluon.template.TemplateParser object>'
p2615
sS'extend'
p2616
S'"\'annotate_layout.html\'"'
p2617
sS'self.extend'
p2618
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2619
ssg72
I756
sg73
(dp2620
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2621
sI752
S'            self.child_super_nodes.remove(node)'
p2622
sI753
S''
sI754
S'        # If we need to extend a template.'
p2623
sI755
S'        if extend:'
p2624
sI756
S'            self.extend(extend)'
p2625
sI757
S''
sI758
S'# We need this for integration with gluon'
p2626
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2627
sg84
g188
sa(dp2628
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2629
sg62
(dp2630
S'super_nodes'
p2631
S'[]'
p2632
sS'_super_nodes'
p2633
g114
ssg72
I486
sg73
(dp2634
I481
S'                           name=filename,'
p2635
sI482
S'                           context=self.context,'
p2636
sI483
S'                           path=self.path,'
p2637
sI484
S'                           writer=self.writer,'
p2638
sI485
S'                           delimiters=self.delimiters,'
p2639
sI486
S'                           _super_nodes=super_nodes)'
p2640
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2641
sI489
S'        # template.'
p2642
sI490
S'        buf = BlockNode('
p2643
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2644
sg84
g206
sa(dp2645
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2646
sg62
(dp2647
S'text'
p2648
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2649
sS'self'
p2650
S'<gluon.template.TemplateParser object>'
p2651
sS'self.parse'
p2652
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2653
ssg72
I316
sg73
(dp2654
I320
S'        Return the parsed template with correct indentation.'
p2655
sI311
S'        # This variable will hold a reference to every block'
p2656
sI312
S'        # that we come across in this template'
p2657
sI313
S'        self.blocks = {}'
p2658
sI314
S''
sI315
S'        # Begin parsing.'
p2659
sI316
S'        self.parse(text)'
p2660
sI317
S''
sI318
S'    def to_string(self):'
p2661
sI319
S'        """'
p2662
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2663
sg84
g48
sa(dp2664
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2665
sg62
(dp2666
S'self'
p2667
S'<gluon.template.TemplateParser object>'
p2668
sS'extend'
p2669
S'"\'annotate_layout.html\'"'
p2670
sS'self.extend'
p2671
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2672
ssg72
I756
sg73
(dp2673
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2674
sI752
S'            self.child_super_nodes.remove(node)'
p2675
sI753
S''
sI754
S'        # If we need to extend a template.'
p2676
sI755
S'        if extend:'
p2677
sI756
S'            self.extend(extend)'
p2678
sI757
S''
sI758
S'# We need this for integration with gluon'
p2679
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2680
sg84
g188
sa(dp2681
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2682
sg62
(dp2683
S'super_nodes'
p2684
S'[]'
p2685
sS'_super_nodes'
p2686
g114
ssg72
I486
sg73
(dp2687
I481
S'                           name=filename,'
p2688
sI482
S'                           context=self.context,'
p2689
sI483
S'                           path=self.path,'
p2690
sI484
S'                           writer=self.writer,'
p2691
sI485
S'                           delimiters=self.delimiters,'
p2692
sI486
S'                           _super_nodes=super_nodes)'
p2693
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2694
sI489
S'        # template.'
p2695
sI490
S'        buf = BlockNode('
p2696
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2697
sg84
g206
sa(dp2698
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2699
sg62
(dp2700
S'text'
p2701
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2702
sS'self'
p2703
S'<gluon.template.TemplateParser object>'
p2704
sS'self.parse'
p2705
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2706
ssg72
I316
sg73
(dp2707
I320
S'        Return the parsed template with correct indentation.'
p2708
sI311
S'        # This variable will hold a reference to every block'
p2709
sI312
S'        # that we come across in this template'
p2710
sI313
S'        self.blocks = {}'
p2711
sI314
S''
sI315
S'        # Begin parsing.'
p2712
sI316
S'        self.parse(text)'
p2713
sI317
S''
sI318
S'    def to_string(self):'
p2714
sI319
S'        """'
p2715
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2716
sg84
g48
sa(dp2717
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2718
sg62
(dp2719
S'self'
p2720
S'<gluon.template.TemplateParser object>'
p2721
sS'extend'
p2722
S'"\'annotate_layout.html\'"'
p2723
sS'self.extend'
p2724
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2725
ssg72
I756
sg73
(dp2726
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2727
sI752
S'            self.child_super_nodes.remove(node)'
p2728
sI753
S''
sI754
S'        # If we need to extend a template.'
p2729
sI755
S'        if extend:'
p2730
sI756
S'            self.extend(extend)'
p2731
sI757
S''
sI758
S'# We need this for integration with gluon'
p2732
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2733
sg84
g188
sa(dp2734
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2735
sg62
(dp2736
S'super_nodes'
p2737
S'[]'
p2738
sS'_super_nodes'
p2739
g114
ssg72
I486
sg73
(dp2740
I481
S'                           name=filename,'
p2741
sI482
S'                           context=self.context,'
p2742
sI483
S'                           path=self.path,'
p2743
sI484
S'                           writer=self.writer,'
p2744
sI485
S'                           delimiters=self.delimiters,'
p2745
sI486
S'                           _super_nodes=super_nodes)'
p2746
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2747
sI489
S'        # template.'
p2748
sI490
S'        buf = BlockNode('
p2749
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2750
sg84
g206
sa(dp2751
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2752
sg62
(dp2753
S'text'
p2754
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2755
sS'self'
p2756
S'<gluon.template.TemplateParser object>'
p2757
sS'self.parse'
p2758
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2759
ssg72
I316
sg73
(dp2760
I320
S'        Return the parsed template with correct indentation.'
p2761
sI311
S'        # This variable will hold a reference to every block'
p2762
sI312
S'        # that we come across in this template'
p2763
sI313
S'        self.blocks = {}'
p2764
sI314
S''
sI315
S'        # Begin parsing.'
p2765
sI316
S'        self.parse(text)'
p2766
sI317
S''
sI318
S'    def to_string(self):'
p2767
sI319
S'        """'
p2768
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2769
sg84
g48
sa(dp2770
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2771
sg62
(dp2772
S'self'
p2773
S'<gluon.template.TemplateParser object>'
p2774
sS'extend'
p2775
S'"\'annotate_layout.html\'"'
p2776
sS'self.extend'
p2777
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2778
ssg72
I756
sg73
(dp2779
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2780
sI752
S'            self.child_super_nodes.remove(node)'
p2781
sI753
S''
sI754
S'        # If we need to extend a template.'
p2782
sI755
S'        if extend:'
p2783
sI756
S'            self.extend(extend)'
p2784
sI757
S''
sI758
S'# We need this for integration with gluon'
p2785
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2786
sg84
g188
sa(dp2787
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2788
sg62
(dp2789
S'super_nodes'
p2790
S'[]'
p2791
sS'_super_nodes'
p2792
g114
ssg72
I486
sg73
(dp2793
I481
S'                           name=filename,'
p2794
sI482
S'                           context=self.context,'
p2795
sI483
S'                           path=self.path,'
p2796
sI484
S'                           writer=self.writer,'
p2797
sI485
S'                           delimiters=self.delimiters,'
p2798
sI486
S'                           _super_nodes=super_nodes)'
p2799
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2800
sI489
S'        # template.'
p2801
sI490
S'        buf = BlockNode('
p2802
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2803
sg84
g206
sa(dp2804
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2805
sg62
(dp2806
S'text'
p2807
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2808
sS'self'
p2809
S'<gluon.template.TemplateParser object>'
p2810
sS'self.parse'
p2811
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2812
ssg72
I316
sg73
(dp2813
I320
S'        Return the parsed template with correct indentation.'
p2814
sI311
S'        # This variable will hold a reference to every block'
p2815
sI312
S'        # that we come across in this template'
p2816
sI313
S'        self.blocks = {}'
p2817
sI314
S''
sI315
S'        # Begin parsing.'
p2818
sI316
S'        self.parse(text)'
p2819
sI317
S''
sI318
S'    def to_string(self):'
p2820
sI319
S'        """'
p2821
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2822
sg84
g48
sa(dp2823
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2824
sg62
(dp2825
S'self'
p2826
S'<gluon.template.TemplateParser object>'
p2827
sS'extend'
p2828
S'"\'annotate_layout.html\'"'
p2829
sS'self.extend'
p2830
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2831
ssg72
I756
sg73
(dp2832
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2833
sI752
S'            self.child_super_nodes.remove(node)'
p2834
sI753
S''
sI754
S'        # If we need to extend a template.'
p2835
sI755
S'        if extend:'
p2836
sI756
S'            self.extend(extend)'
p2837
sI757
S''
sI758
S'# We need this for integration with gluon'
p2838
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2839
sg84
g188
sa(dp2840
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2841
sg62
(dp2842
S'super_nodes'
p2843
S'[]'
p2844
sS'_super_nodes'
p2845
g114
ssg72
I486
sg73
(dp2846
I481
S'                           name=filename,'
p2847
sI482
S'                           context=self.context,'
p2848
sI483
S'                           path=self.path,'
p2849
sI484
S'                           writer=self.writer,'
p2850
sI485
S'                           delimiters=self.delimiters,'
p2851
sI486
S'                           _super_nodes=super_nodes)'
p2852
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2853
sI489
S'        # template.'
p2854
sI490
S'        buf = BlockNode('
p2855
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2856
sg84
g206
sa(dp2857
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2858
sg62
(dp2859
S'text'
p2860
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2861
sS'self'
p2862
S'<gluon.template.TemplateParser object>'
p2863
sS'self.parse'
p2864
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2865
ssg72
I316
sg73
(dp2866
I320
S'        Return the parsed template with correct indentation.'
p2867
sI311
S'        # This variable will hold a reference to every block'
p2868
sI312
S'        # that we come across in this template'
p2869
sI313
S'        self.blocks = {}'
p2870
sI314
S''
sI315
S'        # Begin parsing.'
p2871
sI316
S'        self.parse(text)'
p2872
sI317
S''
sI318
S'    def to_string(self):'
p2873
sI319
S'        """'
p2874
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2875
sg84
g48
sa(dp2876
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2877
sg62
(dp2878
S'self'
p2879
S'<gluon.template.TemplateParser object>'
p2880
sS'extend'
p2881
S'"\'annotate_layout.html\'"'
p2882
sS'self.extend'
p2883
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2884
ssg72
I756
sg73
(dp2885
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2886
sI752
S'            self.child_super_nodes.remove(node)'
p2887
sI753
S''
sI754
S'        # If we need to extend a template.'
p2888
sI755
S'        if extend:'
p2889
sI756
S'            self.extend(extend)'
p2890
sI757
S''
sI758
S'# We need this for integration with gluon'
p2891
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2892
sg84
g188
sa(dp2893
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2894
sg62
(dp2895
S'super_nodes'
p2896
S'[]'
p2897
sS'_super_nodes'
p2898
g114
ssg72
I486
sg73
(dp2899
I481
S'                           name=filename,'
p2900
sI482
S'                           context=self.context,'
p2901
sI483
S'                           path=self.path,'
p2902
sI484
S'                           writer=self.writer,'
p2903
sI485
S'                           delimiters=self.delimiters,'
p2904
sI486
S'                           _super_nodes=super_nodes)'
p2905
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2906
sI489
S'        # template.'
p2907
sI490
S'        buf = BlockNode('
p2908
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2909
sg84
g206
sa(dp2910
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2911
sg62
(dp2912
S'text'
p2913
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2914
sS'self'
p2915
S'<gluon.template.TemplateParser object>'
p2916
sS'self.parse'
p2917
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2918
ssg72
I316
sg73
(dp2919
I320
S'        Return the parsed template with correct indentation.'
p2920
sI311
S'        # This variable will hold a reference to every block'
p2921
sI312
S'        # that we come across in this template'
p2922
sI313
S'        self.blocks = {}'
p2923
sI314
S''
sI315
S'        # Begin parsing.'
p2924
sI316
S'        self.parse(text)'
p2925
sI317
S''
sI318
S'    def to_string(self):'
p2926
sI319
S'        """'
p2927
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2928
sg84
g48
sa(dp2929
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2930
sg62
(dp2931
S'self'
p2932
S'<gluon.template.TemplateParser object>'
p2933
sS'extend'
p2934
S'"\'annotate_layout.html\'"'
p2935
sS'self.extend'
p2936
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2937
ssg72
I756
sg73
(dp2938
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2939
sI752
S'            self.child_super_nodes.remove(node)'
p2940
sI753
S''
sI754
S'        # If we need to extend a template.'
p2941
sI755
S'        if extend:'
p2942
sI756
S'            self.extend(extend)'
p2943
sI757
S''
sI758
S'# We need this for integration with gluon'
p2944
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2945
sg84
g188
sa(dp2946
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2947
sg62
(dp2948
S'super_nodes'
p2949
S'[]'
p2950
sS'_super_nodes'
p2951
g114
ssg72
I486
sg73
(dp2952
I481
S'                           name=filename,'
p2953
sI482
S'                           context=self.context,'
p2954
sI483
S'                           path=self.path,'
p2955
sI484
S'                           writer=self.writer,'
p2956
sI485
S'                           delimiters=self.delimiters,'
p2957
sI486
S'                           _super_nodes=super_nodes)'
p2958
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p2959
sI489
S'        # template.'
p2960
sI490
S'        buf = BlockNode('
p2961
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p2962
sg84
g206
sa(dp2963
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2964
sg62
(dp2965
S'text'
p2966
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p2967
sS'self'
p2968
S'<gluon.template.TemplateParser object>'
p2969
sS'self.parse'
p2970
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p2971
ssg72
I316
sg73
(dp2972
I320
S'        Return the parsed template with correct indentation.'
p2973
sI311
S'        # This variable will hold a reference to every block'
p2974
sI312
S'        # that we come across in this template'
p2975
sI313
S'        self.blocks = {}'
p2976
sI314
S''
sI315
S'        # Begin parsing.'
p2977
sI316
S'        self.parse(text)'
p2978
sI317
S''
sI318
S'    def to_string(self):'
p2979
sI319
S'        """'
p2980
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p2981
sg84
g48
sa(dp2982
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p2983
sg62
(dp2984
S'self'
p2985
S'<gluon.template.TemplateParser object>'
p2986
sS'extend'
p2987
S'"\'annotate_layout.html\'"'
p2988
sS'self.extend'
p2989
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p2990
ssg72
I756
sg73
(dp2991
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p2992
sI752
S'            self.child_super_nodes.remove(node)'
p2993
sI753
S''
sI754
S'        # If we need to extend a template.'
p2994
sI755
S'        if extend:'
p2995
sI756
S'            self.extend(extend)'
p2996
sI757
S''
sI758
S'# We need this for integration with gluon'
p2997
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p2998
sg84
g188
sa(dp2999
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3000
sg62
(dp3001
S'super_nodes'
p3002
S'[]'
p3003
sS'_super_nodes'
p3004
g114
ssg72
I486
sg73
(dp3005
I481
S'                           name=filename,'
p3006
sI482
S'                           context=self.context,'
p3007
sI483
S'                           path=self.path,'
p3008
sI484
S'                           writer=self.writer,'
p3009
sI485
S'                           delimiters=self.delimiters,'
p3010
sI486
S'                           _super_nodes=super_nodes)'
p3011
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3012
sI489
S'        # template.'
p3013
sI490
S'        buf = BlockNode('
p3014
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3015
sg84
g206
sa(dp3016
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3017
sg62
(dp3018
S'text'
p3019
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3020
sS'self'
p3021
S'<gluon.template.TemplateParser object>'
p3022
sS'self.parse'
p3023
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3024
ssg72
I316
sg73
(dp3025
I320
S'        Return the parsed template with correct indentation.'
p3026
sI311
S'        # This variable will hold a reference to every block'
p3027
sI312
S'        # that we come across in this template'
p3028
sI313
S'        self.blocks = {}'
p3029
sI314
S''
sI315
S'        # Begin parsing.'
p3030
sI316
S'        self.parse(text)'
p3031
sI317
S''
sI318
S'    def to_string(self):'
p3032
sI319
S'        """'
p3033
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3034
sg84
g48
sa(dp3035
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3036
sg62
(dp3037
S'self'
p3038
S'<gluon.template.TemplateParser object>'
p3039
sS'extend'
p3040
S'"\'annotate_layout.html\'"'
p3041
sS'self.extend'
p3042
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3043
ssg72
I756
sg73
(dp3044
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3045
sI752
S'            self.child_super_nodes.remove(node)'
p3046
sI753
S''
sI754
S'        # If we need to extend a template.'
p3047
sI755
S'        if extend:'
p3048
sI756
S'            self.extend(extend)'
p3049
sI757
S''
sI758
S'# We need this for integration with gluon'
p3050
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3051
sg84
g188
sa(dp3052
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3053
sg62
(dp3054
S'super_nodes'
p3055
S'[]'
p3056
sS'_super_nodes'
p3057
g114
ssg72
I486
sg73
(dp3058
I481
S'                           name=filename,'
p3059
sI482
S'                           context=self.context,'
p3060
sI483
S'                           path=self.path,'
p3061
sI484
S'                           writer=self.writer,'
p3062
sI485
S'                           delimiters=self.delimiters,'
p3063
sI486
S'                           _super_nodes=super_nodes)'
p3064
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3065
sI489
S'        # template.'
p3066
sI490
S'        buf = BlockNode('
p3067
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3068
sg84
g206
sa(dp3069
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3070
sg62
(dp3071
S'text'
p3072
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3073
sS'self'
p3074
S'<gluon.template.TemplateParser object>'
p3075
sS'self.parse'
p3076
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3077
ssg72
I316
sg73
(dp3078
I320
S'        Return the parsed template with correct indentation.'
p3079
sI311
S'        # This variable will hold a reference to every block'
p3080
sI312
S'        # that we come across in this template'
p3081
sI313
S'        self.blocks = {}'
p3082
sI314
S''
sI315
S'        # Begin parsing.'
p3083
sI316
S'        self.parse(text)'
p3084
sI317
S''
sI318
S'    def to_string(self):'
p3085
sI319
S'        """'
p3086
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3087
sg84
g48
sa(dp3088
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3089
sg62
(dp3090
S'self'
p3091
S'<gluon.template.TemplateParser object>'
p3092
sS'extend'
p3093
S'"\'annotate_layout.html\'"'
p3094
sS'self.extend'
p3095
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3096
ssg72
I756
sg73
(dp3097
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3098
sI752
S'            self.child_super_nodes.remove(node)'
p3099
sI753
S''
sI754
S'        # If we need to extend a template.'
p3100
sI755
S'        if extend:'
p3101
sI756
S'            self.extend(extend)'
p3102
sI757
S''
sI758
S'# We need this for integration with gluon'
p3103
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3104
sg84
g188
sa(dp3105
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3106
sg62
(dp3107
S'super_nodes'
p3108
S'[]'
p3109
sS'_super_nodes'
p3110
g114
ssg72
I486
sg73
(dp3111
I481
S'                           name=filename,'
p3112
sI482
S'                           context=self.context,'
p3113
sI483
S'                           path=self.path,'
p3114
sI484
S'                           writer=self.writer,'
p3115
sI485
S'                           delimiters=self.delimiters,'
p3116
sI486
S'                           _super_nodes=super_nodes)'
p3117
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3118
sI489
S'        # template.'
p3119
sI490
S'        buf = BlockNode('
p3120
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3121
sg84
g206
sa(dp3122
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3123
sg62
(dp3124
S'text'
p3125
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3126
sS'self'
p3127
S'<gluon.template.TemplateParser object>'
p3128
sS'self.parse'
p3129
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3130
ssg72
I316
sg73
(dp3131
I320
S'        Return the parsed template with correct indentation.'
p3132
sI311
S'        # This variable will hold a reference to every block'
p3133
sI312
S'        # that we come across in this template'
p3134
sI313
S'        self.blocks = {}'
p3135
sI314
S''
sI315
S'        # Begin parsing.'
p3136
sI316
S'        self.parse(text)'
p3137
sI317
S''
sI318
S'    def to_string(self):'
p3138
sI319
S'        """'
p3139
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3140
sg84
g48
sa(dp3141
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3142
sg62
(dp3143
S'self'
p3144
S'<gluon.template.TemplateParser object>'
p3145
sS'extend'
p3146
S'"\'annotate_layout.html\'"'
p3147
sS'self.extend'
p3148
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3149
ssg72
I756
sg73
(dp3150
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3151
sI752
S'            self.child_super_nodes.remove(node)'
p3152
sI753
S''
sI754
S'        # If we need to extend a template.'
p3153
sI755
S'        if extend:'
p3154
sI756
S'            self.extend(extend)'
p3155
sI757
S''
sI758
S'# We need this for integration with gluon'
p3156
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3157
sg84
g188
sa(dp3158
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3159
sg62
(dp3160
S'super_nodes'
p3161
S'[]'
p3162
sS'_super_nodes'
p3163
g114
ssg72
I486
sg73
(dp3164
I481
S'                           name=filename,'
p3165
sI482
S'                           context=self.context,'
p3166
sI483
S'                           path=self.path,'
p3167
sI484
S'                           writer=self.writer,'
p3168
sI485
S'                           delimiters=self.delimiters,'
p3169
sI486
S'                           _super_nodes=super_nodes)'
p3170
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3171
sI489
S'        # template.'
p3172
sI490
S'        buf = BlockNode('
p3173
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3174
sg84
g206
sa(dp3175
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3176
sg62
(dp3177
S'text'
p3178
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3179
sS'self'
p3180
S'<gluon.template.TemplateParser object>'
p3181
sS'self.parse'
p3182
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3183
ssg72
I316
sg73
(dp3184
I320
S'        Return the parsed template with correct indentation.'
p3185
sI311
S'        # This variable will hold a reference to every block'
p3186
sI312
S'        # that we come across in this template'
p3187
sI313
S'        self.blocks = {}'
p3188
sI314
S''
sI315
S'        # Begin parsing.'
p3189
sI316
S'        self.parse(text)'
p3190
sI317
S''
sI318
S'    def to_string(self):'
p3191
sI319
S'        """'
p3192
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3193
sg84
g48
sa(dp3194
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3195
sg62
(dp3196
S'self'
p3197
S'<gluon.template.TemplateParser object>'
p3198
sS'extend'
p3199
S'"\'annotate_layout.html\'"'
p3200
sS'self.extend'
p3201
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3202
ssg72
I756
sg73
(dp3203
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3204
sI752
S'            self.child_super_nodes.remove(node)'
p3205
sI753
S''
sI754
S'        # If we need to extend a template.'
p3206
sI755
S'        if extend:'
p3207
sI756
S'            self.extend(extend)'
p3208
sI757
S''
sI758
S'# We need this for integration with gluon'
p3209
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3210
sg84
g188
sa(dp3211
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3212
sg62
(dp3213
S'super_nodes'
p3214
S'[]'
p3215
sS'_super_nodes'
p3216
g114
ssg72
I486
sg73
(dp3217
I481
S'                           name=filename,'
p3218
sI482
S'                           context=self.context,'
p3219
sI483
S'                           path=self.path,'
p3220
sI484
S'                           writer=self.writer,'
p3221
sI485
S'                           delimiters=self.delimiters,'
p3222
sI486
S'                           _super_nodes=super_nodes)'
p3223
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3224
sI489
S'        # template.'
p3225
sI490
S'        buf = BlockNode('
p3226
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3227
sg84
g206
sa(dp3228
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3229
sg62
(dp3230
S'text'
p3231
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3232
sS'self'
p3233
S'<gluon.template.TemplateParser object>'
p3234
sS'self.parse'
p3235
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3236
ssg72
I316
sg73
(dp3237
I320
S'        Return the parsed template with correct indentation.'
p3238
sI311
S'        # This variable will hold a reference to every block'
p3239
sI312
S'        # that we come across in this template'
p3240
sI313
S'        self.blocks = {}'
p3241
sI314
S''
sI315
S'        # Begin parsing.'
p3242
sI316
S'        self.parse(text)'
p3243
sI317
S''
sI318
S'    def to_string(self):'
p3244
sI319
S'        """'
p3245
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3246
sg84
g48
sa(dp3247
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3248
sg62
(dp3249
S'self'
p3250
S'<gluon.template.TemplateParser object>'
p3251
sS'extend'
p3252
S'"\'annotate_layout.html\'"'
p3253
sS'self.extend'
p3254
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3255
ssg72
I756
sg73
(dp3256
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3257
sI752
S'            self.child_super_nodes.remove(node)'
p3258
sI753
S''
sI754
S'        # If we need to extend a template.'
p3259
sI755
S'        if extend:'
p3260
sI756
S'            self.extend(extend)'
p3261
sI757
S''
sI758
S'# We need this for integration with gluon'
p3262
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3263
sg84
g188
sa(dp3264
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3265
sg62
(dp3266
S'super_nodes'
p3267
S'[]'
p3268
sS'_super_nodes'
p3269
g114
ssg72
I486
sg73
(dp3270
I481
S'                           name=filename,'
p3271
sI482
S'                           context=self.context,'
p3272
sI483
S'                           path=self.path,'
p3273
sI484
S'                           writer=self.writer,'
p3274
sI485
S'                           delimiters=self.delimiters,'
p3275
sI486
S'                           _super_nodes=super_nodes)'
p3276
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3277
sI489
S'        # template.'
p3278
sI490
S'        buf = BlockNode('
p3279
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3280
sg84
g206
sa(dp3281
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3282
sg62
(dp3283
S'text'
p3284
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3285
sS'self'
p3286
S'<gluon.template.TemplateParser object>'
p3287
sS'self.parse'
p3288
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3289
ssg72
I316
sg73
(dp3290
I320
S'        Return the parsed template with correct indentation.'
p3291
sI311
S'        # This variable will hold a reference to every block'
p3292
sI312
S'        # that we come across in this template'
p3293
sI313
S'        self.blocks = {}'
p3294
sI314
S''
sI315
S'        # Begin parsing.'
p3295
sI316
S'        self.parse(text)'
p3296
sI317
S''
sI318
S'    def to_string(self):'
p3297
sI319
S'        """'
p3298
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3299
sg84
g48
sa(dp3300
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3301
sg62
(dp3302
S'self'
p3303
S'<gluon.template.TemplateParser object>'
p3304
sS'extend'
p3305
S'"\'annotate_layout.html\'"'
p3306
sS'self.extend'
p3307
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3308
ssg72
I756
sg73
(dp3309
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3310
sI752
S'            self.child_super_nodes.remove(node)'
p3311
sI753
S''
sI754
S'        # If we need to extend a template.'
p3312
sI755
S'        if extend:'
p3313
sI756
S'            self.extend(extend)'
p3314
sI757
S''
sI758
S'# We need this for integration with gluon'
p3315
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3316
sg84
g188
sa(dp3317
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3318
sg62
(dp3319
S'super_nodes'
p3320
S'[]'
p3321
sS'_super_nodes'
p3322
g114
ssg72
I486
sg73
(dp3323
I481
S'                           name=filename,'
p3324
sI482
S'                           context=self.context,'
p3325
sI483
S'                           path=self.path,'
p3326
sI484
S'                           writer=self.writer,'
p3327
sI485
S'                           delimiters=self.delimiters,'
p3328
sI486
S'                           _super_nodes=super_nodes)'
p3329
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3330
sI489
S'        # template.'
p3331
sI490
S'        buf = BlockNode('
p3332
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3333
sg84
g206
sa(dp3334
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3335
sg62
(dp3336
S'text'
p3337
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3338
sS'self'
p3339
S'<gluon.template.TemplateParser object>'
p3340
sS'self.parse'
p3341
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3342
ssg72
I316
sg73
(dp3343
I320
S'        Return the parsed template with correct indentation.'
p3344
sI311
S'        # This variable will hold a reference to every block'
p3345
sI312
S'        # that we come across in this template'
p3346
sI313
S'        self.blocks = {}'
p3347
sI314
S''
sI315
S'        # Begin parsing.'
p3348
sI316
S'        self.parse(text)'
p3349
sI317
S''
sI318
S'    def to_string(self):'
p3350
sI319
S'        """'
p3351
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3352
sg84
g48
sa(dp3353
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3354
sg62
(dp3355
S'self'
p3356
S'<gluon.template.TemplateParser object>'
p3357
sS'extend'
p3358
S'"\'annotate_layout.html\'"'
p3359
sS'self.extend'
p3360
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3361
ssg72
I756
sg73
(dp3362
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3363
sI752
S'            self.child_super_nodes.remove(node)'
p3364
sI753
S''
sI754
S'        # If we need to extend a template.'
p3365
sI755
S'        if extend:'
p3366
sI756
S'            self.extend(extend)'
p3367
sI757
S''
sI758
S'# We need this for integration with gluon'
p3368
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3369
sg84
g188
sa(dp3370
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3371
sg62
(dp3372
S'super_nodes'
p3373
S'[]'
p3374
sS'_super_nodes'
p3375
g114
ssg72
I486
sg73
(dp3376
I481
S'                           name=filename,'
p3377
sI482
S'                           context=self.context,'
p3378
sI483
S'                           path=self.path,'
p3379
sI484
S'                           writer=self.writer,'
p3380
sI485
S'                           delimiters=self.delimiters,'
p3381
sI486
S'                           _super_nodes=super_nodes)'
p3382
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3383
sI489
S'        # template.'
p3384
sI490
S'        buf = BlockNode('
p3385
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3386
sg84
g206
sa(dp3387
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3388
sg62
(dp3389
S'text'
p3390
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3391
sS'self'
p3392
S'<gluon.template.TemplateParser object>'
p3393
sS'self.parse'
p3394
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3395
ssg72
I316
sg73
(dp3396
I320
S'        Return the parsed template with correct indentation.'
p3397
sI311
S'        # This variable will hold a reference to every block'
p3398
sI312
S'        # that we come across in this template'
p3399
sI313
S'        self.blocks = {}'
p3400
sI314
S''
sI315
S'        # Begin parsing.'
p3401
sI316
S'        self.parse(text)'
p3402
sI317
S''
sI318
S'    def to_string(self):'
p3403
sI319
S'        """'
p3404
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3405
sg84
g48
sa(dp3406
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3407
sg62
(dp3408
S'self'
p3409
S'<gluon.template.TemplateParser object>'
p3410
sS'extend'
p3411
S'"\'annotate_layout.html\'"'
p3412
sS'self.extend'
p3413
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3414
ssg72
I756
sg73
(dp3415
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3416
sI752
S'            self.child_super_nodes.remove(node)'
p3417
sI753
S''
sI754
S'        # If we need to extend a template.'
p3418
sI755
S'        if extend:'
p3419
sI756
S'            self.extend(extend)'
p3420
sI757
S''
sI758
S'# We need this for integration with gluon'
p3421
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3422
sg84
g188
sa(dp3423
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3424
sg62
(dp3425
S'super_nodes'
p3426
S'[]'
p3427
sS'_super_nodes'
p3428
g114
ssg72
I486
sg73
(dp3429
I481
S'                           name=filename,'
p3430
sI482
S'                           context=self.context,'
p3431
sI483
S'                           path=self.path,'
p3432
sI484
S'                           writer=self.writer,'
p3433
sI485
S'                           delimiters=self.delimiters,'
p3434
sI486
S'                           _super_nodes=super_nodes)'
p3435
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3436
sI489
S'        # template.'
p3437
sI490
S'        buf = BlockNode('
p3438
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3439
sg84
g206
sa(dp3440
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3441
sg62
(dp3442
S'text'
p3443
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3444
sS'self'
p3445
S'<gluon.template.TemplateParser object>'
p3446
sS'self.parse'
p3447
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3448
ssg72
I316
sg73
(dp3449
I320
S'        Return the parsed template with correct indentation.'
p3450
sI311
S'        # This variable will hold a reference to every block'
p3451
sI312
S'        # that we come across in this template'
p3452
sI313
S'        self.blocks = {}'
p3453
sI314
S''
sI315
S'        # Begin parsing.'
p3454
sI316
S'        self.parse(text)'
p3455
sI317
S''
sI318
S'    def to_string(self):'
p3456
sI319
S'        """'
p3457
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3458
sg84
g48
sa(dp3459
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3460
sg62
(dp3461
S'self'
p3462
S'<gluon.template.TemplateParser object>'
p3463
sS'extend'
p3464
S'"\'annotate_layout.html\'"'
p3465
sS'self.extend'
p3466
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3467
ssg72
I756
sg73
(dp3468
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3469
sI752
S'            self.child_super_nodes.remove(node)'
p3470
sI753
S''
sI754
S'        # If we need to extend a template.'
p3471
sI755
S'        if extend:'
p3472
sI756
S'            self.extend(extend)'
p3473
sI757
S''
sI758
S'# We need this for integration with gluon'
p3474
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3475
sg84
g188
sa(dp3476
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3477
sg62
(dp3478
S'super_nodes'
p3479
S'[]'
p3480
sS'_super_nodes'
p3481
g114
ssg72
I486
sg73
(dp3482
I481
S'                           name=filename,'
p3483
sI482
S'                           context=self.context,'
p3484
sI483
S'                           path=self.path,'
p3485
sI484
S'                           writer=self.writer,'
p3486
sI485
S'                           delimiters=self.delimiters,'
p3487
sI486
S'                           _super_nodes=super_nodes)'
p3488
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3489
sI489
S'        # template.'
p3490
sI490
S'        buf = BlockNode('
p3491
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3492
sg84
g206
sa(dp3493
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3494
sg62
(dp3495
S'text'
p3496
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3497
sS'self'
p3498
S'<gluon.template.TemplateParser object>'
p3499
sS'self.parse'
p3500
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3501
ssg72
I316
sg73
(dp3502
I320
S'        Return the parsed template with correct indentation.'
p3503
sI311
S'        # This variable will hold a reference to every block'
p3504
sI312
S'        # that we come across in this template'
p3505
sI313
S'        self.blocks = {}'
p3506
sI314
S''
sI315
S'        # Begin parsing.'
p3507
sI316
S'        self.parse(text)'
p3508
sI317
S''
sI318
S'    def to_string(self):'
p3509
sI319
S'        """'
p3510
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3511
sg84
g48
sa(dp3512
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3513
sg62
(dp3514
S'self'
p3515
S'<gluon.template.TemplateParser object>'
p3516
sS'extend'
p3517
S'"\'annotate_layout.html\'"'
p3518
sS'self.extend'
p3519
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3520
ssg72
I756
sg73
(dp3521
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3522
sI752
S'            self.child_super_nodes.remove(node)'
p3523
sI753
S''
sI754
S'        # If we need to extend a template.'
p3524
sI755
S'        if extend:'
p3525
sI756
S'            self.extend(extend)'
p3526
sI757
S''
sI758
S'# We need this for integration with gluon'
p3527
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3528
sg84
g188
sa(dp3529
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3530
sg62
(dp3531
S'super_nodes'
p3532
S'[]'
p3533
sS'_super_nodes'
p3534
g114
ssg72
I486
sg73
(dp3535
I481
S'                           name=filename,'
p3536
sI482
S'                           context=self.context,'
p3537
sI483
S'                           path=self.path,'
p3538
sI484
S'                           writer=self.writer,'
p3539
sI485
S'                           delimiters=self.delimiters,'
p3540
sI486
S'                           _super_nodes=super_nodes)'
p3541
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3542
sI489
S'        # template.'
p3543
sI490
S'        buf = BlockNode('
p3544
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3545
sg84
g206
sa(dp3546
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3547
sg62
(dp3548
S'text'
p3549
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3550
sS'self'
p3551
S'<gluon.template.TemplateParser object>'
p3552
sS'self.parse'
p3553
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3554
ssg72
I316
sg73
(dp3555
I320
S'        Return the parsed template with correct indentation.'
p3556
sI311
S'        # This variable will hold a reference to every block'
p3557
sI312
S'        # that we come across in this template'
p3558
sI313
S'        self.blocks = {}'
p3559
sI314
S''
sI315
S'        # Begin parsing.'
p3560
sI316
S'        self.parse(text)'
p3561
sI317
S''
sI318
S'    def to_string(self):'
p3562
sI319
S'        """'
p3563
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3564
sg84
g48
sa(dp3565
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3566
sg62
(dp3567
S'self'
p3568
S'<gluon.template.TemplateParser object>'
p3569
sS'extend'
p3570
S'"\'annotate_layout.html\'"'
p3571
sS'self.extend'
p3572
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3573
ssg72
I756
sg73
(dp3574
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3575
sI752
S'            self.child_super_nodes.remove(node)'
p3576
sI753
S''
sI754
S'        # If we need to extend a template.'
p3577
sI755
S'        if extend:'
p3578
sI756
S'            self.extend(extend)'
p3579
sI757
S''
sI758
S'# We need this for integration with gluon'
p3580
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3581
sg84
g188
sa(dp3582
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3583
sg62
(dp3584
S'super_nodes'
p3585
S'[]'
p3586
sS'_super_nodes'
p3587
g114
ssg72
I486
sg73
(dp3588
I481
S'                           name=filename,'
p3589
sI482
S'                           context=self.context,'
p3590
sI483
S'                           path=self.path,'
p3591
sI484
S'                           writer=self.writer,'
p3592
sI485
S'                           delimiters=self.delimiters,'
p3593
sI486
S'                           _super_nodes=super_nodes)'
p3594
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3595
sI489
S'        # template.'
p3596
sI490
S'        buf = BlockNode('
p3597
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3598
sg84
g206
sa(dp3599
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3600
sg62
(dp3601
S'text'
p3602
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3603
sS'self'
p3604
S'<gluon.template.TemplateParser object>'
p3605
sS'self.parse'
p3606
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3607
ssg72
I316
sg73
(dp3608
I320
S'        Return the parsed template with correct indentation.'
p3609
sI311
S'        # This variable will hold a reference to every block'
p3610
sI312
S'        # that we come across in this template'
p3611
sI313
S'        self.blocks = {}'
p3612
sI314
S''
sI315
S'        # Begin parsing.'
p3613
sI316
S'        self.parse(text)'
p3614
sI317
S''
sI318
S'    def to_string(self):'
p3615
sI319
S'        """'
p3616
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3617
sg84
g48
sa(dp3618
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3619
sg62
(dp3620
S'self'
p3621
S'<gluon.template.TemplateParser object>'
p3622
sS'extend'
p3623
S'"\'annotate_layout.html\'"'
p3624
sS'self.extend'
p3625
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3626
ssg72
I756
sg73
(dp3627
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3628
sI752
S'            self.child_super_nodes.remove(node)'
p3629
sI753
S''
sI754
S'        # If we need to extend a template.'
p3630
sI755
S'        if extend:'
p3631
sI756
S'            self.extend(extend)'
p3632
sI757
S''
sI758
S'# We need this for integration with gluon'
p3633
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3634
sg84
g188
sa(dp3635
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3636
sg62
(dp3637
S'super_nodes'
p3638
S'[]'
p3639
sS'_super_nodes'
p3640
g114
ssg72
I486
sg73
(dp3641
I481
S'                           name=filename,'
p3642
sI482
S'                           context=self.context,'
p3643
sI483
S'                           path=self.path,'
p3644
sI484
S'                           writer=self.writer,'
p3645
sI485
S'                           delimiters=self.delimiters,'
p3646
sI486
S'                           _super_nodes=super_nodes)'
p3647
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3648
sI489
S'        # template.'
p3649
sI490
S'        buf = BlockNode('
p3650
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3651
sg84
g206
sa(dp3652
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3653
sg62
(dp3654
S'text'
p3655
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3656
sS'self'
p3657
S'<gluon.template.TemplateParser object>'
p3658
sS'self.parse'
p3659
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3660
ssg72
I316
sg73
(dp3661
I320
S'        Return the parsed template with correct indentation.'
p3662
sI311
S'        # This variable will hold a reference to every block'
p3663
sI312
S'        # that we come across in this template'
p3664
sI313
S'        self.blocks = {}'
p3665
sI314
S''
sI315
S'        # Begin parsing.'
p3666
sI316
S'        self.parse(text)'
p3667
sI317
S''
sI318
S'    def to_string(self):'
p3668
sI319
S'        """'
p3669
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3670
sg84
g48
sa(dp3671
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3672
sg62
(dp3673
S'self'
p3674
S'<gluon.template.TemplateParser object>'
p3675
sS'extend'
p3676
S'"\'annotate_layout.html\'"'
p3677
sS'self.extend'
p3678
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3679
ssg72
I756
sg73
(dp3680
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3681
sI752
S'            self.child_super_nodes.remove(node)'
p3682
sI753
S''
sI754
S'        # If we need to extend a template.'
p3683
sI755
S'        if extend:'
p3684
sI756
S'            self.extend(extend)'
p3685
sI757
S''
sI758
S'# We need this for integration with gluon'
p3686
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3687
sg84
g188
sa(dp3688
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3689
sg62
(dp3690
S'super_nodes'
p3691
S'[]'
p3692
sS'_super_nodes'
p3693
g114
ssg72
I486
sg73
(dp3694
I481
S'                           name=filename,'
p3695
sI482
S'                           context=self.context,'
p3696
sI483
S'                           path=self.path,'
p3697
sI484
S'                           writer=self.writer,'
p3698
sI485
S'                           delimiters=self.delimiters,'
p3699
sI486
S'                           _super_nodes=super_nodes)'
p3700
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3701
sI489
S'        # template.'
p3702
sI490
S'        buf = BlockNode('
p3703
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3704
sg84
g206
sa(dp3705
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3706
sg62
(dp3707
S'text'
p3708
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3709
sS'self'
p3710
S'<gluon.template.TemplateParser object>'
p3711
sS'self.parse'
p3712
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3713
ssg72
I316
sg73
(dp3714
I320
S'        Return the parsed template with correct indentation.'
p3715
sI311
S'        # This variable will hold a reference to every block'
p3716
sI312
S'        # that we come across in this template'
p3717
sI313
S'        self.blocks = {}'
p3718
sI314
S''
sI315
S'        # Begin parsing.'
p3719
sI316
S'        self.parse(text)'
p3720
sI317
S''
sI318
S'    def to_string(self):'
p3721
sI319
S'        """'
p3722
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3723
sg84
g48
sa(dp3724
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3725
sg62
(dp3726
S'self'
p3727
S'<gluon.template.TemplateParser object>'
p3728
sS'extend'
p3729
S'"\'annotate_layout.html\'"'
p3730
sS'self.extend'
p3731
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3732
ssg72
I756
sg73
(dp3733
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3734
sI752
S'            self.child_super_nodes.remove(node)'
p3735
sI753
S''
sI754
S'        # If we need to extend a template.'
p3736
sI755
S'        if extend:'
p3737
sI756
S'            self.extend(extend)'
p3738
sI757
S''
sI758
S'# We need this for integration with gluon'
p3739
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3740
sg84
g188
sa(dp3741
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3742
sg62
(dp3743
S'super_nodes'
p3744
S'[]'
p3745
sS'_super_nodes'
p3746
g114
ssg72
I486
sg73
(dp3747
I481
S'                           name=filename,'
p3748
sI482
S'                           context=self.context,'
p3749
sI483
S'                           path=self.path,'
p3750
sI484
S'                           writer=self.writer,'
p3751
sI485
S'                           delimiters=self.delimiters,'
p3752
sI486
S'                           _super_nodes=super_nodes)'
p3753
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3754
sI489
S'        # template.'
p3755
sI490
S'        buf = BlockNode('
p3756
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3757
sg84
g206
sa(dp3758
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3759
sg62
(dp3760
S'text'
p3761
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3762
sS'self'
p3763
S'<gluon.template.TemplateParser object>'
p3764
sS'self.parse'
p3765
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3766
ssg72
I316
sg73
(dp3767
I320
S'        Return the parsed template with correct indentation.'
p3768
sI311
S'        # This variable will hold a reference to every block'
p3769
sI312
S'        # that we come across in this template'
p3770
sI313
S'        self.blocks = {}'
p3771
sI314
S''
sI315
S'        # Begin parsing.'
p3772
sI316
S'        self.parse(text)'
p3773
sI317
S''
sI318
S'    def to_string(self):'
p3774
sI319
S'        """'
p3775
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3776
sg84
g48
sa(dp3777
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3778
sg62
(dp3779
S'self'
p3780
S'<gluon.template.TemplateParser object>'
p3781
sS'extend'
p3782
S'"\'annotate_layout.html\'"'
p3783
sS'self.extend'
p3784
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3785
ssg72
I756
sg73
(dp3786
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3787
sI752
S'            self.child_super_nodes.remove(node)'
p3788
sI753
S''
sI754
S'        # If we need to extend a template.'
p3789
sI755
S'        if extend:'
p3790
sI756
S'            self.extend(extend)'
p3791
sI757
S''
sI758
S'# We need this for integration with gluon'
p3792
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3793
sg84
g188
sa(dp3794
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3795
sg62
(dp3796
S'super_nodes'
p3797
S'[]'
p3798
sS'_super_nodes'
p3799
g114
ssg72
I486
sg73
(dp3800
I481
S'                           name=filename,'
p3801
sI482
S'                           context=self.context,'
p3802
sI483
S'                           path=self.path,'
p3803
sI484
S'                           writer=self.writer,'
p3804
sI485
S'                           delimiters=self.delimiters,'
p3805
sI486
S'                           _super_nodes=super_nodes)'
p3806
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3807
sI489
S'        # template.'
p3808
sI490
S'        buf = BlockNode('
p3809
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3810
sg84
g206
sa(dp3811
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3812
sg62
(dp3813
S'text'
p3814
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3815
sS'self'
p3816
S'<gluon.template.TemplateParser object>'
p3817
sS'self.parse'
p3818
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3819
ssg72
I316
sg73
(dp3820
I320
S'        Return the parsed template with correct indentation.'
p3821
sI311
S'        # This variable will hold a reference to every block'
p3822
sI312
S'        # that we come across in this template'
p3823
sI313
S'        self.blocks = {}'
p3824
sI314
S''
sI315
S'        # Begin parsing.'
p3825
sI316
S'        self.parse(text)'
p3826
sI317
S''
sI318
S'    def to_string(self):'
p3827
sI319
S'        """'
p3828
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3829
sg84
g48
sa(dp3830
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3831
sg62
(dp3832
S'self'
p3833
S'<gluon.template.TemplateParser object>'
p3834
sS'extend'
p3835
S'"\'annotate_layout.html\'"'
p3836
sS'self.extend'
p3837
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3838
ssg72
I756
sg73
(dp3839
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3840
sI752
S'            self.child_super_nodes.remove(node)'
p3841
sI753
S''
sI754
S'        # If we need to extend a template.'
p3842
sI755
S'        if extend:'
p3843
sI756
S'            self.extend(extend)'
p3844
sI757
S''
sI758
S'# We need this for integration with gluon'
p3845
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3846
sg84
g188
sa(dp3847
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3848
sg62
(dp3849
S'super_nodes'
p3850
S'[]'
p3851
sS'_super_nodes'
p3852
g114
ssg72
I486
sg73
(dp3853
I481
S'                           name=filename,'
p3854
sI482
S'                           context=self.context,'
p3855
sI483
S'                           path=self.path,'
p3856
sI484
S'                           writer=self.writer,'
p3857
sI485
S'                           delimiters=self.delimiters,'
p3858
sI486
S'                           _super_nodes=super_nodes)'
p3859
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3860
sI489
S'        # template.'
p3861
sI490
S'        buf = BlockNode('
p3862
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3863
sg84
g206
sa(dp3864
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3865
sg62
(dp3866
S'text'
p3867
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3868
sS'self'
p3869
S'<gluon.template.TemplateParser object>'
p3870
sS'self.parse'
p3871
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3872
ssg72
I316
sg73
(dp3873
I320
S'        Return the parsed template with correct indentation.'
p3874
sI311
S'        # This variable will hold a reference to every block'
p3875
sI312
S'        # that we come across in this template'
p3876
sI313
S'        self.blocks = {}'
p3877
sI314
S''
sI315
S'        # Begin parsing.'
p3878
sI316
S'        self.parse(text)'
p3879
sI317
S''
sI318
S'    def to_string(self):'
p3880
sI319
S'        """'
p3881
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3882
sg84
g48
sa(dp3883
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3884
sg62
(dp3885
S'self'
p3886
S'<gluon.template.TemplateParser object>'
p3887
sS'extend'
p3888
S'"\'annotate_layout.html\'"'
p3889
sS'self.extend'
p3890
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3891
ssg72
I756
sg73
(dp3892
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3893
sI752
S'            self.child_super_nodes.remove(node)'
p3894
sI753
S''
sI754
S'        # If we need to extend a template.'
p3895
sI755
S'        if extend:'
p3896
sI756
S'            self.extend(extend)'
p3897
sI757
S''
sI758
S'# We need this for integration with gluon'
p3898
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3899
sg84
g188
sa(dp3900
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3901
sg62
(dp3902
S'super_nodes'
p3903
S'[]'
p3904
sS'_super_nodes'
p3905
g114
ssg72
I486
sg73
(dp3906
I481
S'                           name=filename,'
p3907
sI482
S'                           context=self.context,'
p3908
sI483
S'                           path=self.path,'
p3909
sI484
S'                           writer=self.writer,'
p3910
sI485
S'                           delimiters=self.delimiters,'
p3911
sI486
S'                           _super_nodes=super_nodes)'
p3912
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3913
sI489
S'        # template.'
p3914
sI490
S'        buf = BlockNode('
p3915
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3916
sg84
g206
sa(dp3917
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3918
sg62
(dp3919
S'text'
p3920
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3921
sS'self'
p3922
S'<gluon.template.TemplateParser object>'
p3923
sS'self.parse'
p3924
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3925
ssg72
I316
sg73
(dp3926
I320
S'        Return the parsed template with correct indentation.'
p3927
sI311
S'        # This variable will hold a reference to every block'
p3928
sI312
S'        # that we come across in this template'
p3929
sI313
S'        self.blocks = {}'
p3930
sI314
S''
sI315
S'        # Begin parsing.'
p3931
sI316
S'        self.parse(text)'
p3932
sI317
S''
sI318
S'    def to_string(self):'
p3933
sI319
S'        """'
p3934
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3935
sg84
g48
sa(dp3936
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3937
sg62
(dp3938
S'self'
p3939
S'<gluon.template.TemplateParser object>'
p3940
sS'extend'
p3941
S'"\'annotate_layout.html\'"'
p3942
sS'self.extend'
p3943
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3944
ssg72
I756
sg73
(dp3945
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3946
sI752
S'            self.child_super_nodes.remove(node)'
p3947
sI753
S''
sI754
S'        # If we need to extend a template.'
p3948
sI755
S'        if extend:'
p3949
sI756
S'            self.extend(extend)'
p3950
sI757
S''
sI758
S'# We need this for integration with gluon'
p3951
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p3952
sg84
g188
sa(dp3953
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3954
sg62
(dp3955
S'super_nodes'
p3956
S'[]'
p3957
sS'_super_nodes'
p3958
g114
ssg72
I486
sg73
(dp3959
I481
S'                           name=filename,'
p3960
sI482
S'                           context=self.context,'
p3961
sI483
S'                           path=self.path,'
p3962
sI484
S'                           writer=self.writer,'
p3963
sI485
S'                           delimiters=self.delimiters,'
p3964
sI486
S'                           _super_nodes=super_nodes)'
p3965
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p3966
sI489
S'        # template.'
p3967
sI490
S'        buf = BlockNode('
p3968
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p3969
sg84
g206
sa(dp3970
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3971
sg62
(dp3972
S'text'
p3973
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p3974
sS'self'
p3975
S'<gluon.template.TemplateParser object>'
p3976
sS'self.parse'
p3977
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p3978
ssg72
I316
sg73
(dp3979
I320
S'        Return the parsed template with correct indentation.'
p3980
sI311
S'        # This variable will hold a reference to every block'
p3981
sI312
S'        # that we come across in this template'
p3982
sI313
S'        self.blocks = {}'
p3983
sI314
S''
sI315
S'        # Begin parsing.'
p3984
sI316
S'        self.parse(text)'
p3985
sI317
S''
sI318
S'    def to_string(self):'
p3986
sI319
S'        """'
p3987
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p3988
sg84
g48
sa(dp3989
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p3990
sg62
(dp3991
S'self'
p3992
S'<gluon.template.TemplateParser object>'
p3993
sS'extend'
p3994
S'"\'annotate_layout.html\'"'
p3995
sS'self.extend'
p3996
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p3997
ssg72
I756
sg73
(dp3998
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p3999
sI752
S'            self.child_super_nodes.remove(node)'
p4000
sI753
S''
sI754
S'        # If we need to extend a template.'
p4001
sI755
S'        if extend:'
p4002
sI756
S'            self.extend(extend)'
p4003
sI757
S''
sI758
S'# We need this for integration with gluon'
p4004
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4005
sg84
g188
sa(dp4006
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4007
sg62
(dp4008
S'super_nodes'
p4009
S'[]'
p4010
sS'_super_nodes'
p4011
g114
ssg72
I486
sg73
(dp4012
I481
S'                           name=filename,'
p4013
sI482
S'                           context=self.context,'
p4014
sI483
S'                           path=self.path,'
p4015
sI484
S'                           writer=self.writer,'
p4016
sI485
S'                           delimiters=self.delimiters,'
p4017
sI486
S'                           _super_nodes=super_nodes)'
p4018
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4019
sI489
S'        # template.'
p4020
sI490
S'        buf = BlockNode('
p4021
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4022
sg84
g206
sa(dp4023
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4024
sg62
(dp4025
S'text'
p4026
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4027
sS'self'
p4028
S'<gluon.template.TemplateParser object>'
p4029
sS'self.parse'
p4030
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4031
ssg72
I316
sg73
(dp4032
I320
S'        Return the parsed template with correct indentation.'
p4033
sI311
S'        # This variable will hold a reference to every block'
p4034
sI312
S'        # that we come across in this template'
p4035
sI313
S'        self.blocks = {}'
p4036
sI314
S''
sI315
S'        # Begin parsing.'
p4037
sI316
S'        self.parse(text)'
p4038
sI317
S''
sI318
S'    def to_string(self):'
p4039
sI319
S'        """'
p4040
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4041
sg84
g48
sa(dp4042
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4043
sg62
(dp4044
S'self'
p4045
S'<gluon.template.TemplateParser object>'
p4046
sS'extend'
p4047
S'"\'annotate_layout.html\'"'
p4048
sS'self.extend'
p4049
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4050
ssg72
I756
sg73
(dp4051
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4052
sI752
S'            self.child_super_nodes.remove(node)'
p4053
sI753
S''
sI754
S'        # If we need to extend a template.'
p4054
sI755
S'        if extend:'
p4055
sI756
S'            self.extend(extend)'
p4056
sI757
S''
sI758
S'# We need this for integration with gluon'
p4057
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4058
sg84
g188
sa(dp4059
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4060
sg62
(dp4061
S'super_nodes'
p4062
S'[]'
p4063
sS'_super_nodes'
p4064
g114
ssg72
I486
sg73
(dp4065
I481
S'                           name=filename,'
p4066
sI482
S'                           context=self.context,'
p4067
sI483
S'                           path=self.path,'
p4068
sI484
S'                           writer=self.writer,'
p4069
sI485
S'                           delimiters=self.delimiters,'
p4070
sI486
S'                           _super_nodes=super_nodes)'
p4071
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4072
sI489
S'        # template.'
p4073
sI490
S'        buf = BlockNode('
p4074
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4075
sg84
g206
sa(dp4076
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4077
sg62
(dp4078
S'text'
p4079
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4080
sS'self'
p4081
S'<gluon.template.TemplateParser object>'
p4082
sS'self.parse'
p4083
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4084
ssg72
I316
sg73
(dp4085
I320
S'        Return the parsed template with correct indentation.'
p4086
sI311
S'        # This variable will hold a reference to every block'
p4087
sI312
S'        # that we come across in this template'
p4088
sI313
S'        self.blocks = {}'
p4089
sI314
S''
sI315
S'        # Begin parsing.'
p4090
sI316
S'        self.parse(text)'
p4091
sI317
S''
sI318
S'    def to_string(self):'
p4092
sI319
S'        """'
p4093
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4094
sg84
g48
sa(dp4095
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4096
sg62
(dp4097
S'self'
p4098
S'<gluon.template.TemplateParser object>'
p4099
sS'extend'
p4100
S'"\'annotate_layout.html\'"'
p4101
sS'self.extend'
p4102
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4103
ssg72
I756
sg73
(dp4104
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4105
sI752
S'            self.child_super_nodes.remove(node)'
p4106
sI753
S''
sI754
S'        # If we need to extend a template.'
p4107
sI755
S'        if extend:'
p4108
sI756
S'            self.extend(extend)'
p4109
sI757
S''
sI758
S'# We need this for integration with gluon'
p4110
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4111
sg84
g188
sa(dp4112
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4113
sg62
(dp4114
S'super_nodes'
p4115
S'[]'
p4116
sS'_super_nodes'
p4117
g114
ssg72
I486
sg73
(dp4118
I481
S'                           name=filename,'
p4119
sI482
S'                           context=self.context,'
p4120
sI483
S'                           path=self.path,'
p4121
sI484
S'                           writer=self.writer,'
p4122
sI485
S'                           delimiters=self.delimiters,'
p4123
sI486
S'                           _super_nodes=super_nodes)'
p4124
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4125
sI489
S'        # template.'
p4126
sI490
S'        buf = BlockNode('
p4127
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4128
sg84
g206
sa(dp4129
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4130
sg62
(dp4131
S'text'
p4132
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4133
sS'self'
p4134
S'<gluon.template.TemplateParser object>'
p4135
sS'self.parse'
p4136
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4137
ssg72
I316
sg73
(dp4138
I320
S'        Return the parsed template with correct indentation.'
p4139
sI311
S'        # This variable will hold a reference to every block'
p4140
sI312
S'        # that we come across in this template'
p4141
sI313
S'        self.blocks = {}'
p4142
sI314
S''
sI315
S'        # Begin parsing.'
p4143
sI316
S'        self.parse(text)'
p4144
sI317
S''
sI318
S'    def to_string(self):'
p4145
sI319
S'        """'
p4146
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4147
sg84
g48
sa(dp4148
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4149
sg62
(dp4150
S'self'
p4151
S'<gluon.template.TemplateParser object>'
p4152
sS'extend'
p4153
S'"\'annotate_layout.html\'"'
p4154
sS'self.extend'
p4155
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4156
ssg72
I756
sg73
(dp4157
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4158
sI752
S'            self.child_super_nodes.remove(node)'
p4159
sI753
S''
sI754
S'        # If we need to extend a template.'
p4160
sI755
S'        if extend:'
p4161
sI756
S'            self.extend(extend)'
p4162
sI757
S''
sI758
S'# We need this for integration with gluon'
p4163
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4164
sg84
g188
sa(dp4165
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4166
sg62
(dp4167
S'super_nodes'
p4168
S'[]'
p4169
sS'_super_nodes'
p4170
g114
ssg72
I486
sg73
(dp4171
I481
S'                           name=filename,'
p4172
sI482
S'                           context=self.context,'
p4173
sI483
S'                           path=self.path,'
p4174
sI484
S'                           writer=self.writer,'
p4175
sI485
S'                           delimiters=self.delimiters,'
p4176
sI486
S'                           _super_nodes=super_nodes)'
p4177
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4178
sI489
S'        # template.'
p4179
sI490
S'        buf = BlockNode('
p4180
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4181
sg84
g206
sa(dp4182
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4183
sg62
(dp4184
S'text'
p4185
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4186
sS'self'
p4187
S'<gluon.template.TemplateParser object>'
p4188
sS'self.parse'
p4189
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4190
ssg72
I316
sg73
(dp4191
I320
S'        Return the parsed template with correct indentation.'
p4192
sI311
S'        # This variable will hold a reference to every block'
p4193
sI312
S'        # that we come across in this template'
p4194
sI313
S'        self.blocks = {}'
p4195
sI314
S''
sI315
S'        # Begin parsing.'
p4196
sI316
S'        self.parse(text)'
p4197
sI317
S''
sI318
S'    def to_string(self):'
p4198
sI319
S'        """'
p4199
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4200
sg84
g48
sa(dp4201
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4202
sg62
(dp4203
S'self'
p4204
S'<gluon.template.TemplateParser object>'
p4205
sS'extend'
p4206
S'"\'annotate_layout.html\'"'
p4207
sS'self.extend'
p4208
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4209
ssg72
I756
sg73
(dp4210
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4211
sI752
S'            self.child_super_nodes.remove(node)'
p4212
sI753
S''
sI754
S'        # If we need to extend a template.'
p4213
sI755
S'        if extend:'
p4214
sI756
S'            self.extend(extend)'
p4215
sI757
S''
sI758
S'# We need this for integration with gluon'
p4216
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4217
sg84
g188
sa(dp4218
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4219
sg62
(dp4220
S'super_nodes'
p4221
S'[]'
p4222
sS'_super_nodes'
p4223
g114
ssg72
I486
sg73
(dp4224
I481
S'                           name=filename,'
p4225
sI482
S'                           context=self.context,'
p4226
sI483
S'                           path=self.path,'
p4227
sI484
S'                           writer=self.writer,'
p4228
sI485
S'                           delimiters=self.delimiters,'
p4229
sI486
S'                           _super_nodes=super_nodes)'
p4230
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4231
sI489
S'        # template.'
p4232
sI490
S'        buf = BlockNode('
p4233
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4234
sg84
g206
sa(dp4235
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4236
sg62
(dp4237
S'text'
p4238
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4239
sS'self'
p4240
S'<gluon.template.TemplateParser object>'
p4241
sS'self.parse'
p4242
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4243
ssg72
I316
sg73
(dp4244
I320
S'        Return the parsed template with correct indentation.'
p4245
sI311
S'        # This variable will hold a reference to every block'
p4246
sI312
S'        # that we come across in this template'
p4247
sI313
S'        self.blocks = {}'
p4248
sI314
S''
sI315
S'        # Begin parsing.'
p4249
sI316
S'        self.parse(text)'
p4250
sI317
S''
sI318
S'    def to_string(self):'
p4251
sI319
S'        """'
p4252
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4253
sg84
g48
sa(dp4254
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4255
sg62
(dp4256
S'self'
p4257
S'<gluon.template.TemplateParser object>'
p4258
sS'extend'
p4259
S'"\'annotate_layout.html\'"'
p4260
sS'self.extend'
p4261
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4262
ssg72
I756
sg73
(dp4263
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4264
sI752
S'            self.child_super_nodes.remove(node)'
p4265
sI753
S''
sI754
S'        # If we need to extend a template.'
p4266
sI755
S'        if extend:'
p4267
sI756
S'            self.extend(extend)'
p4268
sI757
S''
sI758
S'# We need this for integration with gluon'
p4269
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4270
sg84
g188
sa(dp4271
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4272
sg62
(dp4273
S'super_nodes'
p4274
S'[]'
p4275
sS'_super_nodes'
p4276
g114
ssg72
I486
sg73
(dp4277
I481
S'                           name=filename,'
p4278
sI482
S'                           context=self.context,'
p4279
sI483
S'                           path=self.path,'
p4280
sI484
S'                           writer=self.writer,'
p4281
sI485
S'                           delimiters=self.delimiters,'
p4282
sI486
S'                           _super_nodes=super_nodes)'
p4283
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4284
sI489
S'        # template.'
p4285
sI490
S'        buf = BlockNode('
p4286
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4287
sg84
g206
sa(dp4288
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4289
sg62
(dp4290
S'text'
p4291
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4292
sS'self'
p4293
S'<gluon.template.TemplateParser object>'
p4294
sS'self.parse'
p4295
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4296
ssg72
I316
sg73
(dp4297
I320
S'        Return the parsed template with correct indentation.'
p4298
sI311
S'        # This variable will hold a reference to every block'
p4299
sI312
S'        # that we come across in this template'
p4300
sI313
S'        self.blocks = {}'
p4301
sI314
S''
sI315
S'        # Begin parsing.'
p4302
sI316
S'        self.parse(text)'
p4303
sI317
S''
sI318
S'    def to_string(self):'
p4304
sI319
S'        """'
p4305
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4306
sg84
g48
sa(dp4307
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4308
sg62
(dp4309
S'self'
p4310
S'<gluon.template.TemplateParser object>'
p4311
sS'extend'
p4312
S'"\'annotate_layout.html\'"'
p4313
sS'self.extend'
p4314
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4315
ssg72
I756
sg73
(dp4316
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4317
sI752
S'            self.child_super_nodes.remove(node)'
p4318
sI753
S''
sI754
S'        # If we need to extend a template.'
p4319
sI755
S'        if extend:'
p4320
sI756
S'            self.extend(extend)'
p4321
sI757
S''
sI758
S'# We need this for integration with gluon'
p4322
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4323
sg84
g188
sa(dp4324
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4325
sg62
(dp4326
S'super_nodes'
p4327
S'[]'
p4328
sS'_super_nodes'
p4329
g114
ssg72
I486
sg73
(dp4330
I481
S'                           name=filename,'
p4331
sI482
S'                           context=self.context,'
p4332
sI483
S'                           path=self.path,'
p4333
sI484
S'                           writer=self.writer,'
p4334
sI485
S'                           delimiters=self.delimiters,'
p4335
sI486
S'                           _super_nodes=super_nodes)'
p4336
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4337
sI489
S'        # template.'
p4338
sI490
S'        buf = BlockNode('
p4339
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4340
sg84
g206
sa(dp4341
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4342
sg62
(dp4343
S'text'
p4344
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4345
sS'self'
p4346
S'<gluon.template.TemplateParser object>'
p4347
sS'self.parse'
p4348
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4349
ssg72
I316
sg73
(dp4350
I320
S'        Return the parsed template with correct indentation.'
p4351
sI311
S'        # This variable will hold a reference to every block'
p4352
sI312
S'        # that we come across in this template'
p4353
sI313
S'        self.blocks = {}'
p4354
sI314
S''
sI315
S'        # Begin parsing.'
p4355
sI316
S'        self.parse(text)'
p4356
sI317
S''
sI318
S'    def to_string(self):'
p4357
sI319
S'        """'
p4358
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4359
sg84
g48
sa(dp4360
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4361
sg62
(dp4362
S'self'
p4363
S'<gluon.template.TemplateParser object>'
p4364
sS'extend'
p4365
S'"\'annotate_layout.html\'"'
p4366
sS'self.extend'
p4367
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4368
ssg72
I756
sg73
(dp4369
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4370
sI752
S'            self.child_super_nodes.remove(node)'
p4371
sI753
S''
sI754
S'        # If we need to extend a template.'
p4372
sI755
S'        if extend:'
p4373
sI756
S'            self.extend(extend)'
p4374
sI757
S''
sI758
S'# We need this for integration with gluon'
p4375
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4376
sg84
g188
sa(dp4377
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4378
sg62
(dp4379
S'super_nodes'
p4380
S'[]'
p4381
sS'_super_nodes'
p4382
g114
ssg72
I486
sg73
(dp4383
I481
S'                           name=filename,'
p4384
sI482
S'                           context=self.context,'
p4385
sI483
S'                           path=self.path,'
p4386
sI484
S'                           writer=self.writer,'
p4387
sI485
S'                           delimiters=self.delimiters,'
p4388
sI486
S'                           _super_nodes=super_nodes)'
p4389
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4390
sI489
S'        # template.'
p4391
sI490
S'        buf = BlockNode('
p4392
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4393
sg84
g206
sa(dp4394
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4395
sg62
(dp4396
S'text'
p4397
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4398
sS'self'
p4399
S'<gluon.template.TemplateParser object>'
p4400
sS'self.parse'
p4401
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4402
ssg72
I316
sg73
(dp4403
I320
S'        Return the parsed template with correct indentation.'
p4404
sI311
S'        # This variable will hold a reference to every block'
p4405
sI312
S'        # that we come across in this template'
p4406
sI313
S'        self.blocks = {}'
p4407
sI314
S''
sI315
S'        # Begin parsing.'
p4408
sI316
S'        self.parse(text)'
p4409
sI317
S''
sI318
S'    def to_string(self):'
p4410
sI319
S'        """'
p4411
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4412
sg84
g48
sa(dp4413
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4414
sg62
(dp4415
S'self'
p4416
S'<gluon.template.TemplateParser object>'
p4417
sS'extend'
p4418
S'"\'annotate_layout.html\'"'
p4419
sS'self.extend'
p4420
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4421
ssg72
I756
sg73
(dp4422
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4423
sI752
S'            self.child_super_nodes.remove(node)'
p4424
sI753
S''
sI754
S'        # If we need to extend a template.'
p4425
sI755
S'        if extend:'
p4426
sI756
S'            self.extend(extend)'
p4427
sI757
S''
sI758
S'# We need this for integration with gluon'
p4428
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4429
sg84
g188
sa(dp4430
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4431
sg62
(dp4432
S'super_nodes'
p4433
S'[]'
p4434
sS'_super_nodes'
p4435
g114
ssg72
I486
sg73
(dp4436
I481
S'                           name=filename,'
p4437
sI482
S'                           context=self.context,'
p4438
sI483
S'                           path=self.path,'
p4439
sI484
S'                           writer=self.writer,'
p4440
sI485
S'                           delimiters=self.delimiters,'
p4441
sI486
S'                           _super_nodes=super_nodes)'
p4442
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4443
sI489
S'        # template.'
p4444
sI490
S'        buf = BlockNode('
p4445
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4446
sg84
g206
sa(dp4447
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4448
sg62
(dp4449
S'text'
p4450
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4451
sS'self'
p4452
S'<gluon.template.TemplateParser object>'
p4453
sS'self.parse'
p4454
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4455
ssg72
I316
sg73
(dp4456
I320
S'        Return the parsed template with correct indentation.'
p4457
sI311
S'        # This variable will hold a reference to every block'
p4458
sI312
S'        # that we come across in this template'
p4459
sI313
S'        self.blocks = {}'
p4460
sI314
S''
sI315
S'        # Begin parsing.'
p4461
sI316
S'        self.parse(text)'
p4462
sI317
S''
sI318
S'    def to_string(self):'
p4463
sI319
S'        """'
p4464
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4465
sg84
g48
sa(dp4466
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4467
sg62
(dp4468
S'self'
p4469
S'<gluon.template.TemplateParser object>'
p4470
sS'extend'
p4471
S'"\'annotate_layout.html\'"'
p4472
sS'self.extend'
p4473
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4474
ssg72
I756
sg73
(dp4475
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4476
sI752
S'            self.child_super_nodes.remove(node)'
p4477
sI753
S''
sI754
S'        # If we need to extend a template.'
p4478
sI755
S'        if extend:'
p4479
sI756
S'            self.extend(extend)'
p4480
sI757
S''
sI758
S'# We need this for integration with gluon'
p4481
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4482
sg84
g188
sa(dp4483
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4484
sg62
(dp4485
S'super_nodes'
p4486
S'[]'
p4487
sS'_super_nodes'
p4488
g114
ssg72
I486
sg73
(dp4489
I481
S'                           name=filename,'
p4490
sI482
S'                           context=self.context,'
p4491
sI483
S'                           path=self.path,'
p4492
sI484
S'                           writer=self.writer,'
p4493
sI485
S'                           delimiters=self.delimiters,'
p4494
sI486
S'                           _super_nodes=super_nodes)'
p4495
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4496
sI489
S'        # template.'
p4497
sI490
S'        buf = BlockNode('
p4498
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4499
sg84
g206
sa(dp4500
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4501
sg62
(dp4502
S'text'
p4503
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4504
sS'self'
p4505
S'<gluon.template.TemplateParser object>'
p4506
sS'self.parse'
p4507
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4508
ssg72
I316
sg73
(dp4509
I320
S'        Return the parsed template with correct indentation.'
p4510
sI311
S'        # This variable will hold a reference to every block'
p4511
sI312
S'        # that we come across in this template'
p4512
sI313
S'        self.blocks = {}'
p4513
sI314
S''
sI315
S'        # Begin parsing.'
p4514
sI316
S'        self.parse(text)'
p4515
sI317
S''
sI318
S'    def to_string(self):'
p4516
sI319
S'        """'
p4517
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4518
sg84
g48
sa(dp4519
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4520
sg62
(dp4521
S'self'
p4522
S'<gluon.template.TemplateParser object>'
p4523
sS'extend'
p4524
S'"\'annotate_layout.html\'"'
p4525
sS'self.extend'
p4526
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4527
ssg72
I756
sg73
(dp4528
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4529
sI752
S'            self.child_super_nodes.remove(node)'
p4530
sI753
S''
sI754
S'        # If we need to extend a template.'
p4531
sI755
S'        if extend:'
p4532
sI756
S'            self.extend(extend)'
p4533
sI757
S''
sI758
S'# We need this for integration with gluon'
p4534
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4535
sg84
g188
sa(dp4536
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4537
sg62
(dp4538
S'super_nodes'
p4539
S'[]'
p4540
sS'_super_nodes'
p4541
g114
ssg72
I486
sg73
(dp4542
I481
S'                           name=filename,'
p4543
sI482
S'                           context=self.context,'
p4544
sI483
S'                           path=self.path,'
p4545
sI484
S'                           writer=self.writer,'
p4546
sI485
S'                           delimiters=self.delimiters,'
p4547
sI486
S'                           _super_nodes=super_nodes)'
p4548
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4549
sI489
S'        # template.'
p4550
sI490
S'        buf = BlockNode('
p4551
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4552
sg84
g206
sa(dp4553
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4554
sg62
(dp4555
S'text'
p4556
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4557
sS'self'
p4558
S'<gluon.template.TemplateParser object>'
p4559
sS'self.parse'
p4560
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4561
ssg72
I316
sg73
(dp4562
I320
S'        Return the parsed template with correct indentation.'
p4563
sI311
S'        # This variable will hold a reference to every block'
p4564
sI312
S'        # that we come across in this template'
p4565
sI313
S'        self.blocks = {}'
p4566
sI314
S''
sI315
S'        # Begin parsing.'
p4567
sI316
S'        self.parse(text)'
p4568
sI317
S''
sI318
S'    def to_string(self):'
p4569
sI319
S'        """'
p4570
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4571
sg84
g48
sa(dp4572
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4573
sg62
(dp4574
S'self'
p4575
S'<gluon.template.TemplateParser object>'
p4576
sS'extend'
p4577
S'"\'annotate_layout.html\'"'
p4578
sS'self.extend'
p4579
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4580
ssg72
I756
sg73
(dp4581
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4582
sI752
S'            self.child_super_nodes.remove(node)'
p4583
sI753
S''
sI754
S'        # If we need to extend a template.'
p4584
sI755
S'        if extend:'
p4585
sI756
S'            self.extend(extend)'
p4586
sI757
S''
sI758
S'# We need this for integration with gluon'
p4587
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4588
sg84
g188
sa(dp4589
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4590
sg62
(dp4591
S'super_nodes'
p4592
S'[]'
p4593
sS'_super_nodes'
p4594
g114
ssg72
I486
sg73
(dp4595
I481
S'                           name=filename,'
p4596
sI482
S'                           context=self.context,'
p4597
sI483
S'                           path=self.path,'
p4598
sI484
S'                           writer=self.writer,'
p4599
sI485
S'                           delimiters=self.delimiters,'
p4600
sI486
S'                           _super_nodes=super_nodes)'
p4601
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4602
sI489
S'        # template.'
p4603
sI490
S'        buf = BlockNode('
p4604
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4605
sg84
g206
sa(dp4606
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4607
sg62
(dp4608
S'text'
p4609
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4610
sS'self'
p4611
S'<gluon.template.TemplateParser object>'
p4612
sS'self.parse'
p4613
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4614
ssg72
I316
sg73
(dp4615
I320
S'        Return the parsed template with correct indentation.'
p4616
sI311
S'        # This variable will hold a reference to every block'
p4617
sI312
S'        # that we come across in this template'
p4618
sI313
S'        self.blocks = {}'
p4619
sI314
S''
sI315
S'        # Begin parsing.'
p4620
sI316
S'        self.parse(text)'
p4621
sI317
S''
sI318
S'    def to_string(self):'
p4622
sI319
S'        """'
p4623
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4624
sg84
g48
sa(dp4625
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4626
sg62
(dp4627
S'self'
p4628
S'<gluon.template.TemplateParser object>'
p4629
sS'extend'
p4630
S'"\'annotate_layout.html\'"'
p4631
sS'self.extend'
p4632
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4633
ssg72
I756
sg73
(dp4634
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4635
sI752
S'            self.child_super_nodes.remove(node)'
p4636
sI753
S''
sI754
S'        # If we need to extend a template.'
p4637
sI755
S'        if extend:'
p4638
sI756
S'            self.extend(extend)'
p4639
sI757
S''
sI758
S'# We need this for integration with gluon'
p4640
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4641
sg84
g188
sa(dp4642
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4643
sg62
(dp4644
S'super_nodes'
p4645
S'[]'
p4646
sS'_super_nodes'
p4647
g114
ssg72
I486
sg73
(dp4648
I481
S'                           name=filename,'
p4649
sI482
S'                           context=self.context,'
p4650
sI483
S'                           path=self.path,'
p4651
sI484
S'                           writer=self.writer,'
p4652
sI485
S'                           delimiters=self.delimiters,'
p4653
sI486
S'                           _super_nodes=super_nodes)'
p4654
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4655
sI489
S'        # template.'
p4656
sI490
S'        buf = BlockNode('
p4657
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4658
sg84
g206
sa(dp4659
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4660
sg62
(dp4661
S'text'
p4662
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4663
sS'self'
p4664
S'<gluon.template.TemplateParser object>'
p4665
sS'self.parse'
p4666
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4667
ssg72
I316
sg73
(dp4668
I320
S'        Return the parsed template with correct indentation.'
p4669
sI311
S'        # This variable will hold a reference to every block'
p4670
sI312
S'        # that we come across in this template'
p4671
sI313
S'        self.blocks = {}'
p4672
sI314
S''
sI315
S'        # Begin parsing.'
p4673
sI316
S'        self.parse(text)'
p4674
sI317
S''
sI318
S'    def to_string(self):'
p4675
sI319
S'        """'
p4676
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4677
sg84
g48
sa(dp4678
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4679
sg62
(dp4680
S'self'
p4681
S'<gluon.template.TemplateParser object>'
p4682
sS'extend'
p4683
S'"\'annotate_layout.html\'"'
p4684
sS'self.extend'
p4685
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4686
ssg72
I756
sg73
(dp4687
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4688
sI752
S'            self.child_super_nodes.remove(node)'
p4689
sI753
S''
sI754
S'        # If we need to extend a template.'
p4690
sI755
S'        if extend:'
p4691
sI756
S'            self.extend(extend)'
p4692
sI757
S''
sI758
S'# We need this for integration with gluon'
p4693
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4694
sg84
g188
sa(dp4695
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4696
sg62
(dp4697
S'super_nodes'
p4698
S'[]'
p4699
sS'_super_nodes'
p4700
g114
ssg72
I486
sg73
(dp4701
I481
S'                           name=filename,'
p4702
sI482
S'                           context=self.context,'
p4703
sI483
S'                           path=self.path,'
p4704
sI484
S'                           writer=self.writer,'
p4705
sI485
S'                           delimiters=self.delimiters,'
p4706
sI486
S'                           _super_nodes=super_nodes)'
p4707
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4708
sI489
S'        # template.'
p4709
sI490
S'        buf = BlockNode('
p4710
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4711
sg84
g206
sa(dp4712
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4713
sg62
(dp4714
S'text'
p4715
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4716
sS'self'
p4717
S'<gluon.template.TemplateParser object>'
p4718
sS'self.parse'
p4719
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4720
ssg72
I316
sg73
(dp4721
I320
S'        Return the parsed template with correct indentation.'
p4722
sI311
S'        # This variable will hold a reference to every block'
p4723
sI312
S'        # that we come across in this template'
p4724
sI313
S'        self.blocks = {}'
p4725
sI314
S''
sI315
S'        # Begin parsing.'
p4726
sI316
S'        self.parse(text)'
p4727
sI317
S''
sI318
S'    def to_string(self):'
p4728
sI319
S'        """'
p4729
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4730
sg84
g48
sa(dp4731
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4732
sg62
(dp4733
S'self'
p4734
S'<gluon.template.TemplateParser object>'
p4735
sS'extend'
p4736
S'"\'annotate_layout.html\'"'
p4737
sS'self.extend'
p4738
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4739
ssg72
I756
sg73
(dp4740
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4741
sI752
S'            self.child_super_nodes.remove(node)'
p4742
sI753
S''
sI754
S'        # If we need to extend a template.'
p4743
sI755
S'        if extend:'
p4744
sI756
S'            self.extend(extend)'
p4745
sI757
S''
sI758
S'# We need this for integration with gluon'
p4746
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4747
sg84
g188
sa(dp4748
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4749
sg62
(dp4750
S'super_nodes'
p4751
S'[]'
p4752
sS'_super_nodes'
p4753
g114
ssg72
I486
sg73
(dp4754
I481
S'                           name=filename,'
p4755
sI482
S'                           context=self.context,'
p4756
sI483
S'                           path=self.path,'
p4757
sI484
S'                           writer=self.writer,'
p4758
sI485
S'                           delimiters=self.delimiters,'
p4759
sI486
S'                           _super_nodes=super_nodes)'
p4760
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4761
sI489
S'        # template.'
p4762
sI490
S'        buf = BlockNode('
p4763
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4764
sg84
g206
sa(dp4765
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4766
sg62
(dp4767
S'text'
p4768
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4769
sS'self'
p4770
S'<gluon.template.TemplateParser object>'
p4771
sS'self.parse'
p4772
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4773
ssg72
I316
sg73
(dp4774
I320
S'        Return the parsed template with correct indentation.'
p4775
sI311
S'        # This variable will hold a reference to every block'
p4776
sI312
S'        # that we come across in this template'
p4777
sI313
S'        self.blocks = {}'
p4778
sI314
S''
sI315
S'        # Begin parsing.'
p4779
sI316
S'        self.parse(text)'
p4780
sI317
S''
sI318
S'    def to_string(self):'
p4781
sI319
S'        """'
p4782
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4783
sg84
g48
sa(dp4784
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4785
sg62
(dp4786
S'self'
p4787
S'<gluon.template.TemplateParser object>'
p4788
sS'extend'
p4789
S'"\'annotate_layout.html\'"'
p4790
sS'self.extend'
p4791
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4792
ssg72
I756
sg73
(dp4793
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4794
sI752
S'            self.child_super_nodes.remove(node)'
p4795
sI753
S''
sI754
S'        # If we need to extend a template.'
p4796
sI755
S'        if extend:'
p4797
sI756
S'            self.extend(extend)'
p4798
sI757
S''
sI758
S'# We need this for integration with gluon'
p4799
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4800
sg84
g188
sa(dp4801
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4802
sg62
(dp4803
S'super_nodes'
p4804
S'[]'
p4805
sS'_super_nodes'
p4806
g114
ssg72
I486
sg73
(dp4807
I481
S'                           name=filename,'
p4808
sI482
S'                           context=self.context,'
p4809
sI483
S'                           path=self.path,'
p4810
sI484
S'                           writer=self.writer,'
p4811
sI485
S'                           delimiters=self.delimiters,'
p4812
sI486
S'                           _super_nodes=super_nodes)'
p4813
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4814
sI489
S'        # template.'
p4815
sI490
S'        buf = BlockNode('
p4816
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4817
sg84
g206
sa(dp4818
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4819
sg62
(dp4820
S'text'
p4821
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4822
sS'self'
p4823
S'<gluon.template.TemplateParser object>'
p4824
sS'self.parse'
p4825
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4826
ssg72
I316
sg73
(dp4827
I320
S'        Return the parsed template with correct indentation.'
p4828
sI311
S'        # This variable will hold a reference to every block'
p4829
sI312
S'        # that we come across in this template'
p4830
sI313
S'        self.blocks = {}'
p4831
sI314
S''
sI315
S'        # Begin parsing.'
p4832
sI316
S'        self.parse(text)'
p4833
sI317
S''
sI318
S'    def to_string(self):'
p4834
sI319
S'        """'
p4835
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4836
sg84
g48
sa(dp4837
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4838
sg62
(dp4839
S'self'
p4840
S'<gluon.template.TemplateParser object>'
p4841
sS'extend'
p4842
S'"\'annotate_layout.html\'"'
p4843
sS'self.extend'
p4844
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4845
ssg72
I756
sg73
(dp4846
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4847
sI752
S'            self.child_super_nodes.remove(node)'
p4848
sI753
S''
sI754
S'        # If we need to extend a template.'
p4849
sI755
S'        if extend:'
p4850
sI756
S'            self.extend(extend)'
p4851
sI757
S''
sI758
S'# We need this for integration with gluon'
p4852
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4853
sg84
g188
sa(dp4854
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4855
sg62
(dp4856
S'super_nodes'
p4857
S'[]'
p4858
sS'_super_nodes'
p4859
g114
ssg72
I486
sg73
(dp4860
I481
S'                           name=filename,'
p4861
sI482
S'                           context=self.context,'
p4862
sI483
S'                           path=self.path,'
p4863
sI484
S'                           writer=self.writer,'
p4864
sI485
S'                           delimiters=self.delimiters,'
p4865
sI486
S'                           _super_nodes=super_nodes)'
p4866
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4867
sI489
S'        # template.'
p4868
sI490
S'        buf = BlockNode('
p4869
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4870
sg84
g206
sa(dp4871
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4872
sg62
(dp4873
S'text'
p4874
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4875
sS'self'
p4876
S'<gluon.template.TemplateParser object>'
p4877
sS'self.parse'
p4878
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4879
ssg72
I316
sg73
(dp4880
I320
S'        Return the parsed template with correct indentation.'
p4881
sI311
S'        # This variable will hold a reference to every block'
p4882
sI312
S'        # that we come across in this template'
p4883
sI313
S'        self.blocks = {}'
p4884
sI314
S''
sI315
S'        # Begin parsing.'
p4885
sI316
S'        self.parse(text)'
p4886
sI317
S''
sI318
S'    def to_string(self):'
p4887
sI319
S'        """'
p4888
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4889
sg84
g48
sa(dp4890
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4891
sg62
(dp4892
S'self'
p4893
S'<gluon.template.TemplateParser object>'
p4894
sS'extend'
p4895
S'"\'annotate_layout.html\'"'
p4896
sS'self.extend'
p4897
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4898
ssg72
I756
sg73
(dp4899
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4900
sI752
S'            self.child_super_nodes.remove(node)'
p4901
sI753
S''
sI754
S'        # If we need to extend a template.'
p4902
sI755
S'        if extend:'
p4903
sI756
S'            self.extend(extend)'
p4904
sI757
S''
sI758
S'# We need this for integration with gluon'
p4905
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4906
sg84
g188
sa(dp4907
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4908
sg62
(dp4909
S'super_nodes'
p4910
S'[]'
p4911
sS'_super_nodes'
p4912
g114
ssg72
I486
sg73
(dp4913
I481
S'                           name=filename,'
p4914
sI482
S'                           context=self.context,'
p4915
sI483
S'                           path=self.path,'
p4916
sI484
S'                           writer=self.writer,'
p4917
sI485
S'                           delimiters=self.delimiters,'
p4918
sI486
S'                           _super_nodes=super_nodes)'
p4919
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4920
sI489
S'        # template.'
p4921
sI490
S'        buf = BlockNode('
p4922
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4923
sg84
g206
sa(dp4924
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4925
sg62
(dp4926
S'text'
p4927
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4928
sS'self'
p4929
S'<gluon.template.TemplateParser object>'
p4930
sS'self.parse'
p4931
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4932
ssg72
I316
sg73
(dp4933
I320
S'        Return the parsed template with correct indentation.'
p4934
sI311
S'        # This variable will hold a reference to every block'
p4935
sI312
S'        # that we come across in this template'
p4936
sI313
S'        self.blocks = {}'
p4937
sI314
S''
sI315
S'        # Begin parsing.'
p4938
sI316
S'        self.parse(text)'
p4939
sI317
S''
sI318
S'    def to_string(self):'
p4940
sI319
S'        """'
p4941
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4942
sg84
g48
sa(dp4943
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4944
sg62
(dp4945
S'self'
p4946
S'<gluon.template.TemplateParser object>'
p4947
sS'extend'
p4948
S'"\'annotate_layout.html\'"'
p4949
sS'self.extend'
p4950
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p4951
ssg72
I756
sg73
(dp4952
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p4953
sI752
S'            self.child_super_nodes.remove(node)'
p4954
sI753
S''
sI754
S'        # If we need to extend a template.'
p4955
sI755
S'        if extend:'
p4956
sI756
S'            self.extend(extend)'
p4957
sI757
S''
sI758
S'# We need this for integration with gluon'
p4958
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p4959
sg84
g188
sa(dp4960
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4961
sg62
(dp4962
S'super_nodes'
p4963
S'[]'
p4964
sS'_super_nodes'
p4965
g114
ssg72
I486
sg73
(dp4966
I481
S'                           name=filename,'
p4967
sI482
S'                           context=self.context,'
p4968
sI483
S'                           path=self.path,'
p4969
sI484
S'                           writer=self.writer,'
p4970
sI485
S'                           delimiters=self.delimiters,'
p4971
sI486
S'                           _super_nodes=super_nodes)'
p4972
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p4973
sI489
S'        # template.'
p4974
sI490
S'        buf = BlockNode('
p4975
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p4976
sg84
g206
sa(dp4977
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4978
sg62
(dp4979
S'text'
p4980
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p4981
sS'self'
p4982
S'<gluon.template.TemplateParser object>'
p4983
sS'self.parse'
p4984
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p4985
ssg72
I316
sg73
(dp4986
I320
S'        Return the parsed template with correct indentation.'
p4987
sI311
S'        # This variable will hold a reference to every block'
p4988
sI312
S'        # that we come across in this template'
p4989
sI313
S'        self.blocks = {}'
p4990
sI314
S''
sI315
S'        # Begin parsing.'
p4991
sI316
S'        self.parse(text)'
p4992
sI317
S''
sI318
S'    def to_string(self):'
p4993
sI319
S'        """'
p4994
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p4995
sg84
g48
sa(dp4996
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p4997
sg62
(dp4998
S'self'
p4999
S'<gluon.template.TemplateParser object>'
p5000
sS'extend'
p5001
S'"\'annotate_layout.html\'"'
p5002
sS'self.extend'
p5003
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5004
ssg72
I756
sg73
(dp5005
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5006
sI752
S'            self.child_super_nodes.remove(node)'
p5007
sI753
S''
sI754
S'        # If we need to extend a template.'
p5008
sI755
S'        if extend:'
p5009
sI756
S'            self.extend(extend)'
p5010
sI757
S''
sI758
S'# We need this for integration with gluon'
p5011
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5012
sg84
g188
sa(dp5013
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5014
sg62
(dp5015
S'super_nodes'
p5016
S'[]'
p5017
sS'_super_nodes'
p5018
g114
ssg72
I486
sg73
(dp5019
I481
S'                           name=filename,'
p5020
sI482
S'                           context=self.context,'
p5021
sI483
S'                           path=self.path,'
p5022
sI484
S'                           writer=self.writer,'
p5023
sI485
S'                           delimiters=self.delimiters,'
p5024
sI486
S'                           _super_nodes=super_nodes)'
p5025
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5026
sI489
S'        # template.'
p5027
sI490
S'        buf = BlockNode('
p5028
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5029
sg84
g206
sa(dp5030
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5031
sg62
(dp5032
S'text'
p5033
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5034
sS'self'
p5035
S'<gluon.template.TemplateParser object>'
p5036
sS'self.parse'
p5037
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5038
ssg72
I316
sg73
(dp5039
I320
S'        Return the parsed template with correct indentation.'
p5040
sI311
S'        # This variable will hold a reference to every block'
p5041
sI312
S'        # that we come across in this template'
p5042
sI313
S'        self.blocks = {}'
p5043
sI314
S''
sI315
S'        # Begin parsing.'
p5044
sI316
S'        self.parse(text)'
p5045
sI317
S''
sI318
S'    def to_string(self):'
p5046
sI319
S'        """'
p5047
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5048
sg84
g48
sa(dp5049
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5050
sg62
(dp5051
S'self'
p5052
S'<gluon.template.TemplateParser object>'
p5053
sS'extend'
p5054
S'"\'annotate_layout.html\'"'
p5055
sS'self.extend'
p5056
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5057
ssg72
I756
sg73
(dp5058
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5059
sI752
S'            self.child_super_nodes.remove(node)'
p5060
sI753
S''
sI754
S'        # If we need to extend a template.'
p5061
sI755
S'        if extend:'
p5062
sI756
S'            self.extend(extend)'
p5063
sI757
S''
sI758
S'# We need this for integration with gluon'
p5064
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5065
sg84
g188
sa(dp5066
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5067
sg62
(dp5068
S'super_nodes'
p5069
S'[]'
p5070
sS'_super_nodes'
p5071
g114
ssg72
I486
sg73
(dp5072
I481
S'                           name=filename,'
p5073
sI482
S'                           context=self.context,'
p5074
sI483
S'                           path=self.path,'
p5075
sI484
S'                           writer=self.writer,'
p5076
sI485
S'                           delimiters=self.delimiters,'
p5077
sI486
S'                           _super_nodes=super_nodes)'
p5078
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5079
sI489
S'        # template.'
p5080
sI490
S'        buf = BlockNode('
p5081
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5082
sg84
g206
sa(dp5083
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5084
sg62
(dp5085
S'text'
p5086
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5087
sS'self'
p5088
S'<gluon.template.TemplateParser object>'
p5089
sS'self.parse'
p5090
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5091
ssg72
I316
sg73
(dp5092
I320
S'        Return the parsed template with correct indentation.'
p5093
sI311
S'        # This variable will hold a reference to every block'
p5094
sI312
S'        # that we come across in this template'
p5095
sI313
S'        self.blocks = {}'
p5096
sI314
S''
sI315
S'        # Begin parsing.'
p5097
sI316
S'        self.parse(text)'
p5098
sI317
S''
sI318
S'    def to_string(self):'
p5099
sI319
S'        """'
p5100
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5101
sg84
g48
sa(dp5102
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5103
sg62
(dp5104
S'self'
p5105
S'<gluon.template.TemplateParser object>'
p5106
sS'extend'
p5107
S'"\'annotate_layout.html\'"'
p5108
sS'self.extend'
p5109
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5110
ssg72
I756
sg73
(dp5111
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5112
sI752
S'            self.child_super_nodes.remove(node)'
p5113
sI753
S''
sI754
S'        # If we need to extend a template.'
p5114
sI755
S'        if extend:'
p5115
sI756
S'            self.extend(extend)'
p5116
sI757
S''
sI758
S'# We need this for integration with gluon'
p5117
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5118
sg84
g188
sa(dp5119
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5120
sg62
(dp5121
S'super_nodes'
p5122
S'[]'
p5123
sS'_super_nodes'
p5124
g114
ssg72
I486
sg73
(dp5125
I481
S'                           name=filename,'
p5126
sI482
S'                           context=self.context,'
p5127
sI483
S'                           path=self.path,'
p5128
sI484
S'                           writer=self.writer,'
p5129
sI485
S'                           delimiters=self.delimiters,'
p5130
sI486
S'                           _super_nodes=super_nodes)'
p5131
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5132
sI489
S'        # template.'
p5133
sI490
S'        buf = BlockNode('
p5134
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5135
sg84
g206
sa(dp5136
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5137
sg62
(dp5138
S'text'
p5139
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5140
sS'self'
p5141
S'<gluon.template.TemplateParser object>'
p5142
sS'self.parse'
p5143
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5144
ssg72
I316
sg73
(dp5145
I320
S'        Return the parsed template with correct indentation.'
p5146
sI311
S'        # This variable will hold a reference to every block'
p5147
sI312
S'        # that we come across in this template'
p5148
sI313
S'        self.blocks = {}'
p5149
sI314
S''
sI315
S'        # Begin parsing.'
p5150
sI316
S'        self.parse(text)'
p5151
sI317
S''
sI318
S'    def to_string(self):'
p5152
sI319
S'        """'
p5153
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5154
sg84
g48
sa(dp5155
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5156
sg62
(dp5157
S'self'
p5158
S'<gluon.template.TemplateParser object>'
p5159
sS'extend'
p5160
S'"\'annotate_layout.html\'"'
p5161
sS'self.extend'
p5162
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5163
ssg72
I756
sg73
(dp5164
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5165
sI752
S'            self.child_super_nodes.remove(node)'
p5166
sI753
S''
sI754
S'        # If we need to extend a template.'
p5167
sI755
S'        if extend:'
p5168
sI756
S'            self.extend(extend)'
p5169
sI757
S''
sI758
S'# We need this for integration with gluon'
p5170
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5171
sg84
g188
sa(dp5172
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5173
sg62
(dp5174
S'super_nodes'
p5175
S'[]'
p5176
sS'_super_nodes'
p5177
g114
ssg72
I486
sg73
(dp5178
I481
S'                           name=filename,'
p5179
sI482
S'                           context=self.context,'
p5180
sI483
S'                           path=self.path,'
p5181
sI484
S'                           writer=self.writer,'
p5182
sI485
S'                           delimiters=self.delimiters,'
p5183
sI486
S'                           _super_nodes=super_nodes)'
p5184
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5185
sI489
S'        # template.'
p5186
sI490
S'        buf = BlockNode('
p5187
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5188
sg84
g206
sa(dp5189
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5190
sg62
(dp5191
S'text'
p5192
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5193
sS'self'
p5194
S'<gluon.template.TemplateParser object>'
p5195
sS'self.parse'
p5196
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5197
ssg72
I316
sg73
(dp5198
I320
S'        Return the parsed template with correct indentation.'
p5199
sI311
S'        # This variable will hold a reference to every block'
p5200
sI312
S'        # that we come across in this template'
p5201
sI313
S'        self.blocks = {}'
p5202
sI314
S''
sI315
S'        # Begin parsing.'
p5203
sI316
S'        self.parse(text)'
p5204
sI317
S''
sI318
S'    def to_string(self):'
p5205
sI319
S'        """'
p5206
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5207
sg84
g48
sa(dp5208
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5209
sg62
(dp5210
S'self'
p5211
S'<gluon.template.TemplateParser object>'
p5212
sS'extend'
p5213
S'"\'annotate_layout.html\'"'
p5214
sS'self.extend'
p5215
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5216
ssg72
I756
sg73
(dp5217
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5218
sI752
S'            self.child_super_nodes.remove(node)'
p5219
sI753
S''
sI754
S'        # If we need to extend a template.'
p5220
sI755
S'        if extend:'
p5221
sI756
S'            self.extend(extend)'
p5222
sI757
S''
sI758
S'# We need this for integration with gluon'
p5223
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5224
sg84
g188
sa(dp5225
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5226
sg62
(dp5227
S'super_nodes'
p5228
S'[]'
p5229
sS'_super_nodes'
p5230
g114
ssg72
I486
sg73
(dp5231
I481
S'                           name=filename,'
p5232
sI482
S'                           context=self.context,'
p5233
sI483
S'                           path=self.path,'
p5234
sI484
S'                           writer=self.writer,'
p5235
sI485
S'                           delimiters=self.delimiters,'
p5236
sI486
S'                           _super_nodes=super_nodes)'
p5237
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5238
sI489
S'        # template.'
p5239
sI490
S'        buf = BlockNode('
p5240
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5241
sg84
g206
sa(dp5242
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5243
sg62
(dp5244
S'text'
p5245
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5246
sS'self'
p5247
S'<gluon.template.TemplateParser object>'
p5248
sS'self.parse'
p5249
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5250
ssg72
I316
sg73
(dp5251
I320
S'        Return the parsed template with correct indentation.'
p5252
sI311
S'        # This variable will hold a reference to every block'
p5253
sI312
S'        # that we come across in this template'
p5254
sI313
S'        self.blocks = {}'
p5255
sI314
S''
sI315
S'        # Begin parsing.'
p5256
sI316
S'        self.parse(text)'
p5257
sI317
S''
sI318
S'    def to_string(self):'
p5258
sI319
S'        """'
p5259
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5260
sg84
g48
sa(dp5261
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5262
sg62
(dp5263
S'self'
p5264
S'<gluon.template.TemplateParser object>'
p5265
sS'extend'
p5266
S'"\'annotate_layout.html\'"'
p5267
sS'self.extend'
p5268
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5269
ssg72
I756
sg73
(dp5270
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5271
sI752
S'            self.child_super_nodes.remove(node)'
p5272
sI753
S''
sI754
S'        # If we need to extend a template.'
p5273
sI755
S'        if extend:'
p5274
sI756
S'            self.extend(extend)'
p5275
sI757
S''
sI758
S'# We need this for integration with gluon'
p5276
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5277
sg84
g188
sa(dp5278
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5279
sg62
(dp5280
S'super_nodes'
p5281
S'[]'
p5282
sS'_super_nodes'
p5283
g114
ssg72
I486
sg73
(dp5284
I481
S'                           name=filename,'
p5285
sI482
S'                           context=self.context,'
p5286
sI483
S'                           path=self.path,'
p5287
sI484
S'                           writer=self.writer,'
p5288
sI485
S'                           delimiters=self.delimiters,'
p5289
sI486
S'                           _super_nodes=super_nodes)'
p5290
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5291
sI489
S'        # template.'
p5292
sI490
S'        buf = BlockNode('
p5293
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5294
sg84
g206
sa(dp5295
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5296
sg62
(dp5297
S'text'
p5298
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5299
sS'self'
p5300
S'<gluon.template.TemplateParser object>'
p5301
sS'self.parse'
p5302
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5303
ssg72
I316
sg73
(dp5304
I320
S'        Return the parsed template with correct indentation.'
p5305
sI311
S'        # This variable will hold a reference to every block'
p5306
sI312
S'        # that we come across in this template'
p5307
sI313
S'        self.blocks = {}'
p5308
sI314
S''
sI315
S'        # Begin parsing.'
p5309
sI316
S'        self.parse(text)'
p5310
sI317
S''
sI318
S'    def to_string(self):'
p5311
sI319
S'        """'
p5312
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5313
sg84
g48
sa(dp5314
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5315
sg62
(dp5316
S'self'
p5317
S'<gluon.template.TemplateParser object>'
p5318
sS'extend'
p5319
S'"\'annotate_layout.html\'"'
p5320
sS'self.extend'
p5321
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5322
ssg72
I756
sg73
(dp5323
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5324
sI752
S'            self.child_super_nodes.remove(node)'
p5325
sI753
S''
sI754
S'        # If we need to extend a template.'
p5326
sI755
S'        if extend:'
p5327
sI756
S'            self.extend(extend)'
p5328
sI757
S''
sI758
S'# We need this for integration with gluon'
p5329
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5330
sg84
g188
sa(dp5331
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5332
sg62
(dp5333
S'super_nodes'
p5334
S'[]'
p5335
sS'_super_nodes'
p5336
g114
ssg72
I486
sg73
(dp5337
I481
S'                           name=filename,'
p5338
sI482
S'                           context=self.context,'
p5339
sI483
S'                           path=self.path,'
p5340
sI484
S'                           writer=self.writer,'
p5341
sI485
S'                           delimiters=self.delimiters,'
p5342
sI486
S'                           _super_nodes=super_nodes)'
p5343
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5344
sI489
S'        # template.'
p5345
sI490
S'        buf = BlockNode('
p5346
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5347
sg84
g206
sa(dp5348
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5349
sg62
(dp5350
S'text'
p5351
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5352
sS'self'
p5353
S'<gluon.template.TemplateParser object>'
p5354
sS'self.parse'
p5355
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5356
ssg72
I316
sg73
(dp5357
I320
S'        Return the parsed template with correct indentation.'
p5358
sI311
S'        # This variable will hold a reference to every block'
p5359
sI312
S'        # that we come across in this template'
p5360
sI313
S'        self.blocks = {}'
p5361
sI314
S''
sI315
S'        # Begin parsing.'
p5362
sI316
S'        self.parse(text)'
p5363
sI317
S''
sI318
S'    def to_string(self):'
p5364
sI319
S'        """'
p5365
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5366
sg84
g48
sa(dp5367
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5368
sg62
(dp5369
S'self'
p5370
S'<gluon.template.TemplateParser object>'
p5371
sS'extend'
p5372
S'"\'annotate_layout.html\'"'
p5373
sS'self.extend'
p5374
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5375
ssg72
I756
sg73
(dp5376
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5377
sI752
S'            self.child_super_nodes.remove(node)'
p5378
sI753
S''
sI754
S'        # If we need to extend a template.'
p5379
sI755
S'        if extend:'
p5380
sI756
S'            self.extend(extend)'
p5381
sI757
S''
sI758
S'# We need this for integration with gluon'
p5382
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5383
sg84
g188
sa(dp5384
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5385
sg62
(dp5386
S'super_nodes'
p5387
S'[]'
p5388
sS'_super_nodes'
p5389
g114
ssg72
I486
sg73
(dp5390
I481
S'                           name=filename,'
p5391
sI482
S'                           context=self.context,'
p5392
sI483
S'                           path=self.path,'
p5393
sI484
S'                           writer=self.writer,'
p5394
sI485
S'                           delimiters=self.delimiters,'
p5395
sI486
S'                           _super_nodes=super_nodes)'
p5396
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5397
sI489
S'        # template.'
p5398
sI490
S'        buf = BlockNode('
p5399
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5400
sg84
g206
sa(dp5401
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5402
sg62
(dp5403
S'text'
p5404
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5405
sS'self'
p5406
S'<gluon.template.TemplateParser object>'
p5407
sS'self.parse'
p5408
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5409
ssg72
I316
sg73
(dp5410
I320
S'        Return the parsed template with correct indentation.'
p5411
sI311
S'        # This variable will hold a reference to every block'
p5412
sI312
S'        # that we come across in this template'
p5413
sI313
S'        self.blocks = {}'
p5414
sI314
S''
sI315
S'        # Begin parsing.'
p5415
sI316
S'        self.parse(text)'
p5416
sI317
S''
sI318
S'    def to_string(self):'
p5417
sI319
S'        """'
p5418
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5419
sg84
g48
sa(dp5420
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5421
sg62
(dp5422
S'self'
p5423
S'<gluon.template.TemplateParser object>'
p5424
sS'extend'
p5425
S'"\'annotate_layout.html\'"'
p5426
sS'self.extend'
p5427
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5428
ssg72
I756
sg73
(dp5429
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5430
sI752
S'            self.child_super_nodes.remove(node)'
p5431
sI753
S''
sI754
S'        # If we need to extend a template.'
p5432
sI755
S'        if extend:'
p5433
sI756
S'            self.extend(extend)'
p5434
sI757
S''
sI758
S'# We need this for integration with gluon'
p5435
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5436
sg84
g188
sa(dp5437
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5438
sg62
(dp5439
S'super_nodes'
p5440
S'[]'
p5441
sS'_super_nodes'
p5442
g114
ssg72
I486
sg73
(dp5443
I481
S'                           name=filename,'
p5444
sI482
S'                           context=self.context,'
p5445
sI483
S'                           path=self.path,'
p5446
sI484
S'                           writer=self.writer,'
p5447
sI485
S'                           delimiters=self.delimiters,'
p5448
sI486
S'                           _super_nodes=super_nodes)'
p5449
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5450
sI489
S'        # template.'
p5451
sI490
S'        buf = BlockNode('
p5452
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5453
sg84
g206
sa(dp5454
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5455
sg62
(dp5456
S'text'
p5457
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5458
sS'self'
p5459
S'<gluon.template.TemplateParser object>'
p5460
sS'self.parse'
p5461
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5462
ssg72
I316
sg73
(dp5463
I320
S'        Return the parsed template with correct indentation.'
p5464
sI311
S'        # This variable will hold a reference to every block'
p5465
sI312
S'        # that we come across in this template'
p5466
sI313
S'        self.blocks = {}'
p5467
sI314
S''
sI315
S'        # Begin parsing.'
p5468
sI316
S'        self.parse(text)'
p5469
sI317
S''
sI318
S'    def to_string(self):'
p5470
sI319
S'        """'
p5471
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5472
sg84
g48
sa(dp5473
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5474
sg62
(dp5475
S'self'
p5476
S'<gluon.template.TemplateParser object>'
p5477
sS'extend'
p5478
S'"\'annotate_layout.html\'"'
p5479
sS'self.extend'
p5480
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5481
ssg72
I756
sg73
(dp5482
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5483
sI752
S'            self.child_super_nodes.remove(node)'
p5484
sI753
S''
sI754
S'        # If we need to extend a template.'
p5485
sI755
S'        if extend:'
p5486
sI756
S'            self.extend(extend)'
p5487
sI757
S''
sI758
S'# We need this for integration with gluon'
p5488
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5489
sg84
g188
sa(dp5490
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5491
sg62
(dp5492
S'super_nodes'
p5493
S'[]'
p5494
sS'_super_nodes'
p5495
g114
ssg72
I486
sg73
(dp5496
I481
S'                           name=filename,'
p5497
sI482
S'                           context=self.context,'
p5498
sI483
S'                           path=self.path,'
p5499
sI484
S'                           writer=self.writer,'
p5500
sI485
S'                           delimiters=self.delimiters,'
p5501
sI486
S'                           _super_nodes=super_nodes)'
p5502
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5503
sI489
S'        # template.'
p5504
sI490
S'        buf = BlockNode('
p5505
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5506
sg84
g206
sa(dp5507
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5508
sg62
(dp5509
S'text'
p5510
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5511
sS'self'
p5512
S'<gluon.template.TemplateParser object>'
p5513
sS'self.parse'
p5514
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5515
ssg72
I316
sg73
(dp5516
I320
S'        Return the parsed template with correct indentation.'
p5517
sI311
S'        # This variable will hold a reference to every block'
p5518
sI312
S'        # that we come across in this template'
p5519
sI313
S'        self.blocks = {}'
p5520
sI314
S''
sI315
S'        # Begin parsing.'
p5521
sI316
S'        self.parse(text)'
p5522
sI317
S''
sI318
S'    def to_string(self):'
p5523
sI319
S'        """'
p5524
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5525
sg84
g48
sa(dp5526
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5527
sg62
(dp5528
S'self'
p5529
S'<gluon.template.TemplateParser object>'
p5530
sS'extend'
p5531
S'"\'annotate_layout.html\'"'
p5532
sS'self.extend'
p5533
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5534
ssg72
I756
sg73
(dp5535
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5536
sI752
S'            self.child_super_nodes.remove(node)'
p5537
sI753
S''
sI754
S'        # If we need to extend a template.'
p5538
sI755
S'        if extend:'
p5539
sI756
S'            self.extend(extend)'
p5540
sI757
S''
sI758
S'# We need this for integration with gluon'
p5541
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5542
sg84
g188
sa(dp5543
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5544
sg62
(dp5545
S'super_nodes'
p5546
S'[]'
p5547
sS'_super_nodes'
p5548
g114
ssg72
I486
sg73
(dp5549
I481
S'                           name=filename,'
p5550
sI482
S'                           context=self.context,'
p5551
sI483
S'                           path=self.path,'
p5552
sI484
S'                           writer=self.writer,'
p5553
sI485
S'                           delimiters=self.delimiters,'
p5554
sI486
S'                           _super_nodes=super_nodes)'
p5555
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5556
sI489
S'        # template.'
p5557
sI490
S'        buf = BlockNode('
p5558
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5559
sg84
g206
sa(dp5560
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5561
sg62
(dp5562
S'text'
p5563
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5564
sS'self'
p5565
S'<gluon.template.TemplateParser object>'
p5566
sS'self.parse'
p5567
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5568
ssg72
I316
sg73
(dp5569
I320
S'        Return the parsed template with correct indentation.'
p5570
sI311
S'        # This variable will hold a reference to every block'
p5571
sI312
S'        # that we come across in this template'
p5572
sI313
S'        self.blocks = {}'
p5573
sI314
S''
sI315
S'        # Begin parsing.'
p5574
sI316
S'        self.parse(text)'
p5575
sI317
S''
sI318
S'    def to_string(self):'
p5576
sI319
S'        """'
p5577
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5578
sg84
g48
sa(dp5579
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5580
sg62
(dp5581
S'self'
p5582
S'<gluon.template.TemplateParser object>'
p5583
sS'extend'
p5584
S'"\'annotate_layout.html\'"'
p5585
sS'self.extend'
p5586
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5587
ssg72
I756
sg73
(dp5588
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5589
sI752
S'            self.child_super_nodes.remove(node)'
p5590
sI753
S''
sI754
S'        # If we need to extend a template.'
p5591
sI755
S'        if extend:'
p5592
sI756
S'            self.extend(extend)'
p5593
sI757
S''
sI758
S'# We need this for integration with gluon'
p5594
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5595
sg84
g188
sa(dp5596
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5597
sg62
(dp5598
S'super_nodes'
p5599
S'[]'
p5600
sS'_super_nodes'
p5601
g114
ssg72
I486
sg73
(dp5602
I481
S'                           name=filename,'
p5603
sI482
S'                           context=self.context,'
p5604
sI483
S'                           path=self.path,'
p5605
sI484
S'                           writer=self.writer,'
p5606
sI485
S'                           delimiters=self.delimiters,'
p5607
sI486
S'                           _super_nodes=super_nodes)'
p5608
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5609
sI489
S'        # template.'
p5610
sI490
S'        buf = BlockNode('
p5611
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5612
sg84
g206
sa(dp5613
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5614
sg62
(dp5615
S'text'
p5616
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5617
sS'self'
p5618
S'<gluon.template.TemplateParser object>'
p5619
sS'self.parse'
p5620
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5621
ssg72
I316
sg73
(dp5622
I320
S'        Return the parsed template with correct indentation.'
p5623
sI311
S'        # This variable will hold a reference to every block'
p5624
sI312
S'        # that we come across in this template'
p5625
sI313
S'        self.blocks = {}'
p5626
sI314
S''
sI315
S'        # Begin parsing.'
p5627
sI316
S'        self.parse(text)'
p5628
sI317
S''
sI318
S'    def to_string(self):'
p5629
sI319
S'        """'
p5630
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5631
sg84
g48
sa(dp5632
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5633
sg62
(dp5634
S'self'
p5635
S'<gluon.template.TemplateParser object>'
p5636
sS'extend'
p5637
S'"\'annotate_layout.html\'"'
p5638
sS'self.extend'
p5639
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5640
ssg72
I756
sg73
(dp5641
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5642
sI752
S'            self.child_super_nodes.remove(node)'
p5643
sI753
S''
sI754
S'        # If we need to extend a template.'
p5644
sI755
S'        if extend:'
p5645
sI756
S'            self.extend(extend)'
p5646
sI757
S''
sI758
S'# We need this for integration with gluon'
p5647
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5648
sg84
g188
sa(dp5649
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5650
sg62
(dp5651
S'super_nodes'
p5652
S'[]'
p5653
sS'_super_nodes'
p5654
g114
ssg72
I486
sg73
(dp5655
I481
S'                           name=filename,'
p5656
sI482
S'                           context=self.context,'
p5657
sI483
S'                           path=self.path,'
p5658
sI484
S'                           writer=self.writer,'
p5659
sI485
S'                           delimiters=self.delimiters,'
p5660
sI486
S'                           _super_nodes=super_nodes)'
p5661
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5662
sI489
S'        # template.'
p5663
sI490
S'        buf = BlockNode('
p5664
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5665
sg84
g206
sa(dp5666
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5667
sg62
(dp5668
S'text'
p5669
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5670
sS'self'
p5671
S'<gluon.template.TemplateParser object>'
p5672
sS'self.parse'
p5673
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5674
ssg72
I316
sg73
(dp5675
I320
S'        Return the parsed template with correct indentation.'
p5676
sI311
S'        # This variable will hold a reference to every block'
p5677
sI312
S'        # that we come across in this template'
p5678
sI313
S'        self.blocks = {}'
p5679
sI314
S''
sI315
S'        # Begin parsing.'
p5680
sI316
S'        self.parse(text)'
p5681
sI317
S''
sI318
S'    def to_string(self):'
p5682
sI319
S'        """'
p5683
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5684
sg84
g48
sa(dp5685
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5686
sg62
(dp5687
S'self'
p5688
S'<gluon.template.TemplateParser object>'
p5689
sS'extend'
p5690
S'"\'annotate_layout.html\'"'
p5691
sS'self.extend'
p5692
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5693
ssg72
I756
sg73
(dp5694
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5695
sI752
S'            self.child_super_nodes.remove(node)'
p5696
sI753
S''
sI754
S'        # If we need to extend a template.'
p5697
sI755
S'        if extend:'
p5698
sI756
S'            self.extend(extend)'
p5699
sI757
S''
sI758
S'# We need this for integration with gluon'
p5700
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5701
sg84
g188
sa(dp5702
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5703
sg62
(dp5704
S'super_nodes'
p5705
S'[]'
p5706
sS'_super_nodes'
p5707
g114
ssg72
I486
sg73
(dp5708
I481
S'                           name=filename,'
p5709
sI482
S'                           context=self.context,'
p5710
sI483
S'                           path=self.path,'
p5711
sI484
S'                           writer=self.writer,'
p5712
sI485
S'                           delimiters=self.delimiters,'
p5713
sI486
S'                           _super_nodes=super_nodes)'
p5714
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5715
sI489
S'        # template.'
p5716
sI490
S'        buf = BlockNode('
p5717
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5718
sg84
g206
sa(dp5719
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5720
sg62
(dp5721
S'text'
p5722
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5723
sS'self'
p5724
S'<gluon.template.TemplateParser object>'
p5725
sS'self.parse'
p5726
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5727
ssg72
I316
sg73
(dp5728
I320
S'        Return the parsed template with correct indentation.'
p5729
sI311
S'        # This variable will hold a reference to every block'
p5730
sI312
S'        # that we come across in this template'
p5731
sI313
S'        self.blocks = {}'
p5732
sI314
S''
sI315
S'        # Begin parsing.'
p5733
sI316
S'        self.parse(text)'
p5734
sI317
S''
sI318
S'    def to_string(self):'
p5735
sI319
S'        """'
p5736
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5737
sg84
g48
sa(dp5738
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5739
sg62
(dp5740
S'self'
p5741
S'<gluon.template.TemplateParser object>'
p5742
sS'extend'
p5743
S'"\'annotate_layout.html\'"'
p5744
sS'self.extend'
p5745
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5746
ssg72
I756
sg73
(dp5747
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5748
sI752
S'            self.child_super_nodes.remove(node)'
p5749
sI753
S''
sI754
S'        # If we need to extend a template.'
p5750
sI755
S'        if extend:'
p5751
sI756
S'            self.extend(extend)'
p5752
sI757
S''
sI758
S'# We need this for integration with gluon'
p5753
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5754
sg84
g188
sa(dp5755
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5756
sg62
(dp5757
S'super_nodes'
p5758
S'[]'
p5759
sS'_super_nodes'
p5760
g114
ssg72
I486
sg73
(dp5761
I481
S'                           name=filename,'
p5762
sI482
S'                           context=self.context,'
p5763
sI483
S'                           path=self.path,'
p5764
sI484
S'                           writer=self.writer,'
p5765
sI485
S'                           delimiters=self.delimiters,'
p5766
sI486
S'                           _super_nodes=super_nodes)'
p5767
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5768
sI489
S'        # template.'
p5769
sI490
S'        buf = BlockNode('
p5770
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5771
sg84
g206
sa(dp5772
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5773
sg62
(dp5774
S'text'
p5775
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5776
sS'self'
p5777
S'<gluon.template.TemplateParser object>'
p5778
sS'self.parse'
p5779
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5780
ssg72
I316
sg73
(dp5781
I320
S'        Return the parsed template with correct indentation.'
p5782
sI311
S'        # This variable will hold a reference to every block'
p5783
sI312
S'        # that we come across in this template'
p5784
sI313
S'        self.blocks = {}'
p5785
sI314
S''
sI315
S'        # Begin parsing.'
p5786
sI316
S'        self.parse(text)'
p5787
sI317
S''
sI318
S'    def to_string(self):'
p5788
sI319
S'        """'
p5789
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5790
sg84
g48
sa(dp5791
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5792
sg62
(dp5793
S'self'
p5794
S'<gluon.template.TemplateParser object>'
p5795
sS'extend'
p5796
S'"\'annotate_layout.html\'"'
p5797
sS'self.extend'
p5798
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5799
ssg72
I756
sg73
(dp5800
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5801
sI752
S'            self.child_super_nodes.remove(node)'
p5802
sI753
S''
sI754
S'        # If we need to extend a template.'
p5803
sI755
S'        if extend:'
p5804
sI756
S'            self.extend(extend)'
p5805
sI757
S''
sI758
S'# We need this for integration with gluon'
p5806
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5807
sg84
g188
sa(dp5808
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5809
sg62
(dp5810
S'super_nodes'
p5811
S'[]'
p5812
sS'_super_nodes'
p5813
g114
ssg72
I486
sg73
(dp5814
I481
S'                           name=filename,'
p5815
sI482
S'                           context=self.context,'
p5816
sI483
S'                           path=self.path,'
p5817
sI484
S'                           writer=self.writer,'
p5818
sI485
S'                           delimiters=self.delimiters,'
p5819
sI486
S'                           _super_nodes=super_nodes)'
p5820
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5821
sI489
S'        # template.'
p5822
sI490
S'        buf = BlockNode('
p5823
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5824
sg84
g206
sa(dp5825
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5826
sg62
(dp5827
S'text'
p5828
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5829
sS'self'
p5830
S'<gluon.template.TemplateParser object>'
p5831
sS'self.parse'
p5832
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5833
ssg72
I316
sg73
(dp5834
I320
S'        Return the parsed template with correct indentation.'
p5835
sI311
S'        # This variable will hold a reference to every block'
p5836
sI312
S'        # that we come across in this template'
p5837
sI313
S'        self.blocks = {}'
p5838
sI314
S''
sI315
S'        # Begin parsing.'
p5839
sI316
S'        self.parse(text)'
p5840
sI317
S''
sI318
S'    def to_string(self):'
p5841
sI319
S'        """'
p5842
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5843
sg84
g48
sa(dp5844
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5845
sg62
(dp5846
S'self'
p5847
S'<gluon.template.TemplateParser object>'
p5848
sS'extend'
p5849
S'"\'annotate_layout.html\'"'
p5850
sS'self.extend'
p5851
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5852
ssg72
I756
sg73
(dp5853
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5854
sI752
S'            self.child_super_nodes.remove(node)'
p5855
sI753
S''
sI754
S'        # If we need to extend a template.'
p5856
sI755
S'        if extend:'
p5857
sI756
S'            self.extend(extend)'
p5858
sI757
S''
sI758
S'# We need this for integration with gluon'
p5859
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5860
sg84
g188
sa(dp5861
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5862
sg62
(dp5863
S'super_nodes'
p5864
S'[]'
p5865
sS'_super_nodes'
p5866
g114
ssg72
I486
sg73
(dp5867
I481
S'                           name=filename,'
p5868
sI482
S'                           context=self.context,'
p5869
sI483
S'                           path=self.path,'
p5870
sI484
S'                           writer=self.writer,'
p5871
sI485
S'                           delimiters=self.delimiters,'
p5872
sI486
S'                           _super_nodes=super_nodes)'
p5873
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5874
sI489
S'        # template.'
p5875
sI490
S'        buf = BlockNode('
p5876
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5877
sg84
g206
sa(dp5878
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5879
sg62
(dp5880
S'text'
p5881
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5882
sS'self'
p5883
S'<gluon.template.TemplateParser object>'
p5884
sS'self.parse'
p5885
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5886
ssg72
I316
sg73
(dp5887
I320
S'        Return the parsed template with correct indentation.'
p5888
sI311
S'        # This variable will hold a reference to every block'
p5889
sI312
S'        # that we come across in this template'
p5890
sI313
S'        self.blocks = {}'
p5891
sI314
S''
sI315
S'        # Begin parsing.'
p5892
sI316
S'        self.parse(text)'
p5893
sI317
S''
sI318
S'    def to_string(self):'
p5894
sI319
S'        """'
p5895
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5896
sg84
g48
sa(dp5897
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5898
sg62
(dp5899
S'self'
p5900
S'<gluon.template.TemplateParser object>'
p5901
sS'extend'
p5902
S'"\'annotate_layout.html\'"'
p5903
sS'self.extend'
p5904
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5905
ssg72
I756
sg73
(dp5906
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5907
sI752
S'            self.child_super_nodes.remove(node)'
p5908
sI753
S''
sI754
S'        # If we need to extend a template.'
p5909
sI755
S'        if extend:'
p5910
sI756
S'            self.extend(extend)'
p5911
sI757
S''
sI758
S'# We need this for integration with gluon'
p5912
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5913
sg84
g188
sa(dp5914
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5915
sg62
(dp5916
S'super_nodes'
p5917
S'[]'
p5918
sS'_super_nodes'
p5919
g114
ssg72
I486
sg73
(dp5920
I481
S'                           name=filename,'
p5921
sI482
S'                           context=self.context,'
p5922
sI483
S'                           path=self.path,'
p5923
sI484
S'                           writer=self.writer,'
p5924
sI485
S'                           delimiters=self.delimiters,'
p5925
sI486
S'                           _super_nodes=super_nodes)'
p5926
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5927
sI489
S'        # template.'
p5928
sI490
S'        buf = BlockNode('
p5929
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5930
sg84
g206
sa(dp5931
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5932
sg62
(dp5933
S'text'
p5934
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5935
sS'self'
p5936
S'<gluon.template.TemplateParser object>'
p5937
sS'self.parse'
p5938
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5939
ssg72
I316
sg73
(dp5940
I320
S'        Return the parsed template with correct indentation.'
p5941
sI311
S'        # This variable will hold a reference to every block'
p5942
sI312
S'        # that we come across in this template'
p5943
sI313
S'        self.blocks = {}'
p5944
sI314
S''
sI315
S'        # Begin parsing.'
p5945
sI316
S'        self.parse(text)'
p5946
sI317
S''
sI318
S'    def to_string(self):'
p5947
sI319
S'        """'
p5948
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p5949
sg84
g48
sa(dp5950
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5951
sg62
(dp5952
S'self'
p5953
S'<gluon.template.TemplateParser object>'
p5954
sS'extend'
p5955
S'"\'annotate_layout.html\'"'
p5956
sS'self.extend'
p5957
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p5958
ssg72
I756
sg73
(dp5959
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p5960
sI752
S'            self.child_super_nodes.remove(node)'
p5961
sI753
S''
sI754
S'        # If we need to extend a template.'
p5962
sI755
S'        if extend:'
p5963
sI756
S'            self.extend(extend)'
p5964
sI757
S''
sI758
S'# We need this for integration with gluon'
p5965
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p5966
sg84
g188
sa(dp5967
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5968
sg62
(dp5969
S'super_nodes'
p5970
S'[]'
p5971
sS'_super_nodes'
p5972
g114
ssg72
I486
sg73
(dp5973
I481
S'                           name=filename,'
p5974
sI482
S'                           context=self.context,'
p5975
sI483
S'                           path=self.path,'
p5976
sI484
S'                           writer=self.writer,'
p5977
sI485
S'                           delimiters=self.delimiters,'
p5978
sI486
S'                           _super_nodes=super_nodes)'
p5979
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p5980
sI489
S'        # template.'
p5981
sI490
S'        buf = BlockNode('
p5982
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p5983
sg84
g206
sa(dp5984
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p5985
sg62
(dp5986
S'text'
p5987
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p5988
sS'self'
p5989
S'<gluon.template.TemplateParser object>'
p5990
sS'self.parse'
p5991
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p5992
ssg72
I316
sg73
(dp5993
I320
S'        Return the parsed template with correct indentation.'
p5994
sI311
S'        # This variable will hold a reference to every block'
p5995
sI312
S'        # that we come across in this template'
p5996
sI313
S'        self.blocks = {}'
p5997
sI314
S''
sI315
S'        # Begin parsing.'
p5998
sI316
S'        self.parse(text)'
p5999
sI317
S''
sI318
S'    def to_string(self):'
p6000
sI319
S'        """'
p6001
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6002
sg84
g48
sa(dp6003
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6004
sg62
(dp6005
S'self'
p6006
S'<gluon.template.TemplateParser object>'
p6007
sS'extend'
p6008
S'"\'annotate_layout.html\'"'
p6009
sS'self.extend'
p6010
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6011
ssg72
I756
sg73
(dp6012
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6013
sI752
S'            self.child_super_nodes.remove(node)'
p6014
sI753
S''
sI754
S'        # If we need to extend a template.'
p6015
sI755
S'        if extend:'
p6016
sI756
S'            self.extend(extend)'
p6017
sI757
S''
sI758
S'# We need this for integration with gluon'
p6018
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6019
sg84
g188
sa(dp6020
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6021
sg62
(dp6022
S'super_nodes'
p6023
S'[]'
p6024
sS'_super_nodes'
p6025
g114
ssg72
I486
sg73
(dp6026
I481
S'                           name=filename,'
p6027
sI482
S'                           context=self.context,'
p6028
sI483
S'                           path=self.path,'
p6029
sI484
S'                           writer=self.writer,'
p6030
sI485
S'                           delimiters=self.delimiters,'
p6031
sI486
S'                           _super_nodes=super_nodes)'
p6032
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6033
sI489
S'        # template.'
p6034
sI490
S'        buf = BlockNode('
p6035
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6036
sg84
g206
sa(dp6037
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6038
sg62
(dp6039
S'text'
p6040
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6041
sS'self'
p6042
S'<gluon.template.TemplateParser object>'
p6043
sS'self.parse'
p6044
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6045
ssg72
I316
sg73
(dp6046
I320
S'        Return the parsed template with correct indentation.'
p6047
sI311
S'        # This variable will hold a reference to every block'
p6048
sI312
S'        # that we come across in this template'
p6049
sI313
S'        self.blocks = {}'
p6050
sI314
S''
sI315
S'        # Begin parsing.'
p6051
sI316
S'        self.parse(text)'
p6052
sI317
S''
sI318
S'    def to_string(self):'
p6053
sI319
S'        """'
p6054
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6055
sg84
g48
sa(dp6056
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6057
sg62
(dp6058
S'self'
p6059
S'<gluon.template.TemplateParser object>'
p6060
sS'extend'
p6061
S'"\'annotate_layout.html\'"'
p6062
sS'self.extend'
p6063
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6064
ssg72
I756
sg73
(dp6065
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6066
sI752
S'            self.child_super_nodes.remove(node)'
p6067
sI753
S''
sI754
S'        # If we need to extend a template.'
p6068
sI755
S'        if extend:'
p6069
sI756
S'            self.extend(extend)'
p6070
sI757
S''
sI758
S'# We need this for integration with gluon'
p6071
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6072
sg84
g188
sa(dp6073
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6074
sg62
(dp6075
S'super_nodes'
p6076
S'[]'
p6077
sS'_super_nodes'
p6078
g114
ssg72
I486
sg73
(dp6079
I481
S'                           name=filename,'
p6080
sI482
S'                           context=self.context,'
p6081
sI483
S'                           path=self.path,'
p6082
sI484
S'                           writer=self.writer,'
p6083
sI485
S'                           delimiters=self.delimiters,'
p6084
sI486
S'                           _super_nodes=super_nodes)'
p6085
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6086
sI489
S'        # template.'
p6087
sI490
S'        buf = BlockNode('
p6088
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6089
sg84
g206
sa(dp6090
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6091
sg62
(dp6092
S'text'
p6093
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6094
sS'self'
p6095
S'<gluon.template.TemplateParser object>'
p6096
sS'self.parse'
p6097
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6098
ssg72
I316
sg73
(dp6099
I320
S'        Return the parsed template with correct indentation.'
p6100
sI311
S'        # This variable will hold a reference to every block'
p6101
sI312
S'        # that we come across in this template'
p6102
sI313
S'        self.blocks = {}'
p6103
sI314
S''
sI315
S'        # Begin parsing.'
p6104
sI316
S'        self.parse(text)'
p6105
sI317
S''
sI318
S'    def to_string(self):'
p6106
sI319
S'        """'
p6107
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6108
sg84
g48
sa(dp6109
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6110
sg62
(dp6111
S'self'
p6112
S'<gluon.template.TemplateParser object>'
p6113
sS'extend'
p6114
S'"\'annotate_layout.html\'"'
p6115
sS'self.extend'
p6116
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6117
ssg72
I756
sg73
(dp6118
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6119
sI752
S'            self.child_super_nodes.remove(node)'
p6120
sI753
S''
sI754
S'        # If we need to extend a template.'
p6121
sI755
S'        if extend:'
p6122
sI756
S'            self.extend(extend)'
p6123
sI757
S''
sI758
S'# We need this for integration with gluon'
p6124
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6125
sg84
g188
sa(dp6126
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6127
sg62
(dp6128
S'super_nodes'
p6129
S'[]'
p6130
sS'_super_nodes'
p6131
g114
ssg72
I486
sg73
(dp6132
I481
S'                           name=filename,'
p6133
sI482
S'                           context=self.context,'
p6134
sI483
S'                           path=self.path,'
p6135
sI484
S'                           writer=self.writer,'
p6136
sI485
S'                           delimiters=self.delimiters,'
p6137
sI486
S'                           _super_nodes=super_nodes)'
p6138
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6139
sI489
S'        # template.'
p6140
sI490
S'        buf = BlockNode('
p6141
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6142
sg84
g206
sa(dp6143
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6144
sg62
(dp6145
S'text'
p6146
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6147
sS'self'
p6148
S'<gluon.template.TemplateParser object>'
p6149
sS'self.parse'
p6150
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6151
ssg72
I316
sg73
(dp6152
I320
S'        Return the parsed template with correct indentation.'
p6153
sI311
S'        # This variable will hold a reference to every block'
p6154
sI312
S'        # that we come across in this template'
p6155
sI313
S'        self.blocks = {}'
p6156
sI314
S''
sI315
S'        # Begin parsing.'
p6157
sI316
S'        self.parse(text)'
p6158
sI317
S''
sI318
S'    def to_string(self):'
p6159
sI319
S'        """'
p6160
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6161
sg84
g48
sa(dp6162
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6163
sg62
(dp6164
S'self'
p6165
S'<gluon.template.TemplateParser object>'
p6166
sS'extend'
p6167
S'"\'annotate_layout.html\'"'
p6168
sS'self.extend'
p6169
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6170
ssg72
I756
sg73
(dp6171
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6172
sI752
S'            self.child_super_nodes.remove(node)'
p6173
sI753
S''
sI754
S'        # If we need to extend a template.'
p6174
sI755
S'        if extend:'
p6175
sI756
S'            self.extend(extend)'
p6176
sI757
S''
sI758
S'# We need this for integration with gluon'
p6177
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6178
sg84
g188
sa(dp6179
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6180
sg62
(dp6181
S'super_nodes'
p6182
S'[]'
p6183
sS'_super_nodes'
p6184
g114
ssg72
I486
sg73
(dp6185
I481
S'                           name=filename,'
p6186
sI482
S'                           context=self.context,'
p6187
sI483
S'                           path=self.path,'
p6188
sI484
S'                           writer=self.writer,'
p6189
sI485
S'                           delimiters=self.delimiters,'
p6190
sI486
S'                           _super_nodes=super_nodes)'
p6191
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6192
sI489
S'        # template.'
p6193
sI490
S'        buf = BlockNode('
p6194
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6195
sg84
g206
sa(dp6196
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6197
sg62
(dp6198
S'text'
p6199
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6200
sS'self'
p6201
S'<gluon.template.TemplateParser object>'
p6202
sS'self.parse'
p6203
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6204
ssg72
I316
sg73
(dp6205
I320
S'        Return the parsed template with correct indentation.'
p6206
sI311
S'        # This variable will hold a reference to every block'
p6207
sI312
S'        # that we come across in this template'
p6208
sI313
S'        self.blocks = {}'
p6209
sI314
S''
sI315
S'        # Begin parsing.'
p6210
sI316
S'        self.parse(text)'
p6211
sI317
S''
sI318
S'    def to_string(self):'
p6212
sI319
S'        """'
p6213
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6214
sg84
g48
sa(dp6215
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6216
sg62
(dp6217
S'self'
p6218
S'<gluon.template.TemplateParser object>'
p6219
sS'extend'
p6220
S'"\'annotate_layout.html\'"'
p6221
sS'self.extend'
p6222
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6223
ssg72
I756
sg73
(dp6224
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6225
sI752
S'            self.child_super_nodes.remove(node)'
p6226
sI753
S''
sI754
S'        # If we need to extend a template.'
p6227
sI755
S'        if extend:'
p6228
sI756
S'            self.extend(extend)'
p6229
sI757
S''
sI758
S'# We need this for integration with gluon'
p6230
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6231
sg84
g188
sa(dp6232
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6233
sg62
(dp6234
S'super_nodes'
p6235
S'[]'
p6236
sS'_super_nodes'
p6237
g114
ssg72
I486
sg73
(dp6238
I481
S'                           name=filename,'
p6239
sI482
S'                           context=self.context,'
p6240
sI483
S'                           path=self.path,'
p6241
sI484
S'                           writer=self.writer,'
p6242
sI485
S'                           delimiters=self.delimiters,'
p6243
sI486
S'                           _super_nodes=super_nodes)'
p6244
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6245
sI489
S'        # template.'
p6246
sI490
S'        buf = BlockNode('
p6247
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6248
sg84
g206
sa(dp6249
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6250
sg62
(dp6251
S'text'
p6252
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6253
sS'self'
p6254
S'<gluon.template.TemplateParser object>'
p6255
sS'self.parse'
p6256
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6257
ssg72
I316
sg73
(dp6258
I320
S'        Return the parsed template with correct indentation.'
p6259
sI311
S'        # This variable will hold a reference to every block'
p6260
sI312
S'        # that we come across in this template'
p6261
sI313
S'        self.blocks = {}'
p6262
sI314
S''
sI315
S'        # Begin parsing.'
p6263
sI316
S'        self.parse(text)'
p6264
sI317
S''
sI318
S'    def to_string(self):'
p6265
sI319
S'        """'
p6266
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6267
sg84
g48
sa(dp6268
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6269
sg62
(dp6270
S'self'
p6271
S'<gluon.template.TemplateParser object>'
p6272
sS'extend'
p6273
S'"\'annotate_layout.html\'"'
p6274
sS'self.extend'
p6275
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6276
ssg72
I756
sg73
(dp6277
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6278
sI752
S'            self.child_super_nodes.remove(node)'
p6279
sI753
S''
sI754
S'        # If we need to extend a template.'
p6280
sI755
S'        if extend:'
p6281
sI756
S'            self.extend(extend)'
p6282
sI757
S''
sI758
S'# We need this for integration with gluon'
p6283
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6284
sg84
g188
sa(dp6285
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6286
sg62
(dp6287
S'super_nodes'
p6288
S'[]'
p6289
sS'_super_nodes'
p6290
g114
ssg72
I486
sg73
(dp6291
I481
S'                           name=filename,'
p6292
sI482
S'                           context=self.context,'
p6293
sI483
S'                           path=self.path,'
p6294
sI484
S'                           writer=self.writer,'
p6295
sI485
S'                           delimiters=self.delimiters,'
p6296
sI486
S'                           _super_nodes=super_nodes)'
p6297
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6298
sI489
S'        # template.'
p6299
sI490
S'        buf = BlockNode('
p6300
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6301
sg84
g206
sa(dp6302
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6303
sg62
(dp6304
S'text'
p6305
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6306
sS'self'
p6307
S'<gluon.template.TemplateParser object>'
p6308
sS'self.parse'
p6309
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6310
ssg72
I316
sg73
(dp6311
I320
S'        Return the parsed template with correct indentation.'
p6312
sI311
S'        # This variable will hold a reference to every block'
p6313
sI312
S'        # that we come across in this template'
p6314
sI313
S'        self.blocks = {}'
p6315
sI314
S''
sI315
S'        # Begin parsing.'
p6316
sI316
S'        self.parse(text)'
p6317
sI317
S''
sI318
S'    def to_string(self):'
p6318
sI319
S'        """'
p6319
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6320
sg84
g48
sa(dp6321
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6322
sg62
(dp6323
S'self'
p6324
S'<gluon.template.TemplateParser object>'
p6325
sS'extend'
p6326
S'"\'annotate_layout.html\'"'
p6327
sS'self.extend'
p6328
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6329
ssg72
I756
sg73
(dp6330
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6331
sI752
S'            self.child_super_nodes.remove(node)'
p6332
sI753
S''
sI754
S'        # If we need to extend a template.'
p6333
sI755
S'        if extend:'
p6334
sI756
S'            self.extend(extend)'
p6335
sI757
S''
sI758
S'# We need this for integration with gluon'
p6336
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6337
sg84
g188
sa(dp6338
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6339
sg62
(dp6340
S'super_nodes'
p6341
S'[]'
p6342
sS'_super_nodes'
p6343
g114
ssg72
I486
sg73
(dp6344
I481
S'                           name=filename,'
p6345
sI482
S'                           context=self.context,'
p6346
sI483
S'                           path=self.path,'
p6347
sI484
S'                           writer=self.writer,'
p6348
sI485
S'                           delimiters=self.delimiters,'
p6349
sI486
S'                           _super_nodes=super_nodes)'
p6350
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6351
sI489
S'        # template.'
p6352
sI490
S'        buf = BlockNode('
p6353
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6354
sg84
g206
sa(dp6355
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6356
sg62
(dp6357
S'text'
p6358
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6359
sS'self'
p6360
S'<gluon.template.TemplateParser object>'
p6361
sS'self.parse'
p6362
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6363
ssg72
I316
sg73
(dp6364
I320
S'        Return the parsed template with correct indentation.'
p6365
sI311
S'        # This variable will hold a reference to every block'
p6366
sI312
S'        # that we come across in this template'
p6367
sI313
S'        self.blocks = {}'
p6368
sI314
S''
sI315
S'        # Begin parsing.'
p6369
sI316
S'        self.parse(text)'
p6370
sI317
S''
sI318
S'    def to_string(self):'
p6371
sI319
S'        """'
p6372
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6373
sg84
g48
sa(dp6374
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6375
sg62
(dp6376
S'self'
p6377
S'<gluon.template.TemplateParser object>'
p6378
sS'extend'
p6379
S'"\'annotate_layout.html\'"'
p6380
sS'self.extend'
p6381
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6382
ssg72
I756
sg73
(dp6383
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6384
sI752
S'            self.child_super_nodes.remove(node)'
p6385
sI753
S''
sI754
S'        # If we need to extend a template.'
p6386
sI755
S'        if extend:'
p6387
sI756
S'            self.extend(extend)'
p6388
sI757
S''
sI758
S'# We need this for integration with gluon'
p6389
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6390
sg84
g188
sa(dp6391
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6392
sg62
(dp6393
S'super_nodes'
p6394
S'[]'
p6395
sS'_super_nodes'
p6396
g114
ssg72
I486
sg73
(dp6397
I481
S'                           name=filename,'
p6398
sI482
S'                           context=self.context,'
p6399
sI483
S'                           path=self.path,'
p6400
sI484
S'                           writer=self.writer,'
p6401
sI485
S'                           delimiters=self.delimiters,'
p6402
sI486
S'                           _super_nodes=super_nodes)'
p6403
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6404
sI489
S'        # template.'
p6405
sI490
S'        buf = BlockNode('
p6406
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6407
sg84
g206
sa(dp6408
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6409
sg62
(dp6410
S'text'
p6411
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6412
sS'self'
p6413
S'<gluon.template.TemplateParser object>'
p6414
sS'self.parse'
p6415
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6416
ssg72
I316
sg73
(dp6417
I320
S'        Return the parsed template with correct indentation.'
p6418
sI311
S'        # This variable will hold a reference to every block'
p6419
sI312
S'        # that we come across in this template'
p6420
sI313
S'        self.blocks = {}'
p6421
sI314
S''
sI315
S'        # Begin parsing.'
p6422
sI316
S'        self.parse(text)'
p6423
sI317
S''
sI318
S'    def to_string(self):'
p6424
sI319
S'        """'
p6425
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6426
sg84
g48
sa(dp6427
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6428
sg62
(dp6429
S'self'
p6430
S'<gluon.template.TemplateParser object>'
p6431
sS'extend'
p6432
S'"\'annotate_layout.html\'"'
p6433
sS'self.extend'
p6434
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6435
ssg72
I756
sg73
(dp6436
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6437
sI752
S'            self.child_super_nodes.remove(node)'
p6438
sI753
S''
sI754
S'        # If we need to extend a template.'
p6439
sI755
S'        if extend:'
p6440
sI756
S'            self.extend(extend)'
p6441
sI757
S''
sI758
S'# We need this for integration with gluon'
p6442
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6443
sg84
g188
sa(dp6444
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6445
sg62
(dp6446
S'super_nodes'
p6447
S'[]'
p6448
sS'_super_nodes'
p6449
g114
ssg72
I486
sg73
(dp6450
I481
S'                           name=filename,'
p6451
sI482
S'                           context=self.context,'
p6452
sI483
S'                           path=self.path,'
p6453
sI484
S'                           writer=self.writer,'
p6454
sI485
S'                           delimiters=self.delimiters,'
p6455
sI486
S'                           _super_nodes=super_nodes)'
p6456
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6457
sI489
S'        # template.'
p6458
sI490
S'        buf = BlockNode('
p6459
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6460
sg84
g206
sa(dp6461
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6462
sg62
(dp6463
S'text'
p6464
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6465
sS'self'
p6466
S'<gluon.template.TemplateParser object>'
p6467
sS'self.parse'
p6468
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6469
ssg72
I316
sg73
(dp6470
I320
S'        Return the parsed template with correct indentation.'
p6471
sI311
S'        # This variable will hold a reference to every block'
p6472
sI312
S'        # that we come across in this template'
p6473
sI313
S'        self.blocks = {}'
p6474
sI314
S''
sI315
S'        # Begin parsing.'
p6475
sI316
S'        self.parse(text)'
p6476
sI317
S''
sI318
S'    def to_string(self):'
p6477
sI319
S'        """'
p6478
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6479
sg84
g48
sa(dp6480
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6481
sg62
(dp6482
S'self'
p6483
S'<gluon.template.TemplateParser object>'
p6484
sS'extend'
p6485
S'"\'annotate_layout.html\'"'
p6486
sS'self.extend'
p6487
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6488
ssg72
I756
sg73
(dp6489
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6490
sI752
S'            self.child_super_nodes.remove(node)'
p6491
sI753
S''
sI754
S'        # If we need to extend a template.'
p6492
sI755
S'        if extend:'
p6493
sI756
S'            self.extend(extend)'
p6494
sI757
S''
sI758
S'# We need this for integration with gluon'
p6495
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6496
sg84
g188
sa(dp6497
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6498
sg62
(dp6499
S'super_nodes'
p6500
S'[]'
p6501
sS'_super_nodes'
p6502
g114
ssg72
I486
sg73
(dp6503
I481
S'                           name=filename,'
p6504
sI482
S'                           context=self.context,'
p6505
sI483
S'                           path=self.path,'
p6506
sI484
S'                           writer=self.writer,'
p6507
sI485
S'                           delimiters=self.delimiters,'
p6508
sI486
S'                           _super_nodes=super_nodes)'
p6509
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6510
sI489
S'        # template.'
p6511
sI490
S'        buf = BlockNode('
p6512
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6513
sg84
g206
sa(dp6514
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6515
sg62
(dp6516
S'text'
p6517
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6518
sS'self'
p6519
S'<gluon.template.TemplateParser object>'
p6520
sS'self.parse'
p6521
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6522
ssg72
I316
sg73
(dp6523
I320
S'        Return the parsed template with correct indentation.'
p6524
sI311
S'        # This variable will hold a reference to every block'
p6525
sI312
S'        # that we come across in this template'
p6526
sI313
S'        self.blocks = {}'
p6527
sI314
S''
sI315
S'        # Begin parsing.'
p6528
sI316
S'        self.parse(text)'
p6529
sI317
S''
sI318
S'    def to_string(self):'
p6530
sI319
S'        """'
p6531
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6532
sg84
g48
sa(dp6533
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6534
sg62
(dp6535
S'self'
p6536
S'<gluon.template.TemplateParser object>'
p6537
sS'extend'
p6538
S'"\'annotate_layout.html\'"'
p6539
sS'self.extend'
p6540
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6541
ssg72
I756
sg73
(dp6542
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6543
sI752
S'            self.child_super_nodes.remove(node)'
p6544
sI753
S''
sI754
S'        # If we need to extend a template.'
p6545
sI755
S'        if extend:'
p6546
sI756
S'            self.extend(extend)'
p6547
sI757
S''
sI758
S'# We need this for integration with gluon'
p6548
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6549
sg84
g188
sa(dp6550
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6551
sg62
(dp6552
S'super_nodes'
p6553
S'[]'
p6554
sS'_super_nodes'
p6555
g114
ssg72
I486
sg73
(dp6556
I481
S'                           name=filename,'
p6557
sI482
S'                           context=self.context,'
p6558
sI483
S'                           path=self.path,'
p6559
sI484
S'                           writer=self.writer,'
p6560
sI485
S'                           delimiters=self.delimiters,'
p6561
sI486
S'                           _super_nodes=super_nodes)'
p6562
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6563
sI489
S'        # template.'
p6564
sI490
S'        buf = BlockNode('
p6565
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6566
sg84
g206
sa(dp6567
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6568
sg62
(dp6569
S'text'
p6570
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6571
sS'self'
p6572
S'<gluon.template.TemplateParser object>'
p6573
sS'self.parse'
p6574
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6575
ssg72
I316
sg73
(dp6576
I320
S'        Return the parsed template with correct indentation.'
p6577
sI311
S'        # This variable will hold a reference to every block'
p6578
sI312
S'        # that we come across in this template'
p6579
sI313
S'        self.blocks = {}'
p6580
sI314
S''
sI315
S'        # Begin parsing.'
p6581
sI316
S'        self.parse(text)'
p6582
sI317
S''
sI318
S'    def to_string(self):'
p6583
sI319
S'        """'
p6584
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6585
sg84
g48
sa(dp6586
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6587
sg62
(dp6588
S'self'
p6589
S'<gluon.template.TemplateParser object>'
p6590
sS'extend'
p6591
S'"\'annotate_layout.html\'"'
p6592
sS'self.extend'
p6593
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6594
ssg72
I756
sg73
(dp6595
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6596
sI752
S'            self.child_super_nodes.remove(node)'
p6597
sI753
S''
sI754
S'        # If we need to extend a template.'
p6598
sI755
S'        if extend:'
p6599
sI756
S'            self.extend(extend)'
p6600
sI757
S''
sI758
S'# We need this for integration with gluon'
p6601
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6602
sg84
g188
sa(dp6603
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6604
sg62
(dp6605
S'super_nodes'
p6606
S'[]'
p6607
sS'_super_nodes'
p6608
g114
ssg72
I486
sg73
(dp6609
I481
S'                           name=filename,'
p6610
sI482
S'                           context=self.context,'
p6611
sI483
S'                           path=self.path,'
p6612
sI484
S'                           writer=self.writer,'
p6613
sI485
S'                           delimiters=self.delimiters,'
p6614
sI486
S'                           _super_nodes=super_nodes)'
p6615
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6616
sI489
S'        # template.'
p6617
sI490
S'        buf = BlockNode('
p6618
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6619
sg84
g206
sa(dp6620
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6621
sg62
(dp6622
S'text'
p6623
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6624
sS'self'
p6625
S'<gluon.template.TemplateParser object>'
p6626
sS'self.parse'
p6627
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6628
ssg72
I316
sg73
(dp6629
I320
S'        Return the parsed template with correct indentation.'
p6630
sI311
S'        # This variable will hold a reference to every block'
p6631
sI312
S'        # that we come across in this template'
p6632
sI313
S'        self.blocks = {}'
p6633
sI314
S''
sI315
S'        # Begin parsing.'
p6634
sI316
S'        self.parse(text)'
p6635
sI317
S''
sI318
S'    def to_string(self):'
p6636
sI319
S'        """'
p6637
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6638
sg84
g48
sa(dp6639
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6640
sg62
(dp6641
S'self'
p6642
S'<gluon.template.TemplateParser object>'
p6643
sS'extend'
p6644
S'"\'annotate_layout.html\'"'
p6645
sS'self.extend'
p6646
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6647
ssg72
I756
sg73
(dp6648
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6649
sI752
S'            self.child_super_nodes.remove(node)'
p6650
sI753
S''
sI754
S'        # If we need to extend a template.'
p6651
sI755
S'        if extend:'
p6652
sI756
S'            self.extend(extend)'
p6653
sI757
S''
sI758
S'# We need this for integration with gluon'
p6654
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6655
sg84
g188
sa(dp6656
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6657
sg62
(dp6658
S'super_nodes'
p6659
S'[]'
p6660
sS'_super_nodes'
p6661
g114
ssg72
I486
sg73
(dp6662
I481
S'                           name=filename,'
p6663
sI482
S'                           context=self.context,'
p6664
sI483
S'                           path=self.path,'
p6665
sI484
S'                           writer=self.writer,'
p6666
sI485
S'                           delimiters=self.delimiters,'
p6667
sI486
S'                           _super_nodes=super_nodes)'
p6668
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6669
sI489
S'        # template.'
p6670
sI490
S'        buf = BlockNode('
p6671
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6672
sg84
g206
sa(dp6673
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6674
sg62
(dp6675
S'text'
p6676
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6677
sS'self'
p6678
S'<gluon.template.TemplateParser object>'
p6679
sS'self.parse'
p6680
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6681
ssg72
I316
sg73
(dp6682
I320
S'        Return the parsed template with correct indentation.'
p6683
sI311
S'        # This variable will hold a reference to every block'
p6684
sI312
S'        # that we come across in this template'
p6685
sI313
S'        self.blocks = {}'
p6686
sI314
S''
sI315
S'        # Begin parsing.'
p6687
sI316
S'        self.parse(text)'
p6688
sI317
S''
sI318
S'    def to_string(self):'
p6689
sI319
S'        """'
p6690
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6691
sg84
g48
sa(dp6692
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6693
sg62
(dp6694
S'self'
p6695
S'<gluon.template.TemplateParser object>'
p6696
sS'extend'
p6697
S'"\'annotate_layout.html\'"'
p6698
sS'self.extend'
p6699
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6700
ssg72
I756
sg73
(dp6701
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6702
sI752
S'            self.child_super_nodes.remove(node)'
p6703
sI753
S''
sI754
S'        # If we need to extend a template.'
p6704
sI755
S'        if extend:'
p6705
sI756
S'            self.extend(extend)'
p6706
sI757
S''
sI758
S'# We need this for integration with gluon'
p6707
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6708
sg84
g188
sa(dp6709
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6710
sg62
(dp6711
S'super_nodes'
p6712
S'[]'
p6713
sS'_super_nodes'
p6714
g114
ssg72
I486
sg73
(dp6715
I481
S'                           name=filename,'
p6716
sI482
S'                           context=self.context,'
p6717
sI483
S'                           path=self.path,'
p6718
sI484
S'                           writer=self.writer,'
p6719
sI485
S'                           delimiters=self.delimiters,'
p6720
sI486
S'                           _super_nodes=super_nodes)'
p6721
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6722
sI489
S'        # template.'
p6723
sI490
S'        buf = BlockNode('
p6724
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6725
sg84
g206
sa(dp6726
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6727
sg62
(dp6728
S'text'
p6729
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6730
sS'self'
p6731
S'<gluon.template.TemplateParser object>'
p6732
sS'self.parse'
p6733
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6734
ssg72
I316
sg73
(dp6735
I320
S'        Return the parsed template with correct indentation.'
p6736
sI311
S'        # This variable will hold a reference to every block'
p6737
sI312
S'        # that we come across in this template'
p6738
sI313
S'        self.blocks = {}'
p6739
sI314
S''
sI315
S'        # Begin parsing.'
p6740
sI316
S'        self.parse(text)'
p6741
sI317
S''
sI318
S'    def to_string(self):'
p6742
sI319
S'        """'
p6743
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6744
sg84
g48
sa(dp6745
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6746
sg62
(dp6747
S'self'
p6748
S'<gluon.template.TemplateParser object>'
p6749
sS'extend'
p6750
S'"\'annotate_layout.html\'"'
p6751
sS'self.extend'
p6752
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6753
ssg72
I756
sg73
(dp6754
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6755
sI752
S'            self.child_super_nodes.remove(node)'
p6756
sI753
S''
sI754
S'        # If we need to extend a template.'
p6757
sI755
S'        if extend:'
p6758
sI756
S'            self.extend(extend)'
p6759
sI757
S''
sI758
S'# We need this for integration with gluon'
p6760
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6761
sg84
g188
sa(dp6762
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6763
sg62
(dp6764
S'super_nodes'
p6765
S'[]'
p6766
sS'_super_nodes'
p6767
g114
ssg72
I486
sg73
(dp6768
I481
S'                           name=filename,'
p6769
sI482
S'                           context=self.context,'
p6770
sI483
S'                           path=self.path,'
p6771
sI484
S'                           writer=self.writer,'
p6772
sI485
S'                           delimiters=self.delimiters,'
p6773
sI486
S'                           _super_nodes=super_nodes)'
p6774
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6775
sI489
S'        # template.'
p6776
sI490
S'        buf = BlockNode('
p6777
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6778
sg84
g206
sa(dp6779
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6780
sg62
(dp6781
S'text'
p6782
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6783
sS'self'
p6784
S'<gluon.template.TemplateParser object>'
p6785
sS'self.parse'
p6786
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6787
ssg72
I316
sg73
(dp6788
I320
S'        Return the parsed template with correct indentation.'
p6789
sI311
S'        # This variable will hold a reference to every block'
p6790
sI312
S'        # that we come across in this template'
p6791
sI313
S'        self.blocks = {}'
p6792
sI314
S''
sI315
S'        # Begin parsing.'
p6793
sI316
S'        self.parse(text)'
p6794
sI317
S''
sI318
S'    def to_string(self):'
p6795
sI319
S'        """'
p6796
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6797
sg84
g48
sa(dp6798
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6799
sg62
(dp6800
S'self'
p6801
S'<gluon.template.TemplateParser object>'
p6802
sS'extend'
p6803
S'"\'annotate_layout.html\'"'
p6804
sS'self.extend'
p6805
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6806
ssg72
I756
sg73
(dp6807
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6808
sI752
S'            self.child_super_nodes.remove(node)'
p6809
sI753
S''
sI754
S'        # If we need to extend a template.'
p6810
sI755
S'        if extend:'
p6811
sI756
S'            self.extend(extend)'
p6812
sI757
S''
sI758
S'# We need this for integration with gluon'
p6813
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6814
sg84
g188
sa(dp6815
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6816
sg62
(dp6817
S'super_nodes'
p6818
S'[]'
p6819
sS'_super_nodes'
p6820
g114
ssg72
I486
sg73
(dp6821
I481
S'                           name=filename,'
p6822
sI482
S'                           context=self.context,'
p6823
sI483
S'                           path=self.path,'
p6824
sI484
S'                           writer=self.writer,'
p6825
sI485
S'                           delimiters=self.delimiters,'
p6826
sI486
S'                           _super_nodes=super_nodes)'
p6827
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6828
sI489
S'        # template.'
p6829
sI490
S'        buf = BlockNode('
p6830
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6831
sg84
g206
sa(dp6832
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6833
sg62
(dp6834
S'text'
p6835
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6836
sS'self'
p6837
S'<gluon.template.TemplateParser object>'
p6838
sS'self.parse'
p6839
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6840
ssg72
I316
sg73
(dp6841
I320
S'        Return the parsed template with correct indentation.'
p6842
sI311
S'        # This variable will hold a reference to every block'
p6843
sI312
S'        # that we come across in this template'
p6844
sI313
S'        self.blocks = {}'
p6845
sI314
S''
sI315
S'        # Begin parsing.'
p6846
sI316
S'        self.parse(text)'
p6847
sI317
S''
sI318
S'    def to_string(self):'
p6848
sI319
S'        """'
p6849
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6850
sg84
g48
sa(dp6851
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6852
sg62
(dp6853
S'self'
p6854
S'<gluon.template.TemplateParser object>'
p6855
sS'extend'
p6856
S'"\'annotate_layout.html\'"'
p6857
sS'self.extend'
p6858
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6859
ssg72
I756
sg73
(dp6860
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6861
sI752
S'            self.child_super_nodes.remove(node)'
p6862
sI753
S''
sI754
S'        # If we need to extend a template.'
p6863
sI755
S'        if extend:'
p6864
sI756
S'            self.extend(extend)'
p6865
sI757
S''
sI758
S'# We need this for integration with gluon'
p6866
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6867
sg84
g188
sa(dp6868
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6869
sg62
(dp6870
S'super_nodes'
p6871
S'[]'
p6872
sS'_super_nodes'
p6873
g114
ssg72
I486
sg73
(dp6874
I481
S'                           name=filename,'
p6875
sI482
S'                           context=self.context,'
p6876
sI483
S'                           path=self.path,'
p6877
sI484
S'                           writer=self.writer,'
p6878
sI485
S'                           delimiters=self.delimiters,'
p6879
sI486
S'                           _super_nodes=super_nodes)'
p6880
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6881
sI489
S'        # template.'
p6882
sI490
S'        buf = BlockNode('
p6883
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6884
sg84
g206
sa(dp6885
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6886
sg62
(dp6887
S'text'
p6888
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6889
sS'self'
p6890
S'<gluon.template.TemplateParser object>'
p6891
sS'self.parse'
p6892
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6893
ssg72
I316
sg73
(dp6894
I320
S'        Return the parsed template with correct indentation.'
p6895
sI311
S'        # This variable will hold a reference to every block'
p6896
sI312
S'        # that we come across in this template'
p6897
sI313
S'        self.blocks = {}'
p6898
sI314
S''
sI315
S'        # Begin parsing.'
p6899
sI316
S'        self.parse(text)'
p6900
sI317
S''
sI318
S'    def to_string(self):'
p6901
sI319
S'        """'
p6902
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6903
sg84
g48
sa(dp6904
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6905
sg62
(dp6906
S'self'
p6907
S'<gluon.template.TemplateParser object>'
p6908
sS'extend'
p6909
S'"\'annotate_layout.html\'"'
p6910
sS'self.extend'
p6911
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6912
ssg72
I756
sg73
(dp6913
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6914
sI752
S'            self.child_super_nodes.remove(node)'
p6915
sI753
S''
sI754
S'        # If we need to extend a template.'
p6916
sI755
S'        if extend:'
p6917
sI756
S'            self.extend(extend)'
p6918
sI757
S''
sI758
S'# We need this for integration with gluon'
p6919
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6920
sg84
g188
sa(dp6921
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6922
sg62
(dp6923
S'super_nodes'
p6924
S'[]'
p6925
sS'_super_nodes'
p6926
g114
ssg72
I486
sg73
(dp6927
I481
S'                           name=filename,'
p6928
sI482
S'                           context=self.context,'
p6929
sI483
S'                           path=self.path,'
p6930
sI484
S'                           writer=self.writer,'
p6931
sI485
S'                           delimiters=self.delimiters,'
p6932
sI486
S'                           _super_nodes=super_nodes)'
p6933
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6934
sI489
S'        # template.'
p6935
sI490
S'        buf = BlockNode('
p6936
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6937
sg84
g206
sa(dp6938
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6939
sg62
(dp6940
S'text'
p6941
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6942
sS'self'
p6943
S'<gluon.template.TemplateParser object>'
p6944
sS'self.parse'
p6945
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6946
ssg72
I316
sg73
(dp6947
I320
S'        Return the parsed template with correct indentation.'
p6948
sI311
S'        # This variable will hold a reference to every block'
p6949
sI312
S'        # that we come across in this template'
p6950
sI313
S'        self.blocks = {}'
p6951
sI314
S''
sI315
S'        # Begin parsing.'
p6952
sI316
S'        self.parse(text)'
p6953
sI317
S''
sI318
S'    def to_string(self):'
p6954
sI319
S'        """'
p6955
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p6956
sg84
g48
sa(dp6957
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6958
sg62
(dp6959
S'self'
p6960
S'<gluon.template.TemplateParser object>'
p6961
sS'extend'
p6962
S'"\'annotate_layout.html\'"'
p6963
sS'self.extend'
p6964
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p6965
ssg72
I756
sg73
(dp6966
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p6967
sI752
S'            self.child_super_nodes.remove(node)'
p6968
sI753
S''
sI754
S'        # If we need to extend a template.'
p6969
sI755
S'        if extend:'
p6970
sI756
S'            self.extend(extend)'
p6971
sI757
S''
sI758
S'# We need this for integration with gluon'
p6972
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p6973
sg84
g188
sa(dp6974
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6975
sg62
(dp6976
S'super_nodes'
p6977
S'[]'
p6978
sS'_super_nodes'
p6979
g114
ssg72
I486
sg73
(dp6980
I481
S'                           name=filename,'
p6981
sI482
S'                           context=self.context,'
p6982
sI483
S'                           path=self.path,'
p6983
sI484
S'                           writer=self.writer,'
p6984
sI485
S'                           delimiters=self.delimiters,'
p6985
sI486
S'                           _super_nodes=super_nodes)'
p6986
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p6987
sI489
S'        # template.'
p6988
sI490
S'        buf = BlockNode('
p6989
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p6990
sg84
g206
sa(dp6991
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p6992
sg62
(dp6993
S'text'
p6994
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p6995
sS'self'
p6996
S'<gluon.template.TemplateParser object>'
p6997
sS'self.parse'
p6998
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p6999
ssg72
I316
sg73
(dp7000
I320
S'        Return the parsed template with correct indentation.'
p7001
sI311
S'        # This variable will hold a reference to every block'
p7002
sI312
S'        # that we come across in this template'
p7003
sI313
S'        self.blocks = {}'
p7004
sI314
S''
sI315
S'        # Begin parsing.'
p7005
sI316
S'        self.parse(text)'
p7006
sI317
S''
sI318
S'    def to_string(self):'
p7007
sI319
S'        """'
p7008
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7009
sg84
g48
sa(dp7010
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7011
sg62
(dp7012
S'self'
p7013
S'<gluon.template.TemplateParser object>'
p7014
sS'extend'
p7015
S'"\'annotate_layout.html\'"'
p7016
sS'self.extend'
p7017
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7018
ssg72
I756
sg73
(dp7019
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7020
sI752
S'            self.child_super_nodes.remove(node)'
p7021
sI753
S''
sI754
S'        # If we need to extend a template.'
p7022
sI755
S'        if extend:'
p7023
sI756
S'            self.extend(extend)'
p7024
sI757
S''
sI758
S'# We need this for integration with gluon'
p7025
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7026
sg84
g188
sa(dp7027
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7028
sg62
(dp7029
S'super_nodes'
p7030
S'[]'
p7031
sS'_super_nodes'
p7032
g114
ssg72
I486
sg73
(dp7033
I481
S'                           name=filename,'
p7034
sI482
S'                           context=self.context,'
p7035
sI483
S'                           path=self.path,'
p7036
sI484
S'                           writer=self.writer,'
p7037
sI485
S'                           delimiters=self.delimiters,'
p7038
sI486
S'                           _super_nodes=super_nodes)'
p7039
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7040
sI489
S'        # template.'
p7041
sI490
S'        buf = BlockNode('
p7042
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7043
sg84
g206
sa(dp7044
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7045
sg62
(dp7046
S'text'
p7047
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7048
sS'self'
p7049
S'<gluon.template.TemplateParser object>'
p7050
sS'self.parse'
p7051
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7052
ssg72
I316
sg73
(dp7053
I320
S'        Return the parsed template with correct indentation.'
p7054
sI311
S'        # This variable will hold a reference to every block'
p7055
sI312
S'        # that we come across in this template'
p7056
sI313
S'        self.blocks = {}'
p7057
sI314
S''
sI315
S'        # Begin parsing.'
p7058
sI316
S'        self.parse(text)'
p7059
sI317
S''
sI318
S'    def to_string(self):'
p7060
sI319
S'        """'
p7061
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7062
sg84
g48
sa(dp7063
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7064
sg62
(dp7065
S'self'
p7066
S'<gluon.template.TemplateParser object>'
p7067
sS'extend'
p7068
S'"\'annotate_layout.html\'"'
p7069
sS'self.extend'
p7070
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7071
ssg72
I756
sg73
(dp7072
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7073
sI752
S'            self.child_super_nodes.remove(node)'
p7074
sI753
S''
sI754
S'        # If we need to extend a template.'
p7075
sI755
S'        if extend:'
p7076
sI756
S'            self.extend(extend)'
p7077
sI757
S''
sI758
S'# We need this for integration with gluon'
p7078
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7079
sg84
g188
sa(dp7080
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7081
sg62
(dp7082
S'super_nodes'
p7083
S'[]'
p7084
sS'_super_nodes'
p7085
g114
ssg72
I486
sg73
(dp7086
I481
S'                           name=filename,'
p7087
sI482
S'                           context=self.context,'
p7088
sI483
S'                           path=self.path,'
p7089
sI484
S'                           writer=self.writer,'
p7090
sI485
S'                           delimiters=self.delimiters,'
p7091
sI486
S'                           _super_nodes=super_nodes)'
p7092
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7093
sI489
S'        # template.'
p7094
sI490
S'        buf = BlockNode('
p7095
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7096
sg84
g206
sa(dp7097
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7098
sg62
(dp7099
S'text'
p7100
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7101
sS'self'
p7102
S'<gluon.template.TemplateParser object>'
p7103
sS'self.parse'
p7104
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7105
ssg72
I316
sg73
(dp7106
I320
S'        Return the parsed template with correct indentation.'
p7107
sI311
S'        # This variable will hold a reference to every block'
p7108
sI312
S'        # that we come across in this template'
p7109
sI313
S'        self.blocks = {}'
p7110
sI314
S''
sI315
S'        # Begin parsing.'
p7111
sI316
S'        self.parse(text)'
p7112
sI317
S''
sI318
S'    def to_string(self):'
p7113
sI319
S'        """'
p7114
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7115
sg84
g48
sa(dp7116
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7117
sg62
(dp7118
S'self'
p7119
S'<gluon.template.TemplateParser object>'
p7120
sS'extend'
p7121
S'"\'annotate_layout.html\'"'
p7122
sS'self.extend'
p7123
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7124
ssg72
I756
sg73
(dp7125
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7126
sI752
S'            self.child_super_nodes.remove(node)'
p7127
sI753
S''
sI754
S'        # If we need to extend a template.'
p7128
sI755
S'        if extend:'
p7129
sI756
S'            self.extend(extend)'
p7130
sI757
S''
sI758
S'# We need this for integration with gluon'
p7131
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7132
sg84
g188
sa(dp7133
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7134
sg62
(dp7135
S'super_nodes'
p7136
S'[]'
p7137
sS'_super_nodes'
p7138
g114
ssg72
I486
sg73
(dp7139
I481
S'                           name=filename,'
p7140
sI482
S'                           context=self.context,'
p7141
sI483
S'                           path=self.path,'
p7142
sI484
S'                           writer=self.writer,'
p7143
sI485
S'                           delimiters=self.delimiters,'
p7144
sI486
S'                           _super_nodes=super_nodes)'
p7145
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7146
sI489
S'        # template.'
p7147
sI490
S'        buf = BlockNode('
p7148
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7149
sg84
g206
sa(dp7150
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7151
sg62
(dp7152
S'text'
p7153
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7154
sS'self'
p7155
S'<gluon.template.TemplateParser object>'
p7156
sS'self.parse'
p7157
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7158
ssg72
I316
sg73
(dp7159
I320
S'        Return the parsed template with correct indentation.'
p7160
sI311
S'        # This variable will hold a reference to every block'
p7161
sI312
S'        # that we come across in this template'
p7162
sI313
S'        self.blocks = {}'
p7163
sI314
S''
sI315
S'        # Begin parsing.'
p7164
sI316
S'        self.parse(text)'
p7165
sI317
S''
sI318
S'    def to_string(self):'
p7166
sI319
S'        """'
p7167
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7168
sg84
g48
sa(dp7169
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7170
sg62
(dp7171
S'self'
p7172
S'<gluon.template.TemplateParser object>'
p7173
sS'extend'
p7174
S'"\'annotate_layout.html\'"'
p7175
sS'self.extend'
p7176
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7177
ssg72
I756
sg73
(dp7178
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7179
sI752
S'            self.child_super_nodes.remove(node)'
p7180
sI753
S''
sI754
S'        # If we need to extend a template.'
p7181
sI755
S'        if extend:'
p7182
sI756
S'            self.extend(extend)'
p7183
sI757
S''
sI758
S'# We need this for integration with gluon'
p7184
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7185
sg84
g188
sa(dp7186
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7187
sg62
(dp7188
S'super_nodes'
p7189
S'[]'
p7190
sS'_super_nodes'
p7191
g114
ssg72
I486
sg73
(dp7192
I481
S'                           name=filename,'
p7193
sI482
S'                           context=self.context,'
p7194
sI483
S'                           path=self.path,'
p7195
sI484
S'                           writer=self.writer,'
p7196
sI485
S'                           delimiters=self.delimiters,'
p7197
sI486
S'                           _super_nodes=super_nodes)'
p7198
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7199
sI489
S'        # template.'
p7200
sI490
S'        buf = BlockNode('
p7201
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7202
sg84
g206
sa(dp7203
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7204
sg62
(dp7205
S'text'
p7206
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7207
sS'self'
p7208
S'<gluon.template.TemplateParser object>'
p7209
sS'self.parse'
p7210
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7211
ssg72
I316
sg73
(dp7212
I320
S'        Return the parsed template with correct indentation.'
p7213
sI311
S'        # This variable will hold a reference to every block'
p7214
sI312
S'        # that we come across in this template'
p7215
sI313
S'        self.blocks = {}'
p7216
sI314
S''
sI315
S'        # Begin parsing.'
p7217
sI316
S'        self.parse(text)'
p7218
sI317
S''
sI318
S'    def to_string(self):'
p7219
sI319
S'        """'
p7220
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7221
sg84
g48
sa(dp7222
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7223
sg62
(dp7224
S'self'
p7225
S'<gluon.template.TemplateParser object>'
p7226
sS'extend'
p7227
S'"\'annotate_layout.html\'"'
p7228
sS'self.extend'
p7229
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7230
ssg72
I756
sg73
(dp7231
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7232
sI752
S'            self.child_super_nodes.remove(node)'
p7233
sI753
S''
sI754
S'        # If we need to extend a template.'
p7234
sI755
S'        if extend:'
p7235
sI756
S'            self.extend(extend)'
p7236
sI757
S''
sI758
S'# We need this for integration with gluon'
p7237
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7238
sg84
g188
sa(dp7239
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7240
sg62
(dp7241
S'super_nodes'
p7242
S'[]'
p7243
sS'_super_nodes'
p7244
g114
ssg72
I486
sg73
(dp7245
I481
S'                           name=filename,'
p7246
sI482
S'                           context=self.context,'
p7247
sI483
S'                           path=self.path,'
p7248
sI484
S'                           writer=self.writer,'
p7249
sI485
S'                           delimiters=self.delimiters,'
p7250
sI486
S'                           _super_nodes=super_nodes)'
p7251
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7252
sI489
S'        # template.'
p7253
sI490
S'        buf = BlockNode('
p7254
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7255
sg84
g206
sa(dp7256
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7257
sg62
(dp7258
S'text'
p7259
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7260
sS'self'
p7261
S'<gluon.template.TemplateParser object>'
p7262
sS'self.parse'
p7263
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7264
ssg72
I316
sg73
(dp7265
I320
S'        Return the parsed template with correct indentation.'
p7266
sI311
S'        # This variable will hold a reference to every block'
p7267
sI312
S'        # that we come across in this template'
p7268
sI313
S'        self.blocks = {}'
p7269
sI314
S''
sI315
S'        # Begin parsing.'
p7270
sI316
S'        self.parse(text)'
p7271
sI317
S''
sI318
S'    def to_string(self):'
p7272
sI319
S'        """'
p7273
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7274
sg84
g48
sa(dp7275
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7276
sg62
(dp7277
S'self'
p7278
S'<gluon.template.TemplateParser object>'
p7279
sS'extend'
p7280
S'"\'annotate_layout.html\'"'
p7281
sS'self.extend'
p7282
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7283
ssg72
I756
sg73
(dp7284
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7285
sI752
S'            self.child_super_nodes.remove(node)'
p7286
sI753
S''
sI754
S'        # If we need to extend a template.'
p7287
sI755
S'        if extend:'
p7288
sI756
S'            self.extend(extend)'
p7289
sI757
S''
sI758
S'# We need this for integration with gluon'
p7290
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7291
sg84
g188
sa(dp7292
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7293
sg62
(dp7294
S'super_nodes'
p7295
S'[]'
p7296
sS'_super_nodes'
p7297
g114
ssg72
I486
sg73
(dp7298
I481
S'                           name=filename,'
p7299
sI482
S'                           context=self.context,'
p7300
sI483
S'                           path=self.path,'
p7301
sI484
S'                           writer=self.writer,'
p7302
sI485
S'                           delimiters=self.delimiters,'
p7303
sI486
S'                           _super_nodes=super_nodes)'
p7304
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7305
sI489
S'        # template.'
p7306
sI490
S'        buf = BlockNode('
p7307
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7308
sg84
g206
sa(dp7309
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7310
sg62
(dp7311
S'text'
p7312
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7313
sS'self'
p7314
S'<gluon.template.TemplateParser object>'
p7315
sS'self.parse'
p7316
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7317
ssg72
I316
sg73
(dp7318
I320
S'        Return the parsed template with correct indentation.'
p7319
sI311
S'        # This variable will hold a reference to every block'
p7320
sI312
S'        # that we come across in this template'
p7321
sI313
S'        self.blocks = {}'
p7322
sI314
S''
sI315
S'        # Begin parsing.'
p7323
sI316
S'        self.parse(text)'
p7324
sI317
S''
sI318
S'    def to_string(self):'
p7325
sI319
S'        """'
p7326
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7327
sg84
g48
sa(dp7328
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7329
sg62
(dp7330
S'self'
p7331
S'<gluon.template.TemplateParser object>'
p7332
sS'extend'
p7333
S'"\'annotate_layout.html\'"'
p7334
sS'self.extend'
p7335
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7336
ssg72
I756
sg73
(dp7337
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7338
sI752
S'            self.child_super_nodes.remove(node)'
p7339
sI753
S''
sI754
S'        # If we need to extend a template.'
p7340
sI755
S'        if extend:'
p7341
sI756
S'            self.extend(extend)'
p7342
sI757
S''
sI758
S'# We need this for integration with gluon'
p7343
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7344
sg84
g188
sa(dp7345
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7346
sg62
(dp7347
S'super_nodes'
p7348
S'[]'
p7349
sS'_super_nodes'
p7350
g114
ssg72
I486
sg73
(dp7351
I481
S'                           name=filename,'
p7352
sI482
S'                           context=self.context,'
p7353
sI483
S'                           path=self.path,'
p7354
sI484
S'                           writer=self.writer,'
p7355
sI485
S'                           delimiters=self.delimiters,'
p7356
sI486
S'                           _super_nodes=super_nodes)'
p7357
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7358
sI489
S'        # template.'
p7359
sI490
S'        buf = BlockNode('
p7360
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7361
sg84
g206
sa(dp7362
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7363
sg62
(dp7364
S'text'
p7365
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7366
sS'self'
p7367
S'<gluon.template.TemplateParser object>'
p7368
sS'self.parse'
p7369
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7370
ssg72
I316
sg73
(dp7371
I320
S'        Return the parsed template with correct indentation.'
p7372
sI311
S'        # This variable will hold a reference to every block'
p7373
sI312
S'        # that we come across in this template'
p7374
sI313
S'        self.blocks = {}'
p7375
sI314
S''
sI315
S'        # Begin parsing.'
p7376
sI316
S'        self.parse(text)'
p7377
sI317
S''
sI318
S'    def to_string(self):'
p7378
sI319
S'        """'
p7379
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7380
sg84
g48
sa(dp7381
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7382
sg62
(dp7383
S'self'
p7384
S'<gluon.template.TemplateParser object>'
p7385
sS'extend'
p7386
S'"\'annotate_layout.html\'"'
p7387
sS'self.extend'
p7388
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7389
ssg72
I756
sg73
(dp7390
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7391
sI752
S'            self.child_super_nodes.remove(node)'
p7392
sI753
S''
sI754
S'        # If we need to extend a template.'
p7393
sI755
S'        if extend:'
p7394
sI756
S'            self.extend(extend)'
p7395
sI757
S''
sI758
S'# We need this for integration with gluon'
p7396
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7397
sg84
g188
sa(dp7398
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7399
sg62
(dp7400
S'super_nodes'
p7401
S'[]'
p7402
sS'_super_nodes'
p7403
g114
ssg72
I486
sg73
(dp7404
I481
S'                           name=filename,'
p7405
sI482
S'                           context=self.context,'
p7406
sI483
S'                           path=self.path,'
p7407
sI484
S'                           writer=self.writer,'
p7408
sI485
S'                           delimiters=self.delimiters,'
p7409
sI486
S'                           _super_nodes=super_nodes)'
p7410
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7411
sI489
S'        # template.'
p7412
sI490
S'        buf = BlockNode('
p7413
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7414
sg84
g206
sa(dp7415
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7416
sg62
(dp7417
S'text'
p7418
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7419
sS'self'
p7420
S'<gluon.template.TemplateParser object>'
p7421
sS'self.parse'
p7422
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7423
ssg72
I316
sg73
(dp7424
I320
S'        Return the parsed template with correct indentation.'
p7425
sI311
S'        # This variable will hold a reference to every block'
p7426
sI312
S'        # that we come across in this template'
p7427
sI313
S'        self.blocks = {}'
p7428
sI314
S''
sI315
S'        # Begin parsing.'
p7429
sI316
S'        self.parse(text)'
p7430
sI317
S''
sI318
S'    def to_string(self):'
p7431
sI319
S'        """'
p7432
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7433
sg84
g48
sa(dp7434
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7435
sg62
(dp7436
S'self'
p7437
S'<gluon.template.TemplateParser object>'
p7438
sS'extend'
p7439
S'"\'annotate_layout.html\'"'
p7440
sS'self.extend'
p7441
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7442
ssg72
I756
sg73
(dp7443
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7444
sI752
S'            self.child_super_nodes.remove(node)'
p7445
sI753
S''
sI754
S'        # If we need to extend a template.'
p7446
sI755
S'        if extend:'
p7447
sI756
S'            self.extend(extend)'
p7448
sI757
S''
sI758
S'# We need this for integration with gluon'
p7449
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7450
sg84
g188
sa(dp7451
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7452
sg62
(dp7453
S'super_nodes'
p7454
S'[]'
p7455
sS'_super_nodes'
p7456
g114
ssg72
I486
sg73
(dp7457
I481
S'                           name=filename,'
p7458
sI482
S'                           context=self.context,'
p7459
sI483
S'                           path=self.path,'
p7460
sI484
S'                           writer=self.writer,'
p7461
sI485
S'                           delimiters=self.delimiters,'
p7462
sI486
S'                           _super_nodes=super_nodes)'
p7463
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7464
sI489
S'        # template.'
p7465
sI490
S'        buf = BlockNode('
p7466
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7467
sg84
g206
sa(dp7468
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7469
sg62
(dp7470
S'text'
p7471
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7472
sS'self'
p7473
S'<gluon.template.TemplateParser object>'
p7474
sS'self.parse'
p7475
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7476
ssg72
I316
sg73
(dp7477
I320
S'        Return the parsed template with correct indentation.'
p7478
sI311
S'        # This variable will hold a reference to every block'
p7479
sI312
S'        # that we come across in this template'
p7480
sI313
S'        self.blocks = {}'
p7481
sI314
S''
sI315
S'        # Begin parsing.'
p7482
sI316
S'        self.parse(text)'
p7483
sI317
S''
sI318
S'    def to_string(self):'
p7484
sI319
S'        """'
p7485
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7486
sg84
g48
sa(dp7487
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7488
sg62
(dp7489
S'self'
p7490
S'<gluon.template.TemplateParser object>'
p7491
sS'extend'
p7492
S'"\'annotate_layout.html\'"'
p7493
sS'self.extend'
p7494
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7495
ssg72
I756
sg73
(dp7496
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7497
sI752
S'            self.child_super_nodes.remove(node)'
p7498
sI753
S''
sI754
S'        # If we need to extend a template.'
p7499
sI755
S'        if extend:'
p7500
sI756
S'            self.extend(extend)'
p7501
sI757
S''
sI758
S'# We need this for integration with gluon'
p7502
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7503
sg84
g188
sa(dp7504
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7505
sg62
(dp7506
S'super_nodes'
p7507
S'[]'
p7508
sS'_super_nodes'
p7509
g114
ssg72
I486
sg73
(dp7510
I481
S'                           name=filename,'
p7511
sI482
S'                           context=self.context,'
p7512
sI483
S'                           path=self.path,'
p7513
sI484
S'                           writer=self.writer,'
p7514
sI485
S'                           delimiters=self.delimiters,'
p7515
sI486
S'                           _super_nodes=super_nodes)'
p7516
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7517
sI489
S'        # template.'
p7518
sI490
S'        buf = BlockNode('
p7519
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7520
sg84
g206
sa(dp7521
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7522
sg62
(dp7523
S'text'
p7524
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7525
sS'self'
p7526
S'<gluon.template.TemplateParser object>'
p7527
sS'self.parse'
p7528
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7529
ssg72
I316
sg73
(dp7530
I320
S'        Return the parsed template with correct indentation.'
p7531
sI311
S'        # This variable will hold a reference to every block'
p7532
sI312
S'        # that we come across in this template'
p7533
sI313
S'        self.blocks = {}'
p7534
sI314
S''
sI315
S'        # Begin parsing.'
p7535
sI316
S'        self.parse(text)'
p7536
sI317
S''
sI318
S'    def to_string(self):'
p7537
sI319
S'        """'
p7538
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7539
sg84
g48
sa(dp7540
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7541
sg62
(dp7542
S'self'
p7543
S'<gluon.template.TemplateParser object>'
p7544
sS'extend'
p7545
S'"\'annotate_layout.html\'"'
p7546
sS'self.extend'
p7547
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7548
ssg72
I756
sg73
(dp7549
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7550
sI752
S'            self.child_super_nodes.remove(node)'
p7551
sI753
S''
sI754
S'        # If we need to extend a template.'
p7552
sI755
S'        if extend:'
p7553
sI756
S'            self.extend(extend)'
p7554
sI757
S''
sI758
S'# We need this for integration with gluon'
p7555
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7556
sg84
g188
sa(dp7557
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7558
sg62
(dp7559
S'super_nodes'
p7560
S'[]'
p7561
sS'_super_nodes'
p7562
g114
ssg72
I486
sg73
(dp7563
I481
S'                           name=filename,'
p7564
sI482
S'                           context=self.context,'
p7565
sI483
S'                           path=self.path,'
p7566
sI484
S'                           writer=self.writer,'
p7567
sI485
S'                           delimiters=self.delimiters,'
p7568
sI486
S'                           _super_nodes=super_nodes)'
p7569
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7570
sI489
S'        # template.'
p7571
sI490
S'        buf = BlockNode('
p7572
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7573
sg84
g206
sa(dp7574
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7575
sg62
(dp7576
S'text'
p7577
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7578
sS'self'
p7579
S'<gluon.template.TemplateParser object>'
p7580
sS'self.parse'
p7581
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7582
ssg72
I316
sg73
(dp7583
I320
S'        Return the parsed template with correct indentation.'
p7584
sI311
S'        # This variable will hold a reference to every block'
p7585
sI312
S'        # that we come across in this template'
p7586
sI313
S'        self.blocks = {}'
p7587
sI314
S''
sI315
S'        # Begin parsing.'
p7588
sI316
S'        self.parse(text)'
p7589
sI317
S''
sI318
S'    def to_string(self):'
p7590
sI319
S'        """'
p7591
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7592
sg84
g48
sa(dp7593
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7594
sg62
(dp7595
S'self'
p7596
S'<gluon.template.TemplateParser object>'
p7597
sS'extend'
p7598
S'"\'annotate_layout.html\'"'
p7599
sS'self.extend'
p7600
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7601
ssg72
I756
sg73
(dp7602
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7603
sI752
S'            self.child_super_nodes.remove(node)'
p7604
sI753
S''
sI754
S'        # If we need to extend a template.'
p7605
sI755
S'        if extend:'
p7606
sI756
S'            self.extend(extend)'
p7607
sI757
S''
sI758
S'# We need this for integration with gluon'
p7608
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7609
sg84
g188
sa(dp7610
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7611
sg62
(dp7612
S'super_nodes'
p7613
S'[]'
p7614
sS'_super_nodes'
p7615
g114
ssg72
I486
sg73
(dp7616
I481
S'                           name=filename,'
p7617
sI482
S'                           context=self.context,'
p7618
sI483
S'                           path=self.path,'
p7619
sI484
S'                           writer=self.writer,'
p7620
sI485
S'                           delimiters=self.delimiters,'
p7621
sI486
S'                           _super_nodes=super_nodes)'
p7622
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7623
sI489
S'        # template.'
p7624
sI490
S'        buf = BlockNode('
p7625
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7626
sg84
g206
sa(dp7627
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7628
sg62
(dp7629
S'text'
p7630
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7631
sS'self'
p7632
S'<gluon.template.TemplateParser object>'
p7633
sS'self.parse'
p7634
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7635
ssg72
I316
sg73
(dp7636
I320
S'        Return the parsed template with correct indentation.'
p7637
sI311
S'        # This variable will hold a reference to every block'
p7638
sI312
S'        # that we come across in this template'
p7639
sI313
S'        self.blocks = {}'
p7640
sI314
S''
sI315
S'        # Begin parsing.'
p7641
sI316
S'        self.parse(text)'
p7642
sI317
S''
sI318
S'    def to_string(self):'
p7643
sI319
S'        """'
p7644
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7645
sg84
g48
sa(dp7646
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7647
sg62
(dp7648
S'self'
p7649
S'<gluon.template.TemplateParser object>'
p7650
sS'extend'
p7651
S'"\'annotate_layout.html\'"'
p7652
sS'self.extend'
p7653
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7654
ssg72
I756
sg73
(dp7655
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7656
sI752
S'            self.child_super_nodes.remove(node)'
p7657
sI753
S''
sI754
S'        # If we need to extend a template.'
p7658
sI755
S'        if extend:'
p7659
sI756
S'            self.extend(extend)'
p7660
sI757
S''
sI758
S'# We need this for integration with gluon'
p7661
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7662
sg84
g188
sa(dp7663
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7664
sg62
(dp7665
S'super_nodes'
p7666
S'[]'
p7667
sS'_super_nodes'
p7668
g114
ssg72
I486
sg73
(dp7669
I481
S'                           name=filename,'
p7670
sI482
S'                           context=self.context,'
p7671
sI483
S'                           path=self.path,'
p7672
sI484
S'                           writer=self.writer,'
p7673
sI485
S'                           delimiters=self.delimiters,'
p7674
sI486
S'                           _super_nodes=super_nodes)'
p7675
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7676
sI489
S'        # template.'
p7677
sI490
S'        buf = BlockNode('
p7678
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7679
sg84
g206
sa(dp7680
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7681
sg62
(dp7682
S'text'
p7683
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7684
sS'self'
p7685
S'<gluon.template.TemplateParser object>'
p7686
sS'self.parse'
p7687
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7688
ssg72
I316
sg73
(dp7689
I320
S'        Return the parsed template with correct indentation.'
p7690
sI311
S'        # This variable will hold a reference to every block'
p7691
sI312
S'        # that we come across in this template'
p7692
sI313
S'        self.blocks = {}'
p7693
sI314
S''
sI315
S'        # Begin parsing.'
p7694
sI316
S'        self.parse(text)'
p7695
sI317
S''
sI318
S'    def to_string(self):'
p7696
sI319
S'        """'
p7697
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7698
sg84
g48
sa(dp7699
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7700
sg62
(dp7701
S'self'
p7702
S'<gluon.template.TemplateParser object>'
p7703
sS'extend'
p7704
S'"\'annotate_layout.html\'"'
p7705
sS'self.extend'
p7706
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7707
ssg72
I756
sg73
(dp7708
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7709
sI752
S'            self.child_super_nodes.remove(node)'
p7710
sI753
S''
sI754
S'        # If we need to extend a template.'
p7711
sI755
S'        if extend:'
p7712
sI756
S'            self.extend(extend)'
p7713
sI757
S''
sI758
S'# We need this for integration with gluon'
p7714
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7715
sg84
g188
sa(dp7716
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7717
sg62
(dp7718
S'super_nodes'
p7719
S'[]'
p7720
sS'_super_nodes'
p7721
g114
ssg72
I486
sg73
(dp7722
I481
S'                           name=filename,'
p7723
sI482
S'                           context=self.context,'
p7724
sI483
S'                           path=self.path,'
p7725
sI484
S'                           writer=self.writer,'
p7726
sI485
S'                           delimiters=self.delimiters,'
p7727
sI486
S'                           _super_nodes=super_nodes)'
p7728
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7729
sI489
S'        # template.'
p7730
sI490
S'        buf = BlockNode('
p7731
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7732
sg84
g206
sa(dp7733
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7734
sg62
(dp7735
S'text'
p7736
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7737
sS'self'
p7738
S'<gluon.template.TemplateParser object>'
p7739
sS'self.parse'
p7740
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7741
ssg72
I316
sg73
(dp7742
I320
S'        Return the parsed template with correct indentation.'
p7743
sI311
S'        # This variable will hold a reference to every block'
p7744
sI312
S'        # that we come across in this template'
p7745
sI313
S'        self.blocks = {}'
p7746
sI314
S''
sI315
S'        # Begin parsing.'
p7747
sI316
S'        self.parse(text)'
p7748
sI317
S''
sI318
S'    def to_string(self):'
p7749
sI319
S'        """'
p7750
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7751
sg84
g48
sa(dp7752
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7753
sg62
(dp7754
S'self'
p7755
S'<gluon.template.TemplateParser object>'
p7756
sS'extend'
p7757
S'"\'annotate_layout.html\'"'
p7758
sS'self.extend'
p7759
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7760
ssg72
I756
sg73
(dp7761
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7762
sI752
S'            self.child_super_nodes.remove(node)'
p7763
sI753
S''
sI754
S'        # If we need to extend a template.'
p7764
sI755
S'        if extend:'
p7765
sI756
S'            self.extend(extend)'
p7766
sI757
S''
sI758
S'# We need this for integration with gluon'
p7767
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7768
sg84
g188
sa(dp7769
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7770
sg62
(dp7771
S'super_nodes'
p7772
S'[]'
p7773
sS'_super_nodes'
p7774
g114
ssg72
I486
sg73
(dp7775
I481
S'                           name=filename,'
p7776
sI482
S'                           context=self.context,'
p7777
sI483
S'                           path=self.path,'
p7778
sI484
S'                           writer=self.writer,'
p7779
sI485
S'                           delimiters=self.delimiters,'
p7780
sI486
S'                           _super_nodes=super_nodes)'
p7781
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7782
sI489
S'        # template.'
p7783
sI490
S'        buf = BlockNode('
p7784
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7785
sg84
g206
sa(dp7786
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7787
sg62
(dp7788
S'text'
p7789
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7790
sS'self'
p7791
S'<gluon.template.TemplateParser object>'
p7792
sS'self.parse'
p7793
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7794
ssg72
I316
sg73
(dp7795
I320
S'        Return the parsed template with correct indentation.'
p7796
sI311
S'        # This variable will hold a reference to every block'
p7797
sI312
S'        # that we come across in this template'
p7798
sI313
S'        self.blocks = {}'
p7799
sI314
S''
sI315
S'        # Begin parsing.'
p7800
sI316
S'        self.parse(text)'
p7801
sI317
S''
sI318
S'    def to_string(self):'
p7802
sI319
S'        """'
p7803
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7804
sg84
g48
sa(dp7805
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7806
sg62
(dp7807
S'self'
p7808
S'<gluon.template.TemplateParser object>'
p7809
sS'extend'
p7810
S'"\'annotate_layout.html\'"'
p7811
sS'self.extend'
p7812
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7813
ssg72
I756
sg73
(dp7814
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7815
sI752
S'            self.child_super_nodes.remove(node)'
p7816
sI753
S''
sI754
S'        # If we need to extend a template.'
p7817
sI755
S'        if extend:'
p7818
sI756
S'            self.extend(extend)'
p7819
sI757
S''
sI758
S'# We need this for integration with gluon'
p7820
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7821
sg84
g188
sa(dp7822
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7823
sg62
(dp7824
S'super_nodes'
p7825
S'[]'
p7826
sS'_super_nodes'
p7827
g114
ssg72
I486
sg73
(dp7828
I481
S'                           name=filename,'
p7829
sI482
S'                           context=self.context,'
p7830
sI483
S'                           path=self.path,'
p7831
sI484
S'                           writer=self.writer,'
p7832
sI485
S'                           delimiters=self.delimiters,'
p7833
sI486
S'                           _super_nodes=super_nodes)'
p7834
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7835
sI489
S'        # template.'
p7836
sI490
S'        buf = BlockNode('
p7837
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7838
sg84
g206
sa(dp7839
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7840
sg62
(dp7841
S'text'
p7842
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7843
sS'self'
p7844
S'<gluon.template.TemplateParser object>'
p7845
sS'self.parse'
p7846
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7847
ssg72
I316
sg73
(dp7848
I320
S'        Return the parsed template with correct indentation.'
p7849
sI311
S'        # This variable will hold a reference to every block'
p7850
sI312
S'        # that we come across in this template'
p7851
sI313
S'        self.blocks = {}'
p7852
sI314
S''
sI315
S'        # Begin parsing.'
p7853
sI316
S'        self.parse(text)'
p7854
sI317
S''
sI318
S'    def to_string(self):'
p7855
sI319
S'        """'
p7856
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7857
sg84
g48
sa(dp7858
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7859
sg62
(dp7860
S'self'
p7861
S'<gluon.template.TemplateParser object>'
p7862
sS'extend'
p7863
S'"\'annotate_layout.html\'"'
p7864
sS'self.extend'
p7865
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7866
ssg72
I756
sg73
(dp7867
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7868
sI752
S'            self.child_super_nodes.remove(node)'
p7869
sI753
S''
sI754
S'        # If we need to extend a template.'
p7870
sI755
S'        if extend:'
p7871
sI756
S'            self.extend(extend)'
p7872
sI757
S''
sI758
S'# We need this for integration with gluon'
p7873
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7874
sg84
g188
sa(dp7875
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7876
sg62
(dp7877
S'super_nodes'
p7878
S'[]'
p7879
sS'_super_nodes'
p7880
g114
ssg72
I486
sg73
(dp7881
I481
S'                           name=filename,'
p7882
sI482
S'                           context=self.context,'
p7883
sI483
S'                           path=self.path,'
p7884
sI484
S'                           writer=self.writer,'
p7885
sI485
S'                           delimiters=self.delimiters,'
p7886
sI486
S'                           _super_nodes=super_nodes)'
p7887
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7888
sI489
S'        # template.'
p7889
sI490
S'        buf = BlockNode('
p7890
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7891
sg84
g206
sa(dp7892
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7893
sg62
(dp7894
S'text'
p7895
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7896
sS'self'
p7897
S'<gluon.template.TemplateParser object>'
p7898
sS'self.parse'
p7899
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7900
ssg72
I316
sg73
(dp7901
I320
S'        Return the parsed template with correct indentation.'
p7902
sI311
S'        # This variable will hold a reference to every block'
p7903
sI312
S'        # that we come across in this template'
p7904
sI313
S'        self.blocks = {}'
p7905
sI314
S''
sI315
S'        # Begin parsing.'
p7906
sI316
S'        self.parse(text)'
p7907
sI317
S''
sI318
S'    def to_string(self):'
p7908
sI319
S'        """'
p7909
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7910
sg84
g48
sa(dp7911
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7912
sg62
(dp7913
S'self'
p7914
S'<gluon.template.TemplateParser object>'
p7915
sS'extend'
p7916
S'"\'annotate_layout.html\'"'
p7917
sS'self.extend'
p7918
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7919
ssg72
I756
sg73
(dp7920
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7921
sI752
S'            self.child_super_nodes.remove(node)'
p7922
sI753
S''
sI754
S'        # If we need to extend a template.'
p7923
sI755
S'        if extend:'
p7924
sI756
S'            self.extend(extend)'
p7925
sI757
S''
sI758
S'# We need this for integration with gluon'
p7926
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7927
sg84
g188
sa(dp7928
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7929
sg62
(dp7930
S'super_nodes'
p7931
S'[]'
p7932
sS'_super_nodes'
p7933
g114
ssg72
I486
sg73
(dp7934
I481
S'                           name=filename,'
p7935
sI482
S'                           context=self.context,'
p7936
sI483
S'                           path=self.path,'
p7937
sI484
S'                           writer=self.writer,'
p7938
sI485
S'                           delimiters=self.delimiters,'
p7939
sI486
S'                           _super_nodes=super_nodes)'
p7940
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7941
sI489
S'        # template.'
p7942
sI490
S'        buf = BlockNode('
p7943
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7944
sg84
g206
sa(dp7945
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7946
sg62
(dp7947
S'text'
p7948
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p7949
sS'self'
p7950
S'<gluon.template.TemplateParser object>'
p7951
sS'self.parse'
p7952
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p7953
ssg72
I316
sg73
(dp7954
I320
S'        Return the parsed template with correct indentation.'
p7955
sI311
S'        # This variable will hold a reference to every block'
p7956
sI312
S'        # that we come across in this template'
p7957
sI313
S'        self.blocks = {}'
p7958
sI314
S''
sI315
S'        # Begin parsing.'
p7959
sI316
S'        self.parse(text)'
p7960
sI317
S''
sI318
S'    def to_string(self):'
p7961
sI319
S'        """'
p7962
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p7963
sg84
g48
sa(dp7964
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7965
sg62
(dp7966
S'self'
p7967
S'<gluon.template.TemplateParser object>'
p7968
sS'extend'
p7969
S'"\'annotate_layout.html\'"'
p7970
sS'self.extend'
p7971
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p7972
ssg72
I756
sg73
(dp7973
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p7974
sI752
S'            self.child_super_nodes.remove(node)'
p7975
sI753
S''
sI754
S'        # If we need to extend a template.'
p7976
sI755
S'        if extend:'
p7977
sI756
S'            self.extend(extend)'
p7978
sI757
S''
sI758
S'# We need this for integration with gluon'
p7979
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p7980
sg84
g188
sa(dp7981
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7982
sg62
(dp7983
S'super_nodes'
p7984
S'[]'
p7985
sS'_super_nodes'
p7986
g114
ssg72
I486
sg73
(dp7987
I481
S'                           name=filename,'
p7988
sI482
S'                           context=self.context,'
p7989
sI483
S'                           path=self.path,'
p7990
sI484
S'                           writer=self.writer,'
p7991
sI485
S'                           delimiters=self.delimiters,'
p7992
sI486
S'                           _super_nodes=super_nodes)'
p7993
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p7994
sI489
S'        # template.'
p7995
sI490
S'        buf = BlockNode('
p7996
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p7997
sg84
g206
sa(dp7998
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p7999
sg62
(dp8000
S'text'
p8001
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p8002
sS'self'
p8003
S'<gluon.template.TemplateParser object>'
p8004
sS'self.parse'
p8005
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8006
ssg72
I316
sg73
(dp8007
I320
S'        Return the parsed template with correct indentation.'
p8008
sI311
S'        # This variable will hold a reference to every block'
p8009
sI312
S'        # that we come across in this template'
p8010
sI313
S'        self.blocks = {}'
p8011
sI314
S''
sI315
S'        # Begin parsing.'
p8012
sI316
S'        self.parse(text)'
p8013
sI317
S''
sI318
S'    def to_string(self):'
p8014
sI319
S'        """'
p8015
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8016
sg84
g48
sa(dp8017
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8018
sg62
(dp8019
S'self'
p8020
S'<gluon.template.TemplateParser object>'
p8021
sS'extend'
p8022
S'"\'annotate_layout.html\'"'
p8023
sS'self.extend'
p8024
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8025
ssg72
I756
sg73
(dp8026
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8027
sI752
S'            self.child_super_nodes.remove(node)'
p8028
sI753
S''
sI754
S'        # If we need to extend a template.'
p8029
sI755
S'        if extend:'
p8030
sI756
S'            self.extend(extend)'
p8031
sI757
S''
sI758
S'# We need this for integration with gluon'
p8032
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p8033
sg84
g188
sa(dp8034
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8035
sg62
(dp8036
S'super_nodes'
p8037
S'[]'
p8038
sS'_super_nodes'
p8039
g114
ssg72
I486
sg73
(dp8040
I481
S'                           name=filename,'
p8041
sI482
S'                           context=self.context,'
p8042
sI483
S'                           path=self.path,'
p8043
sI484
S'                           writer=self.writer,'
p8044
sI485
S'                           delimiters=self.delimiters,'
p8045
sI486
S'                           _super_nodes=super_nodes)'
p8046
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p8047
sI489
S'        # template.'
p8048
sI490
S'        buf = BlockNode('
p8049
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p8050
sg84
g206
sa(dp8051
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8052
sg62
(dp8053
S'text'
p8054
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p8055
sS'self'
p8056
S'<gluon.template.TemplateParser object>'
p8057
sS'self.parse'
p8058
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8059
ssg72
I316
sg73
(dp8060
I320
S'        Return the parsed template with correct indentation.'
p8061
sI311
S'        # This variable will hold a reference to every block'
p8062
sI312
S'        # that we come across in this template'
p8063
sI313
S'        self.blocks = {}'
p8064
sI314
S''
sI315
S'        # Begin parsing.'
p8065
sI316
S'        self.parse(text)'
p8066
sI317
S''
sI318
S'    def to_string(self):'
p8067
sI319
S'        """'
p8068
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8069
sg84
g48
sa(dp8070
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8071
sg62
(dp8072
S'self'
p8073
S'<gluon.template.TemplateParser object>'
p8074
sS'extend'
p8075
S'"\'annotate_layout.html\'"'
p8076
sS'self.extend'
p8077
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8078
ssg72
I756
sg73
(dp8079
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8080
sI752
S'            self.child_super_nodes.remove(node)'
p8081
sI753
S''
sI754
S'        # If we need to extend a template.'
p8082
sI755
S'        if extend:'
p8083
sI756
S'            self.extend(extend)'
p8084
sI757
S''
sI758
S'# We need this for integration with gluon'
p8085
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p8086
sg84
g188
sa(dp8087
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8088
sg62
(dp8089
S'super_nodes'
p8090
S'[]'
p8091
sS'_super_nodes'
p8092
g114
ssg72
I486
sg73
(dp8093
I481
S'                           name=filename,'
p8094
sI482
S'                           context=self.context,'
p8095
sI483
S'                           path=self.path,'
p8096
sI484
S'                           writer=self.writer,'
p8097
sI485
S'                           delimiters=self.delimiters,'
p8098
sI486
S'                           _super_nodes=super_nodes)'
p8099
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p8100
sI489
S'        # template.'
p8101
sI490
S'        buf = BlockNode('
p8102
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p8103
sg84
g206
sa(dp8104
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8105
sg62
(dp8106
S'text'
p8107
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p8108
sS'self'
p8109
S'<gluon.template.TemplateParser object>'
p8110
sS'self.parse'
p8111
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8112
ssg72
I316
sg73
(dp8113
I320
S'        Return the parsed template with correct indentation.'
p8114
sI311
S'        # This variable will hold a reference to every block'
p8115
sI312
S'        # that we come across in this template'
p8116
sI313
S'        self.blocks = {}'
p8117
sI314
S''
sI315
S'        # Begin parsing.'
p8118
sI316
S'        self.parse(text)'
p8119
sI317
S''
sI318
S'    def to_string(self):'
p8120
sI319
S'        """'
p8121
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8122
sg84
g48
sa(dp8123
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8124
sg62
(dp8125
S'self'
p8126
S'<gluon.template.TemplateParser object>'
p8127
sS'extend'
p8128
S'"\'annotate_layout.html\'"'
p8129
sS'self.extend'
p8130
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8131
ssg72
I756
sg73
(dp8132
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8133
sI752
S'            self.child_super_nodes.remove(node)'
p8134
sI753
S''
sI754
S'        # If we need to extend a template.'
p8135
sI755
S'        if extend:'
p8136
sI756
S'            self.extend(extend)'
p8137
sI757
S''
sI758
S'# We need this for integration with gluon'
p8138
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p8139
sg84
g188
sa(dp8140
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8141
sg62
(dp8142
S'super_nodes'
p8143
S'[]'
p8144
sS'_super_nodes'
p8145
g114
ssg72
I486
sg73
(dp8146
I481
S'                           name=filename,'
p8147
sI482
S'                           context=self.context,'
p8148
sI483
S'                           path=self.path,'
p8149
sI484
S'                           writer=self.writer,'
p8150
sI485
S'                           delimiters=self.delimiters,'
p8151
sI486
S'                           _super_nodes=super_nodes)'
p8152
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p8153
sI489
S'        # template.'
p8154
sI490
S'        buf = BlockNode('
p8155
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p8156
sg84
g206
sa(dp8157
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8158
sg62
(dp8159
S'text'
p8160
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p8161
sS'self'
p8162
S'<gluon.template.TemplateParser object>'
p8163
sS'self.parse'
p8164
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8165
ssg72
I316
sg73
(dp8166
I320
S'        Return the parsed template with correct indentation.'
p8167
sI311
S'        # This variable will hold a reference to every block'
p8168
sI312
S'        # that we come across in this template'
p8169
sI313
S'        self.blocks = {}'
p8170
sI314
S''
sI315
S'        # Begin parsing.'
p8171
sI316
S'        self.parse(text)'
p8172
sI317
S''
sI318
S'    def to_string(self):'
p8173
sI319
S'        """'
p8174
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8175
sg84
g48
sa(dp8176
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8177
sg62
(dp8178
S'self'
p8179
S'<gluon.template.TemplateParser object>'
p8180
sS'extend'
p8181
S'"\'annotate_layout.html\'"'
p8182
sS'self.extend'
p8183
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8184
ssg72
I756
sg73
(dp8185
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8186
sI752
S'            self.child_super_nodes.remove(node)'
p8187
sI753
S''
sI754
S'        # If we need to extend a template.'
p8188
sI755
S'        if extend:'
p8189
sI756
S'            self.extend(extend)'
p8190
sI757
S''
sI758
S'# We need this for integration with gluon'
p8191
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p8192
sg84
g188
sa(dp8193
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8194
sg62
(dp8195
S'super_nodes'
p8196
S'[]'
p8197
sS'_super_nodes'
p8198
g114
ssg72
I486
sg73
(dp8199
I481
S'                           name=filename,'
p8200
sI482
S'                           context=self.context,'
p8201
sI483
S'                           path=self.path,'
p8202
sI484
S'                           writer=self.writer,'
p8203
sI485
S'                           delimiters=self.delimiters,'
p8204
sI486
S'                           _super_nodes=super_nodes)'
p8205
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p8206
sI489
S'        # template.'
p8207
sI490
S'        buf = BlockNode('
p8208
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p8209
sg84
g206
sa(dp8210
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8211
sg62
(dp8212
S'text'
p8213
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p8214
sS'self'
p8215
S'<gluon.template.TemplateParser object>'
p8216
sS'self.parse'
p8217
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8218
ssg72
I316
sg73
(dp8219
I320
S'        Return the parsed template with correct indentation.'
p8220
sI311
S'        # This variable will hold a reference to every block'
p8221
sI312
S'        # that we come across in this template'
p8222
sI313
S'        self.blocks = {}'
p8223
sI314
S''
sI315
S'        # Begin parsing.'
p8224
sI316
S'        self.parse(text)'
p8225
sI317
S''
sI318
S'    def to_string(self):'
p8226
sI319
S'        """'
p8227
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8228
sg84
g48
sa(dp8229
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8230
sg62
(dp8231
S'self'
p8232
S'<gluon.template.TemplateParser object>'
p8233
sS'extend'
p8234
S'"\'annotate_layout.html\'"'
p8235
sS'self.extend'
p8236
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8237
ssg72
I756
sg73
(dp8238
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8239
sI752
S'            self.child_super_nodes.remove(node)'
p8240
sI753
S''
sI754
S'        # If we need to extend a template.'
p8241
sI755
S'        if extend:'
p8242
sI756
S'            self.extend(extend)'
p8243
sI757
S''
sI758
S'# We need this for integration with gluon'
p8244
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p8245
sg84
g188
sa(dp8246
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8247
sg62
(dp8248
S'super_nodes'
p8249
S'[]'
p8250
sS'_super_nodes'
p8251
g114
ssg72
I486
sg73
(dp8252
I481
S'                           name=filename,'
p8253
sI482
S'                           context=self.context,'
p8254
sI483
S'                           path=self.path,'
p8255
sI484
S'                           writer=self.writer,'
p8256
sI485
S'                           delimiters=self.delimiters,'
p8257
sI486
S'                           _super_nodes=super_nodes)'
p8258
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p8259
sI489
S'        # template.'
p8260
sI490
S'        buf = BlockNode('
p8261
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p8262
sg84
g206
sa(dp8263
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8264
sg62
(dp8265
S'text'
p8266
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p8267
sS'self'
p8268
S'<gluon.template.TemplateParser object>'
p8269
sS'self.parse'
p8270
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8271
ssg72
I316
sg73
(dp8272
I320
S'        Return the parsed template with correct indentation.'
p8273
sI311
S'        # This variable will hold a reference to every block'
p8274
sI312
S'        # that we come across in this template'
p8275
sI313
S'        self.blocks = {}'
p8276
sI314
S''
sI315
S'        # Begin parsing.'
p8277
sI316
S'        self.parse(text)'
p8278
sI317
S''
sI318
S'    def to_string(self):'
p8279
sI319
S'        """'
p8280
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8281
sg84
g48
sa(dp8282
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8283
sg62
(dp8284
S'self'
p8285
S'<gluon.template.TemplateParser object>'
p8286
sS'extend'
p8287
S'"\'annotate_layout.html\'"'
p8288
sS'self.extend'
p8289
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8290
ssg72
I756
sg73
(dp8291
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8292
sI752
S'            self.child_super_nodes.remove(node)'
p8293
sI753
S''
sI754
S'        # If we need to extend a template.'
p8294
sI755
S'        if extend:'
p8295
sI756
S'            self.extend(extend)'
p8296
sI757
S''
sI758
S'# We need this for integration with gluon'
p8297
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p8298
sg84
g188
sa(dp8299
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8300
sg62
(dp8301
S'super_nodes'
p8302
S'[]'
p8303
sS'_super_nodes'
p8304
g114
ssg72
I486
sg73
(dp8305
I481
S'                           name=filename,'
p8306
sI482
S'                           context=self.context,'
p8307
sI483
S'                           path=self.path,'
p8308
sI484
S'                           writer=self.writer,'
p8309
sI485
S'                           delimiters=self.delimiters,'
p8310
sI486
S'                           _super_nodes=super_nodes)'
p8311
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p8312
sI489
S'        # template.'
p8313
sI490
S'        buf = BlockNode('
p8314
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p8315
sg84
g206
sa(dp8316
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8317
sg62
(dp8318
S'text'
p8319
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p8320
sS'self'
p8321
S'<gluon.template.TemplateParser object>'
p8322
sS'self.parse'
p8323
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8324
ssg72
I316
sg73
(dp8325
I320
S'        Return the parsed template with correct indentation.'
p8326
sI311
S'        # This variable will hold a reference to every block'
p8327
sI312
S'        # that we come across in this template'
p8328
sI313
S'        self.blocks = {}'
p8329
sI314
S''
sI315
S'        # Begin parsing.'
p8330
sI316
S'        self.parse(text)'
p8331
sI317
S''
sI318
S'    def to_string(self):'
p8332
sI319
S'        """'
p8333
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8334
sg84
g48
sa(dp8335
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8336
sg62
(dp8337
S'self'
p8338
S'<gluon.template.TemplateParser object>'
p8339
sS'extend'
p8340
S'"\'annotate_layout.html\'"'
p8341
sS'self.extend'
p8342
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8343
ssg72
I756
sg73
(dp8344
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8345
sI752
S'            self.child_super_nodes.remove(node)'
p8346
sI753
S''
sI754
S'        # If we need to extend a template.'
p8347
sI755
S'        if extend:'
p8348
sI756
S'            self.extend(extend)'
p8349
sI757
S''
sI758
S'# We need this for integration with gluon'
p8350
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p8351
sg84
g188
sa(dp8352
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8353
sg62
(dp8354
S'super_nodes'
p8355
S'[]'
p8356
sS'_super_nodes'
p8357
g114
ssg72
I486
sg73
(dp8358
I481
S'                           name=filename,'
p8359
sI482
S'                           context=self.context,'
p8360
sI483
S'                           path=self.path,'
p8361
sI484
S'                           writer=self.writer,'
p8362
sI485
S'                           delimiters=self.delimiters,'
p8363
sI486
S'                           _super_nodes=super_nodes)'
p8364
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p8365
sI489
S'        # template.'
p8366
sI490
S'        buf = BlockNode('
p8367
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p8368
sg84
g206
sa(dp8369
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8370
sg62
(dp8371
S'text'
p8372
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p8373
sS'self'
p8374
S'<gluon.template.TemplateParser object>'
p8375
sS'self.parse'
p8376
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8377
ssg72
I316
sg73
(dp8378
I320
S'        Return the parsed template with correct indentation.'
p8379
sI311
S'        # This variable will hold a reference to every block'
p8380
sI312
S'        # that we come across in this template'
p8381
sI313
S'        self.blocks = {}'
p8382
sI314
S''
sI315
S'        # Begin parsing.'
p8383
sI316
S'        self.parse(text)'
p8384
sI317
S''
sI318
S'    def to_string(self):'
p8385
sI319
S'        """'
p8386
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8387
sg84
g48
sa(dp8388
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8389
sg62
(dp8390
S'self'
p8391
S'<gluon.template.TemplateParser object>'
p8392
sS'extend'
p8393
S'"\'annotate_layout.html\'"'
p8394
sS'self.extend'
p8395
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8396
ssg72
I756
sg73
(dp8397
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8398
sI752
S'            self.child_super_nodes.remove(node)'
p8399
sI753
S''
sI754
S'        # If we need to extend a template.'
p8400
sI755
S'        if extend:'
p8401
sI756
S'            self.extend(extend)'
p8402
sI757
S''
sI758
S'# We need this for integration with gluon'
p8403
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p8404
sg84
g188
sa(dp8405
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8406
sg62
(dp8407
S'super_nodes'
p8408
S'[]'
p8409
sS'_super_nodes'
p8410
g114
ssg72
I486
sg73
(dp8411
I481
S'                           name=filename,'
p8412
sI482
S'                           context=self.context,'
p8413
sI483
S'                           path=self.path,'
p8414
sI484
S'                           writer=self.writer,'
p8415
sI485
S'                           delimiters=self.delimiters,'
p8416
sI486
S'                           _super_nodes=super_nodes)'
p8417
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p8418
sI489
S'        # template.'
p8419
sI490
S'        buf = BlockNode('
p8420
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p8421
sg84
g206
sa(dp8422
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8423
sg62
(dp8424
S'text'
p8425
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p8426
sS'self'
p8427
S'<gluon.template.TemplateParser object>'
p8428
sS'self.parse'
p8429
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8430
ssg72
I316
sg73
(dp8431
I320
S'        Return the parsed template with correct indentation.'
p8432
sI311
S'        # This variable will hold a reference to every block'
p8433
sI312
S'        # that we come across in this template'
p8434
sI313
S'        self.blocks = {}'
p8435
sI314
S''
sI315
S'        # Begin parsing.'
p8436
sI316
S'        self.parse(text)'
p8437
sI317
S''
sI318
S'    def to_string(self):'
p8438
sI319
S'        """'
p8439
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8440
sg84
g48
sa(dp8441
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8442
sg62
(dp8443
S'self'
p8444
S'<gluon.template.TemplateParser object>'
p8445
sS'extend'
p8446
S'"\'annotate_layout.html\'"'
p8447
sS'self.extend'
p8448
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8449
ssg72
I756
sg73
(dp8450
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8451
sI752
S'            self.child_super_nodes.remove(node)'
p8452
sI753
S''
sI754
S'        # If we need to extend a template.'
p8453
sI755
S'        if extend:'
p8454
sI756
S'            self.extend(extend)'
p8455
sI757
S''
sI758
S'# We need this for integration with gluon'
p8456
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p8457
sg84
g188
sa(dp8458
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8459
sg62
(dp8460
S'super_nodes'
p8461
S'[]'
p8462
sS'_super_nodes'
p8463
g114
ssg72
I486
sg73
(dp8464
I481
S'                           name=filename,'
p8465
sI482
S'                           context=self.context,'
p8466
sI483
S'                           path=self.path,'
p8467
sI484
S'                           writer=self.writer,'
p8468
sI485
S'                           delimiters=self.delimiters,'
p8469
sI486
S'                           _super_nodes=super_nodes)'
p8470
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p8471
sI489
S'        # template.'
p8472
sI490
S'        buf = BlockNode('
p8473
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p8474
sg84
g206
sa(dp8475
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8476
sg62
(dp8477
S'text'
p8478
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p8479
sS'self'
p8480
S'<gluon.template.TemplateParser object>'
p8481
sS'self.parse'
p8482
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8483
ssg72
I316
sg73
(dp8484
I320
S'        Return the parsed template with correct indentation.'
p8485
sI311
S'        # This variable will hold a reference to every block'
p8486
sI312
S'        # that we come across in this template'
p8487
sI313
S'        self.blocks = {}'
p8488
sI314
S''
sI315
S'        # Begin parsing.'
p8489
sI316
S'        self.parse(text)'
p8490
sI317
S''
sI318
S'    def to_string(self):'
p8491
sI319
S'        """'
p8492
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8493
sg84
g48
sa(dp8494
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8495
sg62
(dp8496
S'self'
p8497
S'<gluon.template.TemplateParser object>'
p8498
sS'extend'
p8499
S'"\'annotate_layout.html\'"'
p8500
sS'self.extend'
p8501
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8502
ssg72
I756
sg73
(dp8503
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8504
sI752
S'            self.child_super_nodes.remove(node)'
p8505
sI753
S''
sI754
S'        # If we need to extend a template.'
p8506
sI755
S'        if extend:'
p8507
sI756
S'            self.extend(extend)'
p8508
sI757
S''
sI758
S'# We need this for integration with gluon'
p8509
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p8510
sg84
g188
sa(dp8511
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8512
sg62
(dp8513
S'super_nodes'
p8514
S'[]'
p8515
sS'_super_nodes'
p8516
g114
ssg72
I486
sg73
(dp8517
I481
S'                           name=filename,'
p8518
sI482
S'                           context=self.context,'
p8519
sI483
S'                           path=self.path,'
p8520
sI484
S'                           writer=self.writer,'
p8521
sI485
S'                           delimiters=self.delimiters,'
p8522
sI486
S'                           _super_nodes=super_nodes)'
p8523
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p8524
sI489
S'        # template.'
p8525
sI490
S'        buf = BlockNode('
p8526
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p8527
sg84
g206
sa(dp8528
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8529
sg62
(dp8530
S'text'
p8531
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p8532
sS'self'
p8533
S'<gluon.template.TemplateParser object>'
p8534
sS'self.parse'
p8535
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8536
ssg72
I316
sg73
(dp8537
I320
S'        Return the parsed template with correct indentation.'
p8538
sI311
S'        # This variable will hold a reference to every block'
p8539
sI312
S'        # that we come across in this template'
p8540
sI313
S'        self.blocks = {}'
p8541
sI314
S''
sI315
S'        # Begin parsing.'
p8542
sI316
S'        self.parse(text)'
p8543
sI317
S''
sI318
S'    def to_string(self):'
p8544
sI319
S'        """'
p8545
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8546
sg84
g48
sa(dp8547
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8548
sg62
(dp8549
S'self'
p8550
S'<gluon.template.TemplateParser object>'
p8551
sS'extend'
p8552
S'"\'annotate_layout.html\'"'
p8553
sS'self.extend'
p8554
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8555
ssg72
I756
sg73
(dp8556
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8557
sI752
S'            self.child_super_nodes.remove(node)'
p8558
sI753
S''
sI754
S'        # If we need to extend a template.'
p8559
sI755
S'        if extend:'
p8560
sI756
S'            self.extend(extend)'
p8561
sI757
S''
sI758
S'# We need this for integration with gluon'
p8562
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p8563
sg84
g188
sa(dp8564
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8565
sg62
(dp8566
S'super_nodes'
p8567
S'[]'
p8568
sS'_super_nodes'
p8569
g114
ssg72
I486
sg73
(dp8570
I481
S'                           name=filename,'
p8571
sI482
S'                           context=self.context,'
p8572
sI483
S'                           path=self.path,'
p8573
sI484
S'                           writer=self.writer,'
p8574
sI485
S'                           delimiters=self.delimiters,'
p8575
sI486
S'                           _super_nodes=super_nodes)'
p8576
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p8577
sI489
S'        # template.'
p8578
sI490
S'        buf = BlockNode('
p8579
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p8580
sg84
g206
sa(dp8581
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8582
sg62
(dp8583
S'text'
p8584
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p8585
sS'self'
p8586
S'<gluon.template.TemplateParser object>'
p8587
sS'self.parse'
p8588
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8589
ssg72
I316
sg73
(dp8590
I320
S'        Return the parsed template with correct indentation.'
p8591
sI311
S'        # This variable will hold a reference to every block'
p8592
sI312
S'        # that we come across in this template'
p8593
sI313
S'        self.blocks = {}'
p8594
sI314
S''
sI315
S'        # Begin parsing.'
p8595
sI316
S'        self.parse(text)'
p8596
sI317
S''
sI318
S'    def to_string(self):'
p8597
sI319
S'        """'
p8598
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8599
sg84
g48
sa(dp8600
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8601
sg62
(dp8602
S'self'
p8603
S'<gluon.template.TemplateParser object>'
p8604
sS'extend'
p8605
S'"\'annotate_layout.html\'"'
p8606
sS'self.extend'
p8607
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8608
ssg72
I756
sg73
(dp8609
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8610
sI752
S'            self.child_super_nodes.remove(node)'
p8611
sI753
S''
sI754
S'        # If we need to extend a template.'
p8612
sI755
S'        if extend:'
p8613
sI756
S'            self.extend(extend)'
p8614
sI757
S''
sI758
S'# We need this for integration with gluon'
p8615
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p8616
sg84
g188
sa(dp8617
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8618
sg62
(dp8619
S'super_nodes'
p8620
S'[]'
p8621
sS'_super_nodes'
p8622
g114
ssg72
I486
sg73
(dp8623
I481
S'                           name=filename,'
p8624
sI482
S'                           context=self.context,'
p8625
sI483
S'                           path=self.path,'
p8626
sI484
S'                           writer=self.writer,'
p8627
sI485
S'                           delimiters=self.delimiters,'
p8628
sI486
S'                           _super_nodes=super_nodes)'
p8629
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p8630
sI489
S'        # template.'
p8631
sI490
S'        buf = BlockNode('
p8632
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p8633
sg84
g206
sa(dp8634
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8635
sg62
(dp8636
S'text'
p8637
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p8638
sS'self'
p8639
S'<gluon.template.TemplateParser object>'
p8640
sS'self.parse'
p8641
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8642
ssg72
I316
sg73
(dp8643
I320
S'        Return the parsed template with correct indentation.'
p8644
sI311
S'        # This variable will hold a reference to every block'
p8645
sI312
S'        # that we come across in this template'
p8646
sI313
S'        self.blocks = {}'
p8647
sI314
S''
sI315
S'        # Begin parsing.'
p8648
sI316
S'        self.parse(text)'
p8649
sI317
S''
sI318
S'    def to_string(self):'
p8650
sI319
S'        """'
p8651
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8652
sg84
g48
sa(dp8653
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8654
sg62
(dp8655
S'self'
p8656
S'<gluon.template.TemplateParser object>'
p8657
sS'extend'
p8658
S'"\'annotate_layout.html\'"'
p8659
sS'self.extend'
p8660
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8661
ssg72
I756
sg73
(dp8662
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8663
sI752
S'            self.child_super_nodes.remove(node)'
p8664
sI753
S''
sI754
S'        # If we need to extend a template.'
p8665
sI755
S'        if extend:'
p8666
sI756
S'            self.extend(extend)'
p8667
sI757
S''
sI758
S'# We need this for integration with gluon'
p8668
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p8669
sg84
g188
sa(dp8670
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8671
sg62
(dp8672
S'super_nodes'
p8673
S'[]'
p8674
sS'_super_nodes'
p8675
g114
ssg72
I486
sg73
(dp8676
I481
S'                           name=filename,'
p8677
sI482
S'                           context=self.context,'
p8678
sI483
S'                           path=self.path,'
p8679
sI484
S'                           writer=self.writer,'
p8680
sI485
S'                           delimiters=self.delimiters,'
p8681
sI486
S'                           _super_nodes=super_nodes)'
p8682
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p8683
sI489
S'        # template.'
p8684
sI490
S'        buf = BlockNode('
p8685
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p8686
sg84
g206
sa(dp8687
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8688
sg62
(dp8689
S'text'
p8690
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p8691
sS'self'
p8692
S'<gluon.template.TemplateParser object>'
p8693
sS'self.parse'
p8694
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8695
ssg72
I316
sg73
(dp8696
I320
S'        Return the parsed template with correct indentation.'
p8697
sI311
S'        # This variable will hold a reference to every block'
p8698
sI312
S'        # that we come across in this template'
p8699
sI313
S'        self.blocks = {}'
p8700
sI314
S''
sI315
S'        # Begin parsing.'
p8701
sI316
S'        self.parse(text)'
p8702
sI317
S''
sI318
S'    def to_string(self):'
p8703
sI319
S'        """'
p8704
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8705
sg84
g48
sa(dp8706
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8707
sg62
(dp8708
S'self'
p8709
S'<gluon.template.TemplateParser object>'
p8710
sS'extend'
p8711
S'"\'annotate_layout.html\'"'
p8712
sS'self.extend'
p8713
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8714
ssg72
I756
sg73
(dp8715
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8716
sI752
S'            self.child_super_nodes.remove(node)'
p8717
sI753
S''
sI754
S'        # If we need to extend a template.'
p8718
sI755
S'        if extend:'
p8719
sI756
S'            self.extend(extend)'
p8720
sI757
S''
sI758
S'# We need this for integration with gluon'
p8721
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p8722
sg84
g188
sa(dp8723
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8724
sg62
(dp8725
S'super_nodes'
p8726
S'[]'
p8727
sS'_super_nodes'
p8728
g114
ssg72
I486
sg73
(dp8729
I481
S'                           name=filename,'
p8730
sI482
S'                           context=self.context,'
p8731
sI483
S'                           path=self.path,'
p8732
sI484
S'                           writer=self.writer,'
p8733
sI485
S'                           delimiters=self.delimiters,'
p8734
sI486
S'                           _super_nodes=super_nodes)'
p8735
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p8736
sI489
S'        # template.'
p8737
sI490
S'        buf = BlockNode('
p8738
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p8739
sg84
g206
sa(dp8740
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8741
sg62
(dp8742
S'text'
p8743
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p8744
sS'self'
p8745
S'<gluon.template.TemplateParser object>'
p8746
sS'self.parse'
p8747
S'<bound method TemplateParser.parse of <gluon.template.TemplateParser object>>'
p8748
ssg72
I316
sg73
(dp8749
I320
S'        Return the parsed template with correct indentation.'
p8750
sI311
S'        # This variable will hold a reference to every block'
p8751
sI312
S'        # that we come across in this template'
p8752
sI313
S'        self.blocks = {}'
p8753
sI314
S''
sI315
S'        # Begin parsing.'
p8754
sI316
S'        self.parse(text)'
p8755
sI317
S''
sI318
S'    def to_string(self):'
p8756
sI319
S'        """'
p8757
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8758
sg84
g48
sa(dp8759
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8760
sg62
(dp8761
S'self'
p8762
S'<gluon.template.TemplateParser object>'
p8763
sS'extend'
p8764
S'"\'annotate_layout.html\'"'
p8765
sS'self.extend'
p8766
S'<bound method TemplateParser.extend of <gluon.template.TemplateParser object>>'
p8767
ssg72
I756
sg73
(dp8768
I751
S'            # Sometimes I miss C-Style pointers... I want my asterisk...'
p8769
sI752
S'            self.child_super_nodes.remove(node)'
p8770
sI753
S''
sI754
S'        # If we need to extend a template.'
p8771
sI755
S'        if extend:'
p8772
sI756
S'            self.extend(extend)'
p8773
sI757
S''
sI758
S'# We need this for integration with gluon'
p8774
sI759
S''
sI760
S''
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n")'
p8775
sg84
g188
sa(dp8776
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8777
sg62
(dp8778
S'super_nodes'
p8779
S'[]'
p8780
sS'_super_nodes'
p8781
g114
ssg72
I486
sg73
(dp8782
I481
S'                           name=filename,'
p8783
sI482
S'                           context=self.context,'
p8784
sI483
S'                           path=self.path,'
p8785
sI484
S'                           writer=self.writer,'
p8786
sI485
S'                           delimiters=self.delimiters,'
p8787
sI486
S'                           _super_nodes=super_nodes)'
p8788
sI487
S''
sI488
S'        # Make a temporary buffer that is unique for parent'
p8789
sI489
S'        # template.'
p8790
sI490
S'        buf = BlockNode('
p8791
ssg82
S'(self=<gluon.template.TemplateParser object>, filename="\'annotate_layout.html\'")'
p8792
sg84
g206
sa(dp8793
g60
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py'
p8794
sg62
(dp8795
S'delimiters'
p8796
S"('{{', '}}')"
p8797
sS'self'
p8798
S'<gluon.template.TemplateParser object>'
p8799
sS'self.default_delimiters'
p8800
S"('{{', '}}')"
p8801
ssg72
I282
sg73
(dp8802
I277
S'        # Context for templates.'
p8803
sI278
S'        self.context = context'
p8804
sI279
S''
sI280
S'        # allow optional alternative delimiters'
p8805
sI281
S'        self.delimiters = delimiters'
p8806
sI282
S'        if delimiters != self.default_delimiters:'
p8807
sI283
S'            escaped_delimiters = (escape(delimiters[0]),'
p8808
sI284
S'                                  escape(delimiters[1]))'
p8809
sI285
S"            self.r_tag = compile(r'(%s.*?%s)' % escaped_delimiters, DOTALL)"
p8810
sI286
S"        elif hasattr(context.get('response', None), 'delimiters'):"
p8811
ssg82
S'(self=<gluon.template.TemplateParser object>, text="{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n", name="\'annotate_layout.html\'", context={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'APP_DOMAIN_NAME\': \'AnnotatIt.com\', \'APP_DOMAIN_NAME_2\': \'Annotat.It\', \'APP_NAME\': \'AnnotatIt\', \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, ...}, path=\'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views\', writer=\'response.write\', lexers={}, delimiters=(\'{{\', \'}}\'), _super_nodes=[])'
p8812
sg84
g48
sasS'pyver'
p8813
S'Python 2.7.3: /home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/venv/bin/python (prefix: /home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/venv)'
p8814
sS'session'
p8815
g55
(S's\xec\x07\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top">auth</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">expiration</td><td valign="top">:</td><td><div>2592000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">hmac_key</td><td valign="top">:</td><td><div>ec5239eb-7189-4d46-8547-e94d20d681e2</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">last_visit</td><td valign="top">:</td><td><div>datetime.datetime(2013, 7, 4, 18, 31, 9, 758298)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">remember</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">user</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">email</td><td valign="top">:</td><td><div>leo.m.rocha@gmail.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">first_name</td><td valign="top">:</td><td><div>Leonardo</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">id</td><td valign="top">:</td><td><div>1L</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">last_name</td><td valign="top">:</td><td><div>Rocha</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">registration_id</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">registration_key</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">reset_password_key</td><td valign="top">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">user_groups</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">1</td><td valign="top">:</td><td><div>user_1</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">flash</td><td valign="top">:</td><td><div>None</div></td></tr></table></div>'
tRp8816
sS'etype'
p8817
S"<type 'exceptions.RuntimeError'>"
p8818
sS'date'
p8819
S'Wed Jul 10 14:33:41 2013'
p8820
sS'response'
p8821
g55
(S's\xa7\x1a\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top">body</td><td valign="top">:</td><td><div>&lt;cStringIO.StringO object at 0x3543d50&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cookies</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">session_id_annotatit</td><td valign="top">:</td><td><div>127.0.0.1-c4ab2f28-1350-4609-a630-6f2377d4e2b6<table><tr><td style="font-weight:bold;vertical-align:top">comment</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">domain</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">expires</td><td valign="top">:</td><td><div>2592000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">httponly</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">max-age</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path</td><td valign="top">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">secure</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">version</td><td valign="top">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">delimiters</td><td valign="top">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">files</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">flash</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">generic_patterns</td><td valign="top">:</td><td><div><table><tr><td><div>*</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">google_analytics_id</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">headers</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">X-Powered-By</td><td valign="top">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">logo</td><td valign="top">:</td><td><div><a class="brand" href="http://www.annotatit.com/"><b>AnnotatIt</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">logo_img</td><td valign="top">:</td><td><div><img alt="AnnotatIt" src="/AnnotatIt/static/images/annotatit_pencil_200.png" /></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">menu</td><td valign="top">:</td><td><div><table><tr><td><div><table><tr><td><div>Media</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/videos</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>My media</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/my_media</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Add media</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/add_media</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">meta</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">author</td><td valign="top">:</td><td><div>Leonardo M. Rocha &lt;leo@annotatit.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">description</td><td valign="top">:</td><td><div>Synchronized Video Annotation</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">generator</td><td valign="top">:</td><td><div>Leonardo M. Rocha</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">keywords</td><td valign="top">:</td><td><div>personal development, leadership, spokesman, video, audio, annotation, social annotation, video annotation, video notes, music notes, media notes, music annotation, music education, online music education, online music video tagging, video analysis, music analysis, media analysis, sound analysis</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">models_to_run</td><td valign="top">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^default/\\w+\\.py$</div></td></tr><tr><td><div>^default/annotate_media/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">postprocessing</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_cookie_expires</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_data_name</td><td valign="top">:</td><td><div>session_data_annotatit</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_file</td><td valign="top">:</td><td><div>&lt;open file &#x27;/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/sessions/127.0.0.1-c4ab2f28-1350-4609-a630-6f2377d4e2b6&#x27;, mode &#x27;rb+&#x27; at 0x2f9e8a0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_filename</td><td valign="top">:</td><td><div>/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/sessions/127.0.0.1-c4ab2f28-1350-4609-a630-6f2377d4e2b6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_id</td><td valign="top">:</td><td><div>127.0.0.1-c4ab2f28-1350-4609-a630-6f2377d4e2b6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_id_name</td><td valign="top">:</td><td><div>session_id_annotatit</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_locked</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_new</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_storage_type</td><td valign="top">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">status</td><td valign="top">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">subtitle</td><td valign="top">:</td><td><div>Collaborative Synchronized Media Annotations made Easy</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">title</td><td valign="top">:</td><td><div>Annotatit</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">view</td><td valign="top">:</td><td><div>default/annotate_media.html</div></td></tr></table></div>'
tRp8822
sS'locals'
p8823
(dp8824
S'name'
p8825
S'"\'annotate_layout.html\'"'
p8826
sS'delimiters'
p8827
S"('{{', '}}')"
p8828
sS'text'
p8829
S'"{{extend \'annotate_layout.html\'}}\\n{{block replac...   </div>\\n\\n\\n    </section><!--/main-->\\n\\n{{end}}\\n\\n"'
p8830
sS'self'
p8831
S'<gluon.template.TemplateParser object>'
p8832
sS'writer'
p8833
S"'response.write'"
p8834
sS'_super_nodes'
p8835
S'[]'
p8836
sS'context'
p8837
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'APP_DOMAIN_NAME': 'AnnotatIt.com', 'APP_DOMAIN_NAME_2': 'Annotat.It', 'APP_NAME': 'AnnotatIt', 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, ...}"
p8838
sS'path'
p8839
S"'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/views'"
p8840
sS'lexers'
p8841
g43
sssS'traceback'
p8842
S'Traceback (most recent call last):\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/main.py", line 573, in wsgibase\n    serve_controller(request, response, session)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/main.py", line 234, in serve_controller\n    run_view_in(response._view_environment)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/compileapp.py", line 672, in run_view_in\n    context=environment)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 785, in parse_template\n    return str(TemplateParser(text, context=context, path=path, lexers=lexers, delimiters=delimiters))\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 316, in __init__\n    self.parse(text)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 756, in parse\n    self.extend(extend)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 486, in extend\n    _super_nodes=super_nodes)\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/template.py", line 282, in __init__\n    if delimiters != self.default_delimiters:\nRuntimeError: maximum recursion depth exceeded in cmp\n'
p8843
s.