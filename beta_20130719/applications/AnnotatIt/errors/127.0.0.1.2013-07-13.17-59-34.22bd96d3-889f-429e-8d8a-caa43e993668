(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'DAL' object has no attribute 'flagged_comments'"
p3
sS'layer'
p4
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n#########################################################################\n##\n#########################################################################\nfrom urlparse import urlparse, parse_qs\nimport json\nhelpers = local_import(\'helpers\')\nfrom helpers import *\nfrom gluon.validators import *\n\ndef index():\n    """\n\n    """\n    return dict()\n\ndef media_not_found():\n    \'\'\'\n    On media not found\n    \'\'\'\n    return dict()\n\ndef unallowed():\n    \'\'\'\n    Not having permissions to see a file\n    \'\'\'\n    return dict()\n\ndef video_not_found():\n    \'\'\'\n    On video not found\n    \'\'\'\n    return dict()\n\n##############################################################\n#CRUD MEDIA pages with its web services, ajax and email senders\n##############################################################\n\n\n#######\n# PAGE\n#######\n\n\n\n@auth.requires_login()\ndef annotate_media():\n    """\n    Page for  media annotation.\n    Needs to be logged in AND have annotation permissions\n    """\n    #print "embed media print test"\n    #generate page only ... the things will happen by ajax.\n    #get media embed code from request\n    _key = request.args(0, cast=str)# videoID\n    print "_key ="\n    print str(_key)    \n    _media = db(db.media.media_annotate_key == _key).select(\n                                                    db.media.id,    \n                                                    db.media.owner_id,\n                                                    db.media.title,\n                                                    db.media.subtitle,\n                                                    db.media.media_id,\n                                                    db.media.media_network,\n                                                    db.media.media_url,\n                                                    db.media.privacy,\n                                                    db.media.view_permissions,\n                                                    db.media.creation_datetime,\n                                                    db.media.update_datetime\n                                                    ).first()\n    #comments =  [ (owner_thumb, owner\'s link, parent_id, media_time, flag_name, flag_color, text, creation_datetime) ]\n    #_comments = db( (db.auth_user.id == db.flagged_comment.owner_id) &(db.flagged_comment.media_id == _media.id) ).select()\n    #_sections = db( (db.auth_user.id == db.section.owner_id) &(db.section.media_id == _media.id) ).select()\n                                        \n    print "_media ="\n    print str(_media)\n    #print "query print test "\n    #print str()\n    if not _media:\n        redirect(URL(\'media_not_found\'))\n    #owner ?\n    if auth.user_id == _media.owner_id:\n        return dict(media = _media,\n                    #comments = _comments,\n                    #sections = _sections,\n                    )\n    #public ?\n    if _media.annotation_permissions == "all":\n        return dict(media = _media,\n                    #comments = _comments,\n                    #sections = _sections,\n                    )\n    #individuals\n    if _media.annotation_permissions == "authorized_people":\n        #check permissions of current user\n        #TODO check that this actually works ... TEST        \n        if (not  db( (db.annotate_media_access_email.media_id == _media.id ) & (db.annotate_media_access_email.email == auth.user.email  ) ).isempty() ):\n            return dict(media = _media,\n                    #comments = _comments,\n                    #sections = _sections,\n                    )\n        else: #redirect to view mode, this user is not allowed to annotate\n            return redirect(URL("view_media", _key) )\n        #return redirect(URL("unallowed") )\n    if _media.annotation_permissions == "authorized_groups":\n        #TODO implement group setting and checking \n        return redirect(URL("view_media", _key))    \n        #return dict(media = _media,\n        #            comments = _comments,\n        #            sections = _sections,\n        #            )\n    #this should not arrive due to the first if\n    #if _media.view_permissions == "only_me" and auth.user_id == _media.owner_id:\n    #    return dict(media = _media)\n    #check if media can be embedded\n    #Maybe I can do everything from here, but I rather have more control\n    return redirect(URL("view_media", _key))\n\n\n\n\n\n#@auth.requires_login()\ndef embed_media():\n    """\n    Page for embedding media by an iframe\n    """\n    #print "embed media print test"\n    #generate page only ... the things will happen by ajax.\n    #get media embed code from request\n    _key = request.args(0, cast=str)# videoID\n    print "_key ="\n    print str(_key)    \n    _media = db(db.media.media_embed_key == _key).select(\n                                                    db.media.id,    \n                                                    db.media.owner_id,\n                                                    db.media.title,\n                                                    db.media.subtitle,\n                                                    db.media.media_id,\n                                                    db.media.media_network,\n                                                    db.media.media_url,\n                                                    db.media.privacy,\n                                                    db.media.view_permissions,\n                                                    db.media.creation_datetime,\n                                                    db.media.update_datetime\n                                                    ).first()\n    #comments =  [ (owner_thumb, owner\'s link, parent_id, media_time, flag_name, flag_color, text, creation_datetime) ]\n    #_comments = db( (db.auth_user.id == db.flagged_comment.owner_id) &(db.flagged_comment.media_id == _media.id) ).select()\n    #_sections = db( (db.auth_user.id == db.section.owner_id) &(db.section.media_id == _media.id) ).select()\n                                        \n    print "_media ="\n    print str(_media)\n    #print "query print test "\n    #print str()\n    if not _media:\n        redirect(URL(\'media_not_found\'))\n    #owner ?\n    if auth.user_id == _media.owner_id:\n        return dict(media = _media,\n                    #comments = _comments,\n                    #sections = _sections,\n                    )\n    #public ?\n    if _media.view_permissions == "all":\n        return dict(media = _media,\n                    #comments = _comments,\n                    #sections = _sections,\n                    )\n    #individuals\n    if _media.view_permissions == "authorized_people" and auth.user:\n        #check permissions of current user\n        #TODO check that this actually works ... TEST        \n        if (not  db( (db.view_media_access_email.media_id == _media.id ) & (db.view_media_access_email.email == auth.user.email  ) ).isempty() ):\n            return dict(media = _media,\n                    #comments = _comments,\n                    #sections = _sections,\n                    )\n        #return redirect(URL("unallowed") )\n    if _media.view_permissions == "authorized_groups" and auth.user:\n        #TODO implement group setting and checking \n        return redirect(URL("unallowed") )    \n        #return dict(media = _media,\n        #            comments = _comments,\n        #            sections = _sections,\n        #            )\n    #this should not arrive due to the first if\n    #if _media.view_permissions == "only_me" and auth.user_id == _media.owner_id:\n    #    return dict(media = _media)\n    #check if media can be embedded\n    #Maybe I can do everything from here, but I rather have more control\n    return redirect(URL("unallowed") )\n\nview_media = embed_media; #TODO check if this is possible in Web2py, to only change a name and that will change the template !!!\n\n\n@auth.requires_login()\ndef add_media():\n    """\n    Page for adding media for a user\n    """\n    #generate page only ... the things will happen by ajax.\n    #Maybe I can do everything from here, but I rather have more control\n    return dict()\n\n\n@auth.requires_login()\ndef my_media():\n    """\n    List media of a user:\n    Own, annotation permissions, view permissions\n    """\n    my_media = db(db.media.owner_id == auth.user_id).select()\n    can_annotate = db(db.annotate_media_access_email.email == auth.user.email).select()\n    can_view = db(db.view_media_access_email.email == auth.user.email).select()\n    return dict(\n                my_media = my_media,\n                can_annotate = can_annotate,\n                can_view = can_view\n                )\n\n\n###############\n# WEB SERVICES\n###############\n\n\n#######\n# AJAX\n#######\n\n@auth.requires_login()\ndef ajax_add_media():\n    """\n    Add media link for external service\n    """\n    #print "add media"\n    #print "request = "+str(request.vars)\n    #TODO check request method is PUT\n    #if (request.env.request_method != "PUT"):\n    #    return "{ response:error, response-detail: Invalid request}"\n    if (not IS_URL(request.vars.link) or request.vars.link.strip()==""):\n        #print "ERROR incorrect url"\n        #return json.dumps( { "response":"error", "response-detail": "URL not valid. Try with a Vimeo or Youtube link"} )\n        response.flash = "URL not valid. Try with a Vimeo or Youtube link"\n    service =  get_service(request.vars.link)\n    #print "1"\n    #print service\n    permissions = get_permissions(request.vars)\n    #print "2"\n    #print permissions\n    if not permissions:\n        #print "ERROR permissions not set"\n        #return json.dumps( { "response":"error", "response-detail": "Permissions are not worreclty set"} )\n        response.flash = "Permissions are not correclty set"\n    if not request.vars.title or request.vars.title.strip() =="" :\n        #print "ERROR title not set"\n        #return json.dumps( { "response":"error", "response-detail": "You need to write a title"} )\n        response.flash = "You need to write a title"\n    reg = {"title": request.vars.title.strip()}\n    #print "3"\n    #print reg\n    reg.update(service)\n    #print "4"\n    #print reg\n    reg.update(permissions)\n    #print "5"\n    #print reg\n    #print "inserting record"\n    try:\n        query_add_media = db.media.insert(**reg)\n        #print "6"\n        #print "isnert success!!!"\n    except Exception as err:\n        #print "Error inserting record"\n        #print err\n        return None\n    #print "7"\n    #print "query result = "+str(query_add_media)\n    #check that link validates\n    #obtain the service of the link\n    # if seccess return the links\n    new_media = db.media(db.media.id == query_add_media)\n    #print "8"\n    #print "creating permissions"\n    if permissions[\'view_permissions\'] == "authorized_people":\n        invited = parse_permissions(request.vars.invited_annotators, new_media.id, "view")\n        for i in invited:\n            db.view_media_access_email.insert(\n                                                  media_id = new_media.id,\n                                                  email = i\n                                                    )\n    if permissions[\'annotation_permissions\'] == "authorized_people":\n        invited = parse_permissions(request.vars.invited_annotators, new_media.id, "annotation")\n        for i in invited:\n            db.annotate_media_access_email.insert(\n                                                  media_id = new_media.id,\n                                                  email = i\n                                                    )\n    #print "sending emails invites to people"\n    #TODO send invites, this should go to another process, not the main that should return instantly\n    \n    return response.json( new_media )\n\n@auth.requires_login()\ndef ajax_upload_media():\n    """\n    User will upload a file\n    """\n    #TODO after setting up storage service\n    pass\n\n@auth.requires_login()\ndef ajax_delete_media():\n    """\n    User will upload a file\n    """\n    #read the request\n    #print "Delete request: "\n    if (request.env.request_method != "DELETE"):\n        #return json.dumps( { "response":"error", "response-detail": "Invalid request"} )\n        response.flash = "Invalid Request"\n    #print request\n    #print request.vars\n    #check that the requester is the owner of the record\n    media_record = db(db.media.id == int(request.vars.media_id) ).select().first()\n    #print media_record\n    if not media_record.owner_id == auth.user_id:\n       #return json.dumps( { "response":"error", "response-detail": "You do not own this record, you can not delete it"} )\n       response.flash = "You do not own this record, you can not delete it"\n       return None\n    #else\n    db(db.media.id == int(request.vars.media_id) ).delete()\n    #print "check: "\n    #print media_record\n    #print db(db.media.id == int(request.vars.media_id) ).select().first()\n    #TODO find all the records that point to this one and delete or mark them as deleted\n    return response.json(media_record)\n\n@auth.requires_login()\ndef ajax_set_permissions():\n    """\n    Sets annotate/view permissions by default\n    private, public, unlisted\n    ##NOTE shoud have been set before\n    """\n    pass\n\n@auth.requires_login()\ndef ajax_set_viewers():\n    """\n    Adds groups to the current media file\n    """\n    pass\n\n@auth.requires_login()\ndef ajax_set_annotators():\n    """\n    Adds annotators to the current media file\n    Annotators can be groups OR single users (emails or user ids)\n    """\n    pass\n\n\n    \n############################################################\n#  END  - ADD MEDIA page and web services\n############################################################\n\n\n############################################################\n#  BACKBONE JS interface helpers\n############################################################\n\ndef _canCreate_FlaggedSyncComment(media):\n    #if not logged return false\n    if not auth.user:\n        return False\n    #else if user is owner return true\n    if media.owner_id == auth.user_id:\n        return True\n    #else if media has annotation_permissions is all return true\n    if media.annotation_permissions == "all":\n        return True\n    #else if media has annotation_permissions is authorized_groups check user belongs to an authorized group\n    if media.annotation_permissions == "authorized_people":\n        #TODO check that this works\n        if (not  db( (db.annotate_media_access_email.media_id == media.id ) & (db.annotate_media_access_email.email == auth.user.email  ) ).isempty() ):\n            return True\n        return False\n    #else if media has annotation_permissions is authorized_people check user is in list of authorized users\n    if media.annotation_permissions == "authorized_groups":\n        #TODO implement groups \n        return False\n    return False\n    \ndef _canRead_FlaggedSyncComment(media):\n    #if not logged return false\n    if not auth.user:\n        return False\n    #else if user is owner return true\n    if media.owner_id == auth.user_id:\n        return True\n    #else if media has view_permissions is all return true\n    if media.annotation_permissions == "all":\n        return True\n    #else if media has view_permissions is authorized_groups check user belongs to an authorized group\n    if media.annotation_permissions == "view_people":\n        #TODO check that this works\n        if (not  db( (db.view_media_access_email.media_id == media.id ) & (db.view_media_access_email.email == auth.user.email  ) ).isempty() ):\n            return True\n        return False\n    #else if media has view_permissions is authorized_people check user is in list of authorized users\n    if media.annotation_permissions == "view_groups":\n        #TODO implement for groups \n        return False\n    return False\n\n    \ndef _canUpdate_FlaggedSyncComment(comment):\n    if not auth.user:\n        return False\n    #else if user is owner of the comment return true\n    if comment.owner_id == auth.user_id:\n        return True\n    return False\n\n#delete permissions are identic to update permissions\n_canDelete_FlaggedSyncComment = _canUpdate_FlaggedSyncComment\n       \n############################################################\n#  BACKBONE JS interfaces\n############################################################\n    \ndef backbone_fsc():\n    """\n    Handles backboneJS call for flagged synchronized comments\n    """\n    #to see how actually a backbonejs call gets mapped into web2py requests\n    print "############################################################"\n    print "FlaggedSynccomments"\n    print " ----------------O------------------ "\n    print "request.args = "\n    print request.args\n    print " ----------------O------------------ "\n    print "request.vars = "\n    print request.vars\n    print " ----------------O------------------ "    \n    print "request.env = "\n    print request.env\n    #print " ----------------O------------------ "\n    #print "request = "\n    #print request\n    print "############################################################"\n    #all types of calls must be handled by this function\n    #get the media id and the comment id \n    comment_id = None #TODO fix this testing hardcoded value\n    try:\n        print "trying to get the ID of the comment"\n        if len(request.args) > 0:\n            comment_id = request.args(0, cast=int)# flagged comment ID\n    except Exception as err:\n        print "No comment ID in backbone_fsc arguments"\n        pass\n    \n    #get the media record reffered\n    #note this is a hack for overcoming the  lack of information \n    #   coming from the backbone API call and to avoid touching backbone defaults\n    #get the page that makes the call & parse\n    url_data = urlparse(request.env.http_referer)\n    #print "urldata = "+str(url_data)\n    path = [ i for i in url_data.path.strip().split("/") if len(i)>0]#WARNING!! this takes care only of one case of 2 parts\n    #print path\n    if path[0].strip() == "annotate_media":\n        media =  db(db.media.media_annotate_key == path[1]).select().first()\n    if path[0].strip() == "view_media":\n        media = db(db.media.media_view_results_key == path[1]).select().first()\n    if path[0].strip() == "embed_media":\n        media =  db(db.media.media_embed_key == path[1]).select().first()\n    print media\n    #end ugly dangerous hack\n    #media_id = None\n    #print "check media id on request"\n    #if not media_id:\n    #    response.flash = "No media ID associated with the comment"\n    #    return response.json("")\n    print "now checking the call type"\n    print "type = "\n    print request.env.request_method \n    \'\'\'\n    POST (Create)\n    \'\'\'\n    if (request.env.request_method == "POST"):\n        print "FSC POST called"        \n        #get the vars from the request\n        #check permissions\n\n        #if permissions allow, \n        #    check if it is a list of things or only one register\n        #    create the new register(s)\n        #else\n        #    response.flash = "You are not allowed to create a register in this file"\n        #response.flash = "register added"\n        new_reg = ""\n        return response.json(new_reg)\n    #\n    \'\'\'\n    #GET (Read)\n    \'\'\'\n    if (request.env.request_method == "GET"):\n        print "FSC GET called"\n        #get the vars from the request\n\n        #check if it is a single value to be read (there is an argument in the call)\n        #if not assume is looking for all the registers (in relationship with the current media file)\n        #check permissions\n\n        #if permissions allow, \n        #    check if it is a list of things or only one register\n        #    create the new register(s)\n        #else\n        #    response.flash = "You are not allowed to see this file"\n        reg = ""\n        return response.json(reg) \n    #\n    \'\'\'\n    #PUT (Update)\n    \'\'\'\n    if (request.env.request_method == "PUT" and comment_id):\n        print "FSC PUT called"\n        #get the vars from the request\n        \n        #check permissions\n        comment = db(db.flagged_comment.id == comment_id ).select().first()\n        #if permissions allow, \n        if _canUpdate_FlaggedSyncComment(comment):\n            #TODO process input data and generate the corresponding match for \n            #a database call. Sanitize inputs\n            #TODO make the register in the format that the client needs\n            reg = ""\n            return response.json(reg)\n        response.flash = "You are not allowed to modify this register"\n        return False\n    #  \n    \'\'\'\n    #DELETE (Delete)\n    \'\'\'\n    if (request.env.request_method == "PUT" and comment_id):\n        print "FSC DELETE called"\n        #if permissions allow,\n        comment = db(db.flagged_comment.id == comment_id ).select().first()\n        if _canDelete_FlaggedSyncComment(comment):\n            db(db.flagged_comment.id == comment_id ).delete()\n            #TODO make the register in the format that the client needs\n            reg = ""\n            return response.json(reg)\n        response.flash = "You are not allowed to delete this register"\n        return False\n\n    response.flash = "You dont have permissions for this opperation"\n    return response.json("")\n\n############################################################\n#  END BACKBONE JS interfaces\n############################################################\n    \n############################################################\n#  WARNING TODO fix this - this is ONLY temporal\n############################################################\n\n@auth.requires_login()\ndef ajax_create_fscomment():\n    """\n    Add flagged syncronize comment\n    """\n    #print "add media"\n    #print "request = "+str(request.vars)\n    if (request.env.request_method != "PUT"):\n        response.flash = "Invalid request"; #"{ response:error, response-detail: Invalid request}"\n\n    #TODO check for write/annotate  permissions in the file!!\n    try:\n        query_add_fscomment = db.media.insert(**reg)\n        #print "6"\n        #print "insert success!!!"\n    except Exception as err:\n        print "Error inserting record"\n        print err\n        return None\n    \n    new_fscomment = db.flagged_comment(db.flagged_comment.id == query_add_fscomment)\n   \n    return response.json( new_fscomment )\n\n#@auth.requires_login()\ndef ajax_read_fscomment():\n    """\n    returns:\n     if no args: a list of all the comments\n     if arg is a comment id: the comment\n    """\n    if (request.env.request_method != "GET"):\n        #return json.dumps( { "response":"error", "response-detail": "Invalid request"} )\n        response.flash = "Invalid Request"\n        return response.json("")\n    #all types of calls must be handled by this function\n    #get the media id and the comment id \n    comment_id = None \n    try:\n        print "trying to get the ID of the comment"\n        if len(request.args) > 0:\n            comment_id = request.args(0, cast=int)# flagged comment ID\n    except Exception as err:\n        print "No comment ID in backbone_fsc arguments"\n        #then should return a list\n        pass\n    \n    #get the media record refered\n    #note this is a hack for overcoming the  lack of information \n    #   coming from the backbone API call and to avoid touching backbone defaults\n    #get the page that makes the call & parse\n    url_data = urlparse(request.env.http_referer)\n    print "urldata = "+str(url_data)\n    path = [ i for i in url_data.path.strip().split("/") if len(i)>0]#WARNING!! this takes care only of one case of 2 parts\n    print path\n    if path[0].strip() == "annotate_media":\n        media =  db(db.media.media_annotate_key == path[1]).select().first()\n    if path[0].strip() == "view_media":\n        media = db(db.media.media_view_results_key == path[1]).select().first()\n    if path[0].strip() == "embed_media":\n        media =  db(db.media.media_embed_key == path[1]).select().first()\n\n    print "now get into the difficult DB part"\n    #if _media\n    if _canRead_FlaggedSyncComment(media):\n        print "can read"\n        if comment_id:\n            print "is a single comment, comment_id = "+comment_id\n            fsc_record = db(db.flagged_comment.id == comment_id )(db.auth_user.id == db.flagged_comment.owner_id).select(\n                                        db.flagged_comment.id, \n                                        db.flagged_comment.owner_id, \n                                        db.auth_user.first_name,\n                                        #db.auth_user.thumbnail, #TODO\n                                        db.flagged_comment.media_id,\n                                        db.flagged_comment.parent_id,\n                                        db.flagged_comment.media_time,\n                                        db.flagged_comment.flag_name,\n                                        db.flagged_comment.keyboard_shortcut,\n                                        db.flagged_comment.flag_color,\n                                        db.flagged_comment.text,\n                                        db.flagged_comment.creation_datetime,\n                                        db.flagged_comment.update_datetime,\n                                        orderby=db.flagged_comments.media_time\n                                    ).first()\n            response.json(fsc_record)\n        else:\n            print "is a bulk request"\n            fsc_record = db(db.flagged_comments.media_id == media.id)(db.auth_user.id == db.flagged_comments.owner_id).select(\n                                        db.flagged_comment.id, \n                                        db.flagged_comment.owner_id, \n                                        db.auth_user.first_name,\n                                        #db.auth_user.thumbnail, #TODO\n                                        db.flagged_comment.media_id,\n                                        db.flagged_comment.parent_id,\n                                        db.flagged_comment.media_time,\n                                        db.flagged_comment.flag_name,\n                                        db.flagged_comment.keyboard_shortcut,\n                                        db.flagged_comment.flag_color,\n                                        db.flagged_comment.text,\n                                        db.flagged_comment.creation_datetime,\n                                        db.flagged_comment.update_datetime,\n                                        orderby=db.flagged_comments.media_time\n                                    )\n            print "now make json"\n            response.json(fsc_record)\n            pass\n\n    return response.json("")\n\n@auth.requires_login()\ndef ajax_delete_fscomment():\n    """\n    User will upload a file\n    """\n    #read the request\n    #print "Delete request: "\n    if (request.env.request_method != "DELETE"):\n        #return json.dumps( { "response":"error", "response-detail": "Invalid request"} )\n        response.flash = "Invalid Request"\n    #print request\n    print request.vars\n    #check that the requester is the owner of the record\n    #TODO WARNING check what actually sends Backbone .... "request.vars.id" ??\n    fsc_record = db(db.flagged_comment.id == int(request.vars.id) ).select().first()\n    #print media_record\n    if not fsc_record.owner_id == auth.user_id:\n       #return json.dumps( { "response":"error", "response-detail": "You do not own this record, you can not delete it"} )\n       response.flash = "You do not own this record, you can not delete it"\n       return None\n    #else\n    db(db.flagged_comment.id == int(request.vars.media_id) ).delete()\n    #print "check: "\n    #print fsc_record\n    return response.json(fsc_record)\n\n############################################################\n#  END WARNING TODO fix this\n############################################################\n\n\n    \n#########################################################################\n#Invites, by massimo di piero in a post here:\n# http://www.mail-archive.com/web2py@googlegroups.com/msg78529.html\n\n#def invite():\n#    form = SQLFORM(db.invite)\n#    db.invite.uuid.default=str(uuid.uuid4())\n#    if form.process().accepted:\n#         auth.mailer.send(to=form.vars.email,\n#                          message = db.invite.uuid.default)\n#    return dict(form=form)\n\n########### end invites\n\n#########################################################################\n\n\n\n\n\n#########################################################################\n#########################################################################\n#########################################################################\n#########################################################################\n##LEGACY\n#########################################################################\n#########################################################################\n\n\n#########################################################################\n#Login Not needed\n#########################################################################\n\ndef embed_youtube_video():\n    """\n    the page can be embedded in an iframe\n    """\n    \n    """\n    Shows the list of uploaded videos\n    """\n    #if(not auth.user):\n    #    redirect(URL(\'index\'))\n    _video_id = request.args(0, cast=str)#youtube videoID\n    _video = db(db.video.video_id == _video_id)(db.video.video_network == "YOUTUBE").select()[0]\n    if not _video:\n        redirect(URL(\'video_not_found\'))\n    #check for permissions of individual and group to actually see the video, else show not allowed \n    return dict(\n                video = _video,\n                )\n\n\ndef embed_vimeo_video():\n    """\n    the page can be embedded in an iframe\n    """\n    #if(not auth.user):\n    #    redirect(URL(\'index\'))\n    _video_id = request.args(0, cast=str)#youtube videoID\n    _video = db(db.video.video_id == _video_id)(db.video.video_network == "YOUTUBE").select()[0]\n    if not _video:\n        redirect(URL(\'video_not_found\'))\n    #check for permissions of individual and group to actually see the video, else show not allowed \n    return dict(\n                video = _video,\n                )\n    return dict()\n\n\n    \ndef results():\n    """\n    results page for a certain video, only shows the results, no possibility \n    of annotation\n    """\n    return dict()\n\n\n\n#########################################################################\n#Login Required\n#########################################################################\n\n\n@auth.requires_login()\ndef videos_by():\n    """\n    Shows the list of My uploaded videos,\n    And options to update, modify and erase them\n    """\n    #check that the user has permission to see what he sees\n    #if(not auth.user):\n    #    redirect(URL(\'index\'))\n    \n    user_id = request.args(0, cast=int)#youtube user id\n    _videos = db(db.videos.person_id == user_id)(db.video.video_network == "YOUTUBE").select()\n    #TODO should check also for permissions of the user cheking the video\n    \n    return dict(\n                videos = _videos,\n                )\n\n\n\n@auth.requires_login()\ndef videos():\n    """\n    Shows me a list of all the videos I have the right to see\n    """\n    #if(not auth.user):\n    #    redirect(URL(\'index\'))\n    _videos = db(db.video.person_id == auth.user_id).select()\n    \n    return dict(\n                videos = _videos,\n                )\n\n@auth.requires_login()\ndef my_videos():\n    """\n    Shows the list of My uploaded videos,\n    And options to update, modify and erase them\n    """\n    #if(not auth.user):\n    #    redirect(URL(\'index\'))\n    _ytvideos = db(db.video.person_id == auth.user_id)(db.video.video_network == "YOUTUBE").select()\n    _vvideos = db(db.video.person_id == auth.user_id)(db.video.video_network == "VIMEO").select()\n    return dict(\n                youtube_videos = _ytvideos,\n                vimeo_videos = _vvideos,\n                )\n\n\n#TODO  change this to an ajax service AND make it for other services too (soundcloud)\n@auth.requires_login()\ndef upload_video():\n    """\n    Form to upload a new video (in fact, for the moment is only add a video from youtube)\n    """\n    uform=FORM(\'Title: \',\n              INPUT(_name=\'title\', requires=IS_NOT_EMPTY()),\n              \'Video Link: \',\n              INPUT(_name=\'link\', requires=IS_NOT_EMPTY()),\n              INPUT(_type=\'submit\'),\n              formname=\'simple_upload_video_form\')\n    if uform.process(formname=\'simple_upload_video_form\').accepted:\n        #os.system("echo \'upload form fields: "+str(uform.vars)+" \'")\n        url_data = urlparse(uform.vars.link)\n        #os.system("echo \'url_data: "+str(url_data)+" \'")\n        #now check if youtube or vimeo\n        if (url_data[1].lower().find("youtube") >=0 ):\n            query = parse_qs(url_data.query)\n            #os.system("echo \'query: "+str(query)+" \'")\n            video_id = query["v"][0]\n            db.video.insert(title = uform.vars.title,\n                                     video_id= video_id,\n                                     video_network="YOUTUBE",\n                                     full_url = uform.vars.link,\n                                    )\n        elif (url_data[1].lower().find("youtu.be") >=0 ):\n            vid = url_data.path.split("/")\n            video_id =  vid[-1] if len(vid[-1]) > 0 else vid[-2]\n            db.video.insert(title = uform.vars.title,\n                                     video_id= video_id,\n                                     video_network="YOUTUBE",\n                                     full_url = uform.vars.link,\n                                    )\n        elif (url_data[1].lower().find("vimeo") >=0 ):\n            ##treat like youtube and save data on youtube db Table\n            vid = url_data.path.split("/")\n            video_id =  vid[-1] if len(vid[-1]) > 0 else vid[-2]\n            db.video.insert(title = uform.vars.title,\n                                     video_id= video_id,\n                                     video_network="VIMEO",\n                                     full_url = uform.vars.link,\n                                    )\n        else:\n            #fail!!\n            pass\n        #response.flash = \'form accepted\'\n        pass\n    elif uform.errors:\n        response.flash = \'form has errors, please check\'\n    else:\n        #response.flash = \'please fill out the form\'\n        pass\n    return dict(\n                upload_form = uform,\n                )\n\n\n#############################\n#AJAX calls\n#############################\n\ndef get_tags():\n    """\n    ajax call for the view_video view for commenting on a video \n    with the fast annotation system\n    """\n    #os.system("echo \' getting tags "+str(request.vars)+"\'")\n    if (request.vars.video_id):\n        rows = db(db.tag.video_id == request.vars.video_id).select();\n        #os.system("echo \' tags get "+str(rows)+"\'")\n        return response.json(rows)\n    else:\n        return None\n\n\ndef get_comments():\n    """\n    ajax call for the view_video view for commenting on a video \n    with the fast annotation system\n    """\n    #os.system("echo \' getting comments "+str(request.vars)+"\'")\n    if (request.vars.video_id):\n        rows = db(db.annotations.video_id == request.vars.video_id).select(orderby=db.annotations.video_time);\n        #os.system("echo \' comments get "+str(rows)+"\'")\n        return response.json(rows)\n    else:\n        return None\n\n\n@auth.requires_login() \ndef post_annotation():\n    """\n    ajax call for the view_video view for commenting on a video\n    """\n    form = SQLFORM(db.annotations,showid = False,\n                    fields=[\'video_id\',\'video_time\', \'comment\'],)\n    form.vars.annotator_id = auth.user_id\n    #os.system("echo \'post annotation form.vars "+str(form.vars)+"\'")\n    #os.system("echo \'post annotatino request.vars "+str(request.vars)+"\'")\n    #os.system("echo \'post annotatino auth.user_id "+str(auth.user_id)+"\'")\n    if form.accepts(request, formname=None):\n        response.flash = T(\'Your comment has been successfully posted\')\n        #os.system("echo \'everything OK\'")\n        #return DIV(T("Comment posted"))\n        #return DIV(BEAUTIFY(form.vars))\n        return None\n    elif form.errors:\n        #os.system("echo \'form has errors OK\'")\n        return TABLE(*[TR(k, v) for k, v in form.errors.items()])\n\n\n@auth.requires_login() \ndef post_advice():\n    """\n    ajax call for the view_video view for commenting on a video\n    """\n    form = SQLFORM(db.advice,showid = False,\n                    fields=[ \'advice_text\'],)\n    #os.system("echo advice vars: \'"+str(request.vars)+"\'")\n    form.vars.annotator_id = auth.user_id\n    #os.system("echo advice form.vars: \'"+str(form.vars)+"\'")\n    form.vars.video_id = request.vars.annotation_video_id\n    if form.accepts(request, formname=None):\n        response.flash = T(\'Your advice has been successfully posted\')\n        #return DIV(T("Comment posted"))\n        return DIV(BEAUTIFY(form.vars))\n        #return None\n    elif form.errors:\n        return TABLE(*[TR(k, v) for k, v in form.errors.items()])\n\n@auth.requires_login()\ndef post_tag():\n    """\n    ajax call for the view_video view for commenting on a video \n    with the fast annotation system\n    """\n    form = SQLFORM(db.tag,showid = False,\n                    fields=[\'tag_type_name\', \'video_id\',\'evaluation\',\'video_time\'],)\n    form.vars.annotator_id = auth.user_id\n    #os.system("echo \'post tag "+str(form.vars)+"\'")\n    #os.system("echo \'post tag request "+str(request)+"\'")\n    #os.system("echo \'post tag request vars "+str(request.vars)+"\'")\n    #os.system("echo \'post tag "+str(auth.user_id)+"\'")\n    #try:\n    if form.accepts(request, formname=None):\n        response.flash = T(\'Tagged\')\n        #os.system("echo \'tag OK\'")\n        #return DIV(T("Comment posted"))\n        return DIV(BEAUTIFY(form.vars))\n        #return None\n    elif form.errors:\n        #os.system("echo \'tag has errors\'")\n        return TABLE(*[TR(k, v) for k, v in form.errors.items()])\n    #except Exception as e:\n    #    #os.system("echo \'There was an exception and is crazy\'")\n    #    #os.system("echo \'Exception = "+str(e)+"\'")\n        \n\n@auth.requires_login()\ndef modify_comment():\n    """\n    ajax call for the view_video view for modifying a fast commenting on a video \n    with the fast annotation system\n    """\n    if(request.vars.annotator_id and int(request.vars.annotator_id) != auth.user_id):\n        return False\n    aid = auth.user_id\n    if (request.vars.annotator_id):\n        aid = request.vars.annotator_id\n    #this fixes a BUG that happens due to time text format\n    vt = request.vars.video_time\n    svt = vt.split(\':\')\n    tsvt = []\n    #os.system("echo \' 3\'")\n    for i in svt:\n        if len(i)<2:\n            i = \'0\'+i\n        tsvt.append(i)\n    vt = \':\'.join(tsvt)\n    #os.system("echo \'vt "+str(vt)+"\'")\n    row = db(\n                db.annotations.video_id == request.vars.video_id and \n                db.annotations.annotator_id == aid and \n                db.annotations.comment == request.vars.comment and \n                db.annotations.video_time == vt \n                ).update(comment = request.vars.new_comment)\n    #os.system("echo \'row "+str(row)+"\'")\n    ret = db.annotations(\n                db.annotations.video_id == request.vars.video_id and \n                db.annotations.annotator_id == aid and \n                db.annotations.comment == request.vars.new_comment and \n                db.annotations.video_time == vt\n                )\n    #os.system("echo \'ret "+str(ret)+"\'")\n    return response.json(ret)\n\n    \n@auth.requires_login()\ndef delete_comment():\n    """\n    ajax call for the view_video view for deleting a fast commenting on a video \n    with the fast annotation system\n    """\n    if(request.vars.annotator_id and int(request.vars.annotator_id) != auth.user_id):\n        return False\n    aid = auth.user_id\n    if (request.vars.annotator_id):\n        aid = request.vars.annotator_id\n    #this fixes a BUG that happens due to time text format\n    vt = request.vars.video_time\n    svt = vt.split(\':\')\n    tsvt = []\n    #os.system("echo \' 3\'")\n    for i in svt:\n        if len(i)<2:\n            i = \'0\'+i\n        tsvt.append(i)\n    vt = \':\'.join(tsvt)\n    #os.system("echo \'vt "+str(vt)+"\'")\n    ret = db(\n                db.annotations.video_id == request.vars.video_id and \n                db.annotations.annotator_id == aid and \n                db.annotations.comment == request.vars.comment and \n                db.annotations.video_time == vt \n                ).delete()\n    #os.system("echo \'ret "+str(ret)+"\'")\n    return ret\n\n@auth.requires_login()\ndef modify_tag():\n    """\n    ajax call for the view_video view for modifying a fast commenting on a video \n    with the fast annotation system\n    """\n    #check the user is the one who created the comment or tag or the owner of the video\n    #os.system("echo \'delete tag \'")\n    #os.system("echo \'request.vars "+str(request.vars)+"\'")\n    #there are two cases, when the tag is being done by the current user and modified, and when the tag\n    #was loaded from the DB, in the first case annotator_id will not exist, so assume that is the same as the logged in user\n    #Field(\'tag_type_id\', \'reference tag_type\', requires=IS_NOT_EMPTY()),#will belong to a tag (e.g. hesitation)\n    if(request.vars.annotator_id and int(request.vars.annotator_id) != auth.user_id):\n        return False\n    aid = auth.user_id\n    if (request.vars.annotator_id):\n        aid = request.vars.annotator_id\n    #this fixes a BUG that happens due to time text format\n    vt = request.vars.video_time\n    svt = vt.split(\':\')\n    tsvt = []\n    #os.system("echo \' 3\'")\n    for i in svt:\n        if len(i)<2:\n            i = \'0\'+i\n        tsvt.append(i)\n    vt = \':\'.join(tsvt)\n    #os.system("echo \'vt "+str(vt)+"\'")\n    row = db(db.tag.tag_type_name == request.vars.tag_type_name and\n                db.tag.video_id == request.vars.video_id and \n                db.tag.annotator_id == aid and \n                db.tag.evaluation == request.vars.evaluation and \n                db.tag.video_time == vt \n                ).update(evaluation = request.vars.new_evaluation)\n    #os.system("echo \'row "+str(row)+"\'")\n    ret = db.tag(db.tag.tag_type_name == request.vars.tag_type_name and\n                db.tag.video_id == request.vars.video_id and \n                db.tag.annotator_id == aid and \n                db.tag.evaluation == request.vars.new_evaluation and \n                db.tag.video_time == vt \n                )\n    #os.system("echo \'ret "+str(ret)+"\'")\n    return response.json(ret)\n    \n@auth.requires_login()\ndef delete_tag():\n    """\n    ajax call for the view_video view for deleting a fast commenting on a video \n    with the fast annotation system\n    """\n    #check the user is the one who created the comment or tag or the owner of the video\n    #os.system("echo \'delete tag \'")\n    #os.system("echo \'request.vars "+str(request.vars)+"\'")\n    #there are two cases, when the tag is being done by the current user and modified, and when the tag\n    #was loaded from the DB, in the first case annotator_id will not exist, so assume that is the same as the logged in user\n    #Field(\'tag_type_id\', \'reference tag_type\', requires=IS_NOT_EMPTY()),#will belong to a tag (e.g. hesitation)\n    #os.system("echo \'annotator "+str(request.vars.annotator_id)+"\'")\n    #os.system("echo \'user_id "+str(auth.user_id)+"\'")\n    #os.system("echo \' type annotator "+str(type(request.vars.annotator_id))+"\'")\n    #os.system("echo \' type user_id "+str(type(auth.user_id))+"\'")\n    #os.system("echo \'compare "+str(auth.user_id != request.vars.annotator_id)+"\'")\n    #os.system("echo \'compare "+str(auth.user_id == request.vars.annotator_id)+"\'")\n    if(request.vars.annotator_id and int(request.vars.annotator_id) != auth.user_id):\n        return False\n    aid = auth.user_id\n    if (request.vars.annotator_id):\n        aid = request.vars.annotator_id\n   #this fixes a BUG that happens due to time text format\n    vt = request.vars.video_time\n    svt = vt.split(\':\')\n    tsvt = []\n    for i in svt:\n        if len(i)<2:\n            i = \'0\'+i\n        tsvt.append(i)\n    vt = \':\'.join(tsvt)\n    ret = db(db.tag.tag_type_name == request.vars.tag_type_name and\n                db.tag.video_id == request.vars.video_id and \n                db.tag.annotator_id == aid and \n                db.tag.evaluation == request.vars.evaluation and \n                db.tag.video_time == vt \n                ).delete()\n    return ret\n    \n#############################\n#############################\n\n#@auth.requires_login() #TODO make user authentication control here!!! .. for the moment a link is needed\ndef view_video(): #youtube Videos TODO, refactor name, but for the moment live it that way (there are some people depending on the name)\n    """\n    Shows the list of uploaded videos\n    """\n    #if(not auth.user):\n    #    redirect(URL(\'index\'))\n    _video_id = request.args(0, cast=str)#youtube videoID\n    \n    _video = db(db.video.video_id == _video_id)(db.video.video_network == "YOUTUBE").select()[0]\n    if not _video:\n        redirect(URL(\'video_not_found\'))\n    #os.system("echo \'video =  "+str(_video)+"\'")\n    #os.system("echo \'video.id =  "+str(_video.id)+"\'")\n    #_annotations = db(db.annotations.video_id == _video.id).select(orderby=db.annotations.video_time)\n    _advices = db(db.advice.video_id == _video.id).select()\n    _suggested_tags = [{\'name\': \'Voice\', \'fields\': [\'QUESTION\',\'OK\', \'WARNING\', \'BAD\'] } ,\n                       { \'name\':\'Gestual\', \'fields\': [\'QUESTION\',\'OK\', \'WARNING\', \'BAD\']} , \n                       { \'name\':\'Look\', \'fields\': [\'QUESTION\',\'OK\', \'WARNING\', \'BAD\']} ,\n                       { \'name\':\'Space Use\', \'fields\': [\'QUESTION\',\'OK\', \'WARNING\', \'BAD\']} , \n                       { \'name\':\'Hesitation\', \'fields\': [\'QUESTION\', \'WARNING\', \'BAD\']}\n                      ] #TODO this should come from DB and be more detailed about the fields (OK, Warning, Bad, don\'t know yet). should be passed as JSON\n    #os.system("echo \'annotations =  "+str(_annotations)+"\'")\n    #check for permissions of individual and group to actually see the video, else show not allowed \n    return dict(\n                video = _video,\n                #annotations = _annotations,\n                advices = _advices,\n                #annotation_form = aform\n                suggested_tags = _suggested_tags,\n                )\n\n\n#@auth.requires_login() #TODO make user authentication control here!!! .. for the moment a link is needed\ndef view_vimeo_video():\n    """\n    Shows the list of uploaded videos\n    """\n    #if(not auth.user):\n    #    redirect(URL(\'index\'))\n    _video_id = request.args(0, cast=str)#youtube videoID\n    \n    _video = db.video(db.video.video_id == _video_id)\n    if not _video:\n        redirect(URL(\'video_not_found\'))\n    #os.system("echo \'video.id =  "+str(_video.id)+"\'")\n    #_annotations = db(db.annotations.video_id == _video.id).select(orderby=db.annotations.video_time)\n    _advices = db(db.advice.video_id == _video.id).select()\n    _suggested_tags = [{\'name\': \'Voice\', \'fields\': [\'QUESTION\',\'OK\', \'WARNING\', \'BAD\'] } ,\n                       { \'name\':\'Gestual\', \'fields\': [\'QUESTION\',\'OK\', \'WARNING\', \'BAD\']} , \n                       { \'name\':\'Look\', \'fields\': [\'QUESTION\',\'OK\', \'WARNING\', \'BAD\']} ,\n                       { \'name\':\'Space Use\', \'fields\': [\'QUESTION\',\'OK\', \'WARNING\', \'BAD\']} , \n                       { \'name\':\'Hesitation\', \'fields\': [\'QUESTION\', \'WARNING\', \'BAD\']}\n                      ] \n    return dict(\n                video = _video,\n                #annotations = _annotations,\n                advices = _advices,\n                #annotation_form = aform\n                suggested_tags = _suggested_tags,\n                )\n\n\n\n\n#########################################################################\n#########################################################################\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(ajax_read_fscomment)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.AttributeError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.AttributeError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.AttributeError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.AttributeError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.AttributeError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.AttributeError object>'
p23
sS'args'
p24
S'("\'DAL\' object has no attribute \'flagged_comments\'",)'
p25
sS'__reduce__'
p26
S'<built-in method __reduce__ of exceptions.AttributeError object>'
p27
sS'__str__'
p28
S"<method-wrapper '__str__' of exceptions.AttributeError object>"
p29
sS'__format__'
p30
S'<built-in method __format__ of exceptions.AttributeError object>'
p31
sS'__getattribute__'
p32
S"<method-wrapper '__getattribute__' of exceptions.AttributeError object>"
p33
sS'__class__'
p34
S"<type 'exceptions.AttributeError'>"
p35
sS'__unicode__'
p36
S'<built-in method __unicode__ of exceptions.AttributeError object>'
p37
sS'__delattr__'
p38
S"<method-wrapper '__delattr__' of exceptions.AttributeError object>"
p39
sS'__subclasshook__'
p40
S'<built-in method __subclasshook__ of type object>'
p41
sS'__repr__'
p42
S"<method-wrapper '__repr__' of exceptions.AttributeError object>"
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.AttributeError object>'
p47
sS'__doc__'
p48
S"'Attribute not found.'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.AttributeError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S"'DAL' object has no attribute 'flagged_comments'"
p55
sS'request'
p56
cgluon.html
XML_unpickle
p57
(S's\xf9I\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top">ajax</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">application</td><td valign="top">:</td><td><div>AnnotatIt</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">args</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">body</td><td valign="top">:</td><td><div>&lt;cStringIO.StringO object at 0x24123e8&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cid</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">client</td><td valign="top">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">controller</td><td valign="top">:</td><td><div>default</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cookies</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">session_id_admin</td><td valign="top">:</td><td><div>127.0.0.1-a967b7ed-7da0-44b4-8527-70ff9dd5cd38<table><tr><td style="font-weight:bold;vertical-align:top">comment</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">domain</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">expires</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">httponly</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">max-age</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">secure</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">version</td><td valign="top">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_id_annotatit</td><td valign="top">:</td><td><div>127.0.0.1-c4ab2f28-1350-4609-a630-6f2377d4e2b6<table><tr><td style="font-weight:bold;vertical-align:top">comment</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">domain</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">expires</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">httponly</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">max-age</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">secure</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">version</td><td valign="top">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">env</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">app_folders</td><td valign="top">:</td><td><div>set([&#x27;/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/&#x27;, &#x27;/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/admin/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">applications_parent</td><td valign="top">:</td><td><div>/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">db_sessions</td><td valign="top">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">debugging</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">gluon_parent</td><td valign="top">:</td><td><div>/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">gunicorn_socket</td><td valign="top">:</td><td><div>&lt;socket._socketobject object at 0x23f57c0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_accept</td><td valign="top">:</td><td><div>application/json, text/javascript, */*; q=0.01</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_accept_encoding</td><td valign="top">:</td><td><div>gzip,deflate,sdch</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_accept_language</td><td valign="top">:</td><td><div>en-US,en;q=0.8,fr;q=0.6,es;q=0.4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_cache_control</td><td valign="top">:</td><td><div>no-cache</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_connection</td><td valign="top">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_cookie</td><td valign="top">:</td><td><div>session_id_admin=127.0.0.1-a967b7ed-7da0-44b4-8527-70ff9dd5cd38; session_id_annotatit=127.0.0.1-c4ab2f28-1350-4609-a630-6f2377d4e2b6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_host</td><td valign="top">:</td><td><div>localhost:5000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_pragma</td><td valign="top">:</td><td><div>no-cache</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_referer</td><td valign="top">:</td><td><div>http://localhost:5000/annotate_media/144291f6-f3bc-4e6e-813b-259ee1b919db/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_user_agent</td><td valign="top">:</td><td><div>Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.63 Safari/537.36</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">http_x_requested_with</td><td valign="top">:</td><td><div>XMLHttpRequest</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_jython</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_pypy</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">local_hosts</td><td valign="top">:</td><td><div><table><tr><td><div>cotita</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>localhost</div></td></tr><tr><td><div>127.0.1.1</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path_info</td><td valign="top">:</td><td><div>/ajax_read_fscomment</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">query_string</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">raw_uri</td><td valign="top">:</td><td><div>/ajax_read_fscomment</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">remote_addr</td><td valign="top">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">remote_port</td><td valign="top">:</td><td><div>48421</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">request_method</td><td valign="top">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">request_uri</td><td valign="top">:</td><td><div>/AnnotatIt/default/ajax_read_fscomment</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">script_name</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_name</td><td valign="top">:</td><td><div>localhost</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_port</td><td valign="top">:</td><td><div>5000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_protocol</td><td valign="top">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">server_software</td><td valign="top">:</td><td><div>gunicorn/0.17.2</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_crontype</td><td valign="top">:</td><td><div>soft</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_original_uri</td><td valign="top">:</td><td><div>/ajax_read_fscomment</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_path</td><td valign="top">:</td><td><div>/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_version</td><td valign="top">:</td><td><div>2.5.1-stable+timestamp.2013.06.06.15.39.19</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_errors</td><td valign="top">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x7fbd4ed42270&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_file_wrapper</td><td valign="top">:</td><td><div>&lt;class gunicorn.http.wsgi.FileWrapper at 0x1c4f808&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_input</td><td valign="top">:</td><td><div>&lt;gunicorn.http.body.Body object at 0x240af90&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_multiprocess</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_multithread</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_run_once</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_url_scheme</td><td valign="top">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi_version</td><td valign="top">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">extension</td><td valign="top">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">folder</td><td valign="top">:</td><td><div>/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">function</td><td valign="top">:</td><td><div>ajax_read_fscomment</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">get_vars</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">global_settings</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">app_folders</td><td valign="top">:</td><td><div>set([&#x27;/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/&#x27;, &#x27;/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/admin/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">applications_parent</td><td valign="top">:</td><td><div>/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">db_sessions</td><td valign="top">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">debugging</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">gluon_parent</td><td valign="top">:</td><td><div>/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_jython</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_pypy</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">local_hosts</td><td valign="top">:</td><td><div><table><tr><td><div>cotita</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>localhost</div></td></tr><tr><td><div>127.0.1.1</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_crontype</td><td valign="top">:</td><td><div>soft</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">web2py_version</td><td valign="top">:</td><td><div>2.5.1-stable+timestamp.2013.06.06.15.39.19</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_https</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_local</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">is_restful</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">now</td><td valign="top">:</td><td><div>datetime.datetime(2013, 7, 13, 17, 59, 34, 894288)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">post_vars</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">url</td><td valign="top">:</td><td><div>/ajax_read_fscomment</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">utcnow</td><td valign="top">:</td><td><div>datetime.datetime(2013, 7, 13, 15, 59, 34, 894312)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">uuid</td><td valign="top">:</td><td><div>AnnotatIt/127.0.0.1.2013-07-13.17-59-34.22bd96d3-889f-429e-8d8a-caa43e993668</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">vars</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">environ</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">HTTP_ACCEPT</td><td valign="top">:</td><td><div>application/json, text/javascript, */*; q=0.01</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_ACCEPT_ENCODING</td><td valign="top">:</td><td><div>gzip,deflate,sdch</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_ACCEPT_LANGUAGE</td><td valign="top">:</td><td><div>en-US,en;q=0.8,fr;q=0.6,es;q=0.4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_CACHE_CONTROL</td><td valign="top">:</td><td><div>no-cache</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_CONNECTION</td><td valign="top">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_COOKIE</td><td valign="top">:</td><td><div>session_id_admin=127.0.0.1-a967b7ed-7da0-44b4-8527-70ff9dd5cd38; session_id_annotatit=127.0.0.1-c4ab2f28-1350-4609-a630-6f2377d4e2b6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_HOST</td><td valign="top">:</td><td><div>localhost:5000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_PRAGMA</td><td valign="top">:</td><td><div>no-cache</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_REFERER</td><td valign="top">:</td><td><div>http://localhost:5000/annotate_media/144291f6-f3bc-4e6e-813b-259ee1b919db/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_USER_AGENT</td><td valign="top">:</td><td><div>Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.63 Safari/537.36</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">HTTP_X_REQUESTED_WITH</td><td valign="top">:</td><td><div>XMLHttpRequest</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">PATH_INFO</td><td valign="top">:</td><td><div>/ajax_read_fscomment</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">QUERY_STRING</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">RAW_URI</td><td valign="top">:</td><td><div>/ajax_read_fscomment</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REMOTE_ADDR</td><td valign="top">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REMOTE_PORT</td><td valign="top">:</td><td><div>48421</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REQUEST_METHOD</td><td valign="top">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">REQUEST_URI</td><td valign="top">:</td><td><div>/AnnotatIt/default/ajax_read_fscomment</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SCRIPT_NAME</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_NAME</td><td valign="top">:</td><td><div>localhost</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_PORT</td><td valign="top">:</td><td><div>5000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_PROTOCOL</td><td valign="top">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">SERVER_SOFTWARE</td><td valign="top">:</td><td><div>gunicorn/0.17.2</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">WEB2PY_ORIGINAL_URI</td><td valign="top">:</td><td><div>/ajax_read_fscomment</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">gunicorn.socket</td><td valign="top">:</td><td><div>&lt;socket._socketobject object at 0x23f57c0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.errors</td><td valign="top">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x7fbd4ed42270&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.file_wrapper</td><td valign="top">:</td><td><div>&lt;class gunicorn.http.wsgi.FileWrapper at 0x1c4f808&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.input</td><td valign="top">:</td><td><div>&lt;cStringIO.StringO object at 0x24123e8&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.multiprocess</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.multithread</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.run_once</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.url_scheme</td><td valign="top">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">wsgi.version</td><td valign="top">:</td><td><div>1</div></td></tr></table></div></td></tr></table></div></td></tr></table></div>'
tRp58
sS'frames'
p59
(lp60
(dp61
S'file'
p62
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/restricted.py'
p63
sS'dump'
p64
(dp65
S'environment'
p66
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'APP_DOMAIN_NAME': 'AnnotatIt.com', 'APP_DOMAIN_NAME_2': 'Annotat.It', 'APP_NAME': 'AnnotatIt', 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, ...}"
p67
sS'ccode'
p68
S'<code object <module> at 0x2773930, file "/home/...ations/AnnotatIt/controllers/default.py", line 6>'
p69
ssS'lnum'
p70
I212
sS'lines'
p71
(dp72
I207
S'    try:'
p73
sI208
S'        if isinstance(code, types.CodeType):'
p74
sI209
S'            ccode = code'
p75
sI210
S'        else:'
p76
sI211
S'            ccode = compile2(code, layer)'
p77
sI212
S'        exec ccode in environment'
p78
sI213
S'    except HTTP:'
p79
sI214
S'        raise'
p80
sI215
S'    except RestrictedError:'
p81
sI216
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p82
ssS'call'
p83
S"(code='# -*- coding: utf-8 -*-\\n\\n#######################...onse._vars=response._caller(ajax_read_fscomment)\\n', environment={'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'APP_DOMAIN_NAME': 'AnnotatIt.com', 'APP_DOMAIN_NAME_2': 'Annotat.It', 'APP_NAME': 'AnnotatIt', 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, ...}, layer='/home/leo/projects/AnnotatIt/annotatit-beta/hero...eta/applications/AnnotatIt/controllers/default.py')"
p84
sS'func'
p85
S'restricted'
p86
sa(dp87
g62
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/controllers/default.py'
p88
sg64
(dp89
sg70
I1281
sg71
(dp90
I1270
S'    http://..../[app]/default/data/update/[table]/[id]'
p91
sI1271
S'    http://..../[app]/default/data/delete/[table]/[id]'
p92
sI1272
S'    http://..../[app]/default/data/select/[table]'
p93
sI1273
S'    http://..../[app]/default/data/search/[table]'
p94
sI1274
S'    but URLs must be signed, i.e. linked with'
p95
sI1275
S"      A('table',_href=URL('data/tables',user_signature=True))"
p96
sI1276
S'    or with the signed load operator'
p97
sI1277
S"      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)"
p98
sI1278
S'    """'
p99
sI1279
S'    return dict(form=crud())'
p100
ssg83
S'()'
p101
sg85
S'<module>'
p102
sa(dp103
g62
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/globals.py'
p104
sg64
(dp105
S'self'
p106
S'undefined'
p107
sS'f'
S'<function ajax_read_fscomment>'
p108
ssg70
I194
sg71
(dp109
I192
S"        self.delimiters = ('{{', '}}')"
p110
sI193
S'        self._vars = None'
p111
sI194
S'        self._caller = lambda f: f()'
p112
sI195
S'        self._view_environment = None'
p113
sI196
S'        self._custom_commit = None'
p114
sI197
S'        self._custom_rollback = None'
p115
sI198
S''
sI189
S'        self.menu = []             # used by the default view layout'
p116
sI190
S'        self.files = []            # used by web2py_ajax.html'
p117
sI191
S'        self.generic_patterns = []  # patterns to allow generic views'
p118
ssg83
S'(f=<function ajax_read_fscomment>)'
p119
sg85
S'<lambda>'
p120
sa(dp121
g62
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/controllers/default.py'
p122
sg64
(dp123
S'orderby'
p124
g107
sS'db.auth_user.first_name'
p125
S'<gluon.dal.Field object>'
p126
sS'db.flagged_comment'
p127
S'<Table flagged_comment (id,owner_id,media_id,par...ag_color,text,creation_datetime,update_datetime)>'
p128
sS'db.auth_user.id'
p129
S'<gluon.dal.Field object>'
p130
sS'db.flagged_comment.media_time'
p131
S'<gluon.dal.Field object>'
p132
sS'db.flagged_comment.id'
p133
S'<gluon.dal.Field object>'
p134
sS'media.id'
p135
S'31L'
p136
sS'db.flagged_comment.update_datetime'
p137
S'<gluon.dal.Field object>'
p138
sS'db.flagged_comment.parent_id'
p139
S'<gluon.dal.Field object>'
p140
sS'db.flagged_comment.creation_datetime'
p141
S'<gluon.dal.Field object>'
p142
sS'db.flagged_comments'
p143
g107
sS'db.auth_user'
p144
S'<Table auth_user (id,first_name,last_name,email,...stration_key,reset_password_key,registration_id)>'
p145
sS'db.flagged_comment.keyboard_shortcut'
p146
S'<gluon.dal.Field object>'
p147
sS'fsc_record'
p148
g107
sS'media'
p149
S"<Row {'subtitle': '', 'media_id': 'Y1rtZRwrhL4',...te_key': '144291f6-f3bc-4e6e-813b-259ee1b919db'}>"
p150
sS'global db'
p151
S'<DAL uri="sqlite://heroku.test.sqlite">'
p152
sS'db.flagged_comment.owner_id'
p153
S'<gluon.dal.Field object>'
p154
sS'db.flagged_comment.text'
p155
S'<gluon.dal.Field object>'
p156
sS'db.flagged_comment.flag_color'
p157
S'<gluon.dal.Field object>'
p158
sS'db.flagged_comment.media_id'
p159
S'<gluon.dal.Field object>'
p160
sS'db.flagged_comment.flag_name'
p161
S'<gluon.dal.Field object>'
p162
ssg70
I658
sg71
(dp163
I653
S'                                        orderby=db.flagged_comments.media_time'
p164
sI654
S'                                    ).first()'
p165
sI655
S'            response.json(fsc_record)'
p166
sI656
S'        else:'
p167
sI657
S'            print "is a bulk request"'
p168
sI658
S'            fsc_record = db(db.flagged_comments.media_id == media.id)(db.auth_user.id == db.flagged_comments.owner_id).select('
p169
sI659
S'                                        db.flagged_comment.id,'
p170
sI660
S'                                        db.flagged_comment.owner_id,'
p171
sI661
S'                                        db.auth_user.first_name,'
p172
sI662
S'                                        #db.auth_user.thumbnail, #TODO'
p173
ssg83
S'()'
p174
sg85
S'ajax_read_fscomment'
p175
sa(dp176
g62
S'/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/dal.py'
p177
sg64
(dp178
S'self'
p179
S'<DAL uri="sqlite://heroku.test.sqlite">'
p180
sS'global ogetattr'
p181
S"<slot wrapper '__getattribute__' of 'object' objects>"
p182
sS'key'
p183
S"'flagged_comments'"
p184
ssg70
I7902
sg71
(dp185
I7904
S'    def __setitem__(self, key, value):'
p186
sI7905
S'        osetattr(self, str(key), value)'
p187
sI7906
S''
sI7897
S'    def __getattr__(self, key):'
p188
sI7898
S"        if ogetattr(self,'_lazy_tables') and \\"
p189
sI7899
S"                key in ogetattr(self,'_LAZY_TABLES'):"
p190
sI7900
S'            tablename, fields, args = self._LAZY_TABLES.pop(key)'
p191
sI7901
S'            return self.lazy_define_table(tablename,*fields,**args)'
p192
sI7902
S'        return ogetattr(self, key)'
p193
sI7903
S''
ssg83
S'(self=<DAL uri="sqlite://heroku.test.sqlite">, key=\'flagged_comments\')'
p194
sg85
S'__getattr__'
p195
sasS'pyver'
p196
S'Python 2.7.3: /home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/venv/bin/python (prefix: /home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/venv)'
p197
sS'session'
p198
g57
(S's\xec\x07\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top">auth</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">expiration</td><td valign="top">:</td><td><div>2592000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">hmac_key</td><td valign="top">:</td><td><div>ec5239eb-7189-4d46-8547-e94d20d681e2</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">last_visit</td><td valign="top">:</td><td><div>datetime.datetime(2013, 7, 4, 18, 31, 9, 758298)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">remember</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">user</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">email</td><td valign="top">:</td><td><div>leo.m.rocha@gmail.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">first_name</td><td valign="top">:</td><td><div>Leonardo</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">id</td><td valign="top">:</td><td><div>1L</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">last_name</td><td valign="top">:</td><td><div>Rocha</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">registration_id</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">registration_key</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">reset_password_key</td><td valign="top">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">user_groups</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">1</td><td valign="top">:</td><td><div>user_1</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">flash</td><td valign="top">:</td><td><div>None</div></td></tr></table></div>'
tRp199
sS'etype'
p200
S"<type 'exceptions.AttributeError'>"
p201
sS'date'
p202
S'Sat Jul 13 17:59:34 2013'
p203
sS'response'
p204
g57
(S's\xb1\x1a\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top">body</td><td valign="top">:</td><td><div>&lt;cStringIO.StringO object at 0x2621a40&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">cookies</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">session_id_annotatit</td><td valign="top">:</td><td><div>127.0.0.1-c4ab2f28-1350-4609-a630-6f2377d4e2b6<table><tr><td style="font-weight:bold;vertical-align:top">comment</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">domain</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">expires</td><td valign="top">:</td><td><div>2592000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">httponly</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">max-age</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">path</td><td valign="top">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">secure</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">version</td><td valign="top">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">delimiters</td><td valign="top">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">files</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">flash</td><td valign="top">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">generic_patterns</td><td valign="top">:</td><td><div><table><tr><td><div>*</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">google_analytics_id</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">headers</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">X-Powered-By</td><td valign="top">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">logo</td><td valign="top">:</td><td><div><a class="brand" href="http://www.annotatit.com/"><b>AnnotatIt</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">logo_img</td><td valign="top">:</td><td><div><img alt="AnnotatIt" src="/AnnotatIt/static/images/annotatit_pencil_200.png" /></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">menu</td><td valign="top">:</td><td><div><table><tr><td><div><table><tr><td><div>Media</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/videos</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>My media</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/my_media</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Add media</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/add_media</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">meta</td><td valign="top">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top">author</td><td valign="top">:</td><td><div>Leonardo M. Rocha &lt;leo@annotatit.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">description</td><td valign="top">:</td><td><div>Synchronized Video Annotation</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">generator</td><td valign="top">:</td><td><div>Leonardo M. Rocha</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">keywords</td><td valign="top">:</td><td><div>personal development, leadership, spokesman, video, audio, annotation, social annotation, video annotation, video notes, music notes, media notes, music annotation, music education, online music education, online music video tagging, video analysis, music analysis, media analysis, sound analysis</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">models_to_run</td><td valign="top">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^default/\\w+\\.py$</div></td></tr><tr><td><div>^default/ajax_read_fscomment/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">postprocessing</td><td valign="top">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_cookie_expires</td><td valign="top">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_data_name</td><td valign="top">:</td><td><div>session_data_annotatit</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_file</td><td valign="top">:</td><td><div>&lt;open file &#x27;/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/sessions/127.0.0.1-c4ab2f28-1350-4609-a630-6f2377d4e2b6&#x27;, mode &#x27;rb+&#x27; at 0x218fc90&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_filename</td><td valign="top">:</td><td><div>/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/sessions/127.0.0.1-c4ab2f28-1350-4609-a630-6f2377d4e2b6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_id</td><td valign="top">:</td><td><div>127.0.0.1-c4ab2f28-1350-4609-a630-6f2377d4e2b6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_id_name</td><td valign="top">:</td><td><div>session_id_annotatit</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_locked</td><td valign="top">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_new</td><td valign="top">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">session_storage_type</td><td valign="top">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">status</td><td valign="top">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">subtitle</td><td valign="top">:</td><td><div>Collaborative Synchronized Media Annotations made Easy</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">title</td><td valign="top">:</td><td><div>Annotatit</div></td></tr><tr><td style="font-weight:bold;vertical-align:top">view</td><td valign="top">:</td><td><div>default/ajax_read_fscomment.html</div></td></tr></table></div>'
tRp205
sS'locals'
p206
(dp207
S'self'
p208
S'<DAL uri="sqlite://heroku.test.sqlite">'
p209
sS'key'
p210
S"'flagged_comments'"
p211
sssS'traceback'
p212
S'Traceback (most recent call last):\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/controllers/default.py", line 1281, in <module>\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/globals.py", line 194, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/applications/AnnotatIt/controllers/default.py", line 658, in ajax_read_fscomment\n    fsc_record = db(db.flagged_comments.media_id == media.id)(db.auth_user.id == db.flagged_comments.owner_id).select(\n  File "/home/leo/projects/AnnotatIt/annotatit-beta/heroku/annotatit-beta/gluon/dal.py", line 7902, in __getattr__\n    return ogetattr(self, key)\nAttributeError: \'DAL\' object has no attribute \'flagged_comments\'\n'
p213
s.